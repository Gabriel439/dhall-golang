// Code generated by pigeon; DO NOT EDIT.

package internal

import (
	"bytes"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"net"
	"net/url"
	"os"
	"path"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	. "github.com/philandstuff/dhall-golang/term"
)

// Helper function for parsing all the operator parsing blocks
// see OrExpression for an example of how this is used
func parseOperator(opcode OpCode, first, rest interface{}) Term {
	out := first.(Term)
	if rest == nil {
		return out
	}
	for _, b := range rest.([]interface{}) {
		nextTerm := b.([]interface{})[3].(Term)
		out = Op{OpCode: opcode, L: out, R: nextTerm}
	}
	return out
}

func isNonCharacter(r rune) bool {
	return r&0xfffe == 0xfffe
}

func validCodepoint(r rune) bool {
	return utf8.ValidRune(r) && !isNonCharacter(r)
}

// Helper for parsing unicode code points
func parseCodepoint(codepointText string) ([]byte, error) {
	i, err := strconv.ParseInt(codepointText, 16, 32)
	if err != nil {
		return nil, err
	}
	r := rune(i)
	if !validCodepoint(r) {
		return nil, fmt.Errorf("%s is not a valid unicode code point", codepointText)
	}
	return []byte(string([]rune{r})), nil
}

var g = &grammar{
	rules: []*rule{
		{
			name: "DhallFile",
			pos:  position{line: 57, col: 1, offset: 1189},
			expr: &actionExpr{
				pos: position{line: 57, col: 13, offset: 1203},
				run: (*parser).callonDhallFile1,
				expr: &seqExpr{
					pos: position{line: 57, col: 13, offset: 1203},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 57, col: 13, offset: 1203},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 15, offset: 1205},
								name: "CompleteExpression",
							},
						},
						&notExpr{
							pos: position{line: 742, col: 7, offset: 23665},
							expr: &anyMatcher{
								line: 742, col: 8, offset: 23666,
							},
						},
					},
				},
			},
		},
		{
			name: "CompleteExpression",
			pos:  position{line: 59, col: 1, offset: 1247},
			expr: &actionExpr{
				pos: position{line: 59, col: 22, offset: 1270},
				run: (*parser).callonCompleteExpression1,
				expr: &seqExpr{
					pos: position{line: 59, col: 22, offset: 1270},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 59, col: 22, offset: 1270},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 59, col: 24, offset: 1272},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 59, col: 26, offset: 1274},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 59, col: 37, offset: 1285},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "BlockComment",
			pos:  position{line: 83, col: 1, offset: 1867},
			expr: &seqExpr{
				pos: position{line: 83, col: 16, offset: 1884},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 83, col: 16, offset: 1884},
						val:        "{-",
						ignoreCase: false,
						want:       "\"{-\"",
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 21, offset: 1889},
						name: "BlockCommentContinue",
					},
				},
			},
		},
		{
			name: "BlockCommentContinue",
			pos:  position{line: 91, col: 1, offset: 1984},
			expr: &choiceExpr{
				pos: position{line: 92, col: 7, offset: 2015},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 92, col: 7, offset: 2015},
						val:        "-}",
						ignoreCase: false,
						want:       "\"-}\"",
					},
					&seqExpr{
						pos: position{line: 93, col: 7, offset: 2026},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 93, col: 7, offset: 2026},
								name: "BlockComment",
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 20, offset: 2039},
								name: "BlockCommentContinue",
							},
						},
					},
					&seqExpr{
						pos: position{line: 94, col: 7, offset: 2066},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 86, col: 5, offset: 1936},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 86, col: 5, offset: 1936},
										val:        "[êÄÄD\\t\\n -\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
										chars:      []rune{'êÄÄ', 'D', '\t', '\n'},
										ranges:     []rune{' ', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
										ignoreCase: false,
										inverted:   false,
									},
									&actionExpr{
										pos: position{line: 61, col: 14, offset: 1321},
										run: (*parser).callonBlockCommentContinue9,
										expr: &litMatcher{
											pos:        position{line: 61, col: 14, offset: 1321},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 24, offset: 2083},
								name: "BlockCommentContinue",
							},
						},
					},
				},
			},
		},
		{
			name: "WhitespaceChunk",
			pos:  position{line: 100, col: 1, offset: 2250},
			expr: &choiceExpr{
				pos: position{line: 100, col: 19, offset: 2270},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 100, col: 19, offset: 2270},
						val:        "[ \\t\\n]",
						chars:      []rune{' ', '\t', '\n'},
						ignoreCase: false,
						inverted:   false,
					},
					&actionExpr{
						pos: position{line: 61, col: 14, offset: 1321},
						run: (*parser).callonWhitespaceChunk3,
						expr: &litMatcher{
							pos:        position{line: 61, col: 14, offset: 1321},
							val:        "\r\n",
							ignoreCase: false,
							want:       "\"\\r\\n\"",
						},
					},
					&actionExpr{
						pos: position{line: 98, col: 15, offset: 2168},
						run: (*parser).callonWhitespaceChunk5,
						expr: &seqExpr{
							pos: position{line: 98, col: 15, offset: 2168},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 98, col: 15, offset: 2168},
									val:        "--",
									ignoreCase: false,
									want:       "\"--\"",
								},
								&labeledExpr{
									pos:   position{line: 98, col: 20, offset: 2173},
									label: "content",
									expr: &actionExpr{
										pos: position{line: 98, col: 29, offset: 2182},
										run: (*parser).callonWhitespaceChunk9,
										expr: &zeroOrMoreExpr{
											pos: position{line: 98, col: 29, offset: 2182},
											expr: &charClassMatcher{
												pos:        position{line: 96, col: 10, offset: 2116},
												val:        "[êÄÄD\\t -\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
												chars:      []rune{'êÄÄ', 'D', '\t'},
												ranges:     []rune{' ', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&choiceExpr{
									pos: position{line: 61, col: 7, offset: 1314},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 61, col: 7, offset: 1314},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&actionExpr{
											pos: position{line: 61, col: 14, offset: 1321},
											run: (*parser).callonWhitespaceChunk14,
											expr: &litMatcher{
												pos:        position{line: 61, col: 14, offset: 1321},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 52, offset: 2303},
						name: "BlockComment",
					},
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 102, col: 1, offset: 2317},
			expr: &zeroOrMoreExpr{
				pos: position{line: 102, col: 5, offset: 2323},
				expr: &ruleRefExpr{
					pos:  position{line: 102, col: 5, offset: 2323},
					name: "WhitespaceChunk",
				},
			},
		},
		{
			name: "_1",
			pos:  position{line: 104, col: 1, offset: 2341},
			expr: &oneOrMoreExpr{
				pos: position{line: 104, col: 6, offset: 2348},
				expr: &ruleRefExpr{
					pos:  position{line: 104, col: 6, offset: 2348},
					name: "WhitespaceChunk",
				},
			},
		},
		{
			name: "DoubleQuoteChunk",
			pos:  position{line: 132, col: 1, offset: 3138},
			expr: &choiceExpr{
				pos: position{line: 133, col: 6, offset: 3164},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 133, col: 6, offset: 3164},
						name: "Interpolation",
					},
					&actionExpr{
						pos: position{line: 134, col: 6, offset: 3183},
						run: (*parser).callonDoubleQuoteChunk3,
						expr: &seqExpr{
							pos: position{line: 134, col: 6, offset: 3183},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 134, col: 6, offset: 3183},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 134, col: 11, offset: 3188},
									label: "e",
									expr: &choiceExpr{
										pos: position{line: 138, col: 8, offset: 3279},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 138, col: 8, offset: 3279},
												val:        "[\"$\\\\/]",
												chars:      []rune{'"', '$', '\\', '/'},
												ignoreCase: false,
												inverted:   false,
											},
											&actionExpr{
												pos: position{line: 142, col: 8, offset: 3324},
												run: (*parser).callonDoubleQuoteChunk9,
												expr: &litMatcher{
													pos:        position{line: 142, col: 8, offset: 3324},
													val:        "b",
													ignoreCase: false,
													want:       "\"b\"",
												},
											},
											&actionExpr{
												pos: position{line: 143, col: 8, offset: 3364},
												run: (*parser).callonDoubleQuoteChunk11,
												expr: &litMatcher{
													pos:        position{line: 143, col: 8, offset: 3364},
													val:        "f",
													ignoreCase: false,
													want:       "\"f\"",
												},
											},
											&actionExpr{
												pos: position{line: 144, col: 8, offset: 3404},
												run: (*parser).callonDoubleQuoteChunk13,
												expr: &litMatcher{
													pos:        position{line: 144, col: 8, offset: 3404},
													val:        "n",
													ignoreCase: false,
													want:       "\"n\"",
												},
											},
											&actionExpr{
												pos: position{line: 145, col: 8, offset: 3444},
												run: (*parser).callonDoubleQuoteChunk15,
												expr: &litMatcher{
													pos:        position{line: 145, col: 8, offset: 3444},
													val:        "r",
													ignoreCase: false,
													want:       "\"r\"",
												},
											},
											&actionExpr{
												pos: position{line: 146, col: 8, offset: 3484},
												run: (*parser).callonDoubleQuoteChunk17,
												expr: &litMatcher{
													pos:        position{line: 146, col: 8, offset: 3484},
													val:        "t",
													ignoreCase: false,
													want:       "\"t\"",
												},
											},
											&actionExpr{
												pos: position{line: 147, col: 8, offset: 3524},
												run: (*parser).callonDoubleQuoteChunk19,
												expr: &seqExpr{
													pos: position{line: 147, col: 8, offset: 3524},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 147, col: 8, offset: 3524},
															val:        "u",
															ignoreCase: false,
															want:       "\"u\"",
														},
														&labeledExpr{
															pos:   position{line: 147, col: 12, offset: 3528},
															label: "u",
															expr: &choiceExpr{
																pos: position{line: 150, col: 9, offset: 3589},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 150, col: 9, offset: 3589},
																		run: (*parser).callonDoubleQuoteChunk24,
																		expr: &seqExpr{
																			pos: position{line: 150, col: 9, offset: 3589},
																			exprs: []interface{}{
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 153, col: 9, offset: 3687},
																		run: (*parser).callonDoubleQuoteChunk38,
																		expr: &seqExpr{
																			pos: position{line: 153, col: 9, offset: 3687},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 153, col: 9, offset: 3687},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 153, col: 13, offset: 3691},
																					expr: &choiceExpr{
																						pos: position{line: 108, col: 10, offset: 2394},
																						alternatives: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 106, col: 9, offset: 2376},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&charClassMatcher{
																								pos:        position{line: 108, col: 18, offset: 2402},
																								val:        "[a-f]i",
																								ranges:     []rune{'a', 'f'},
																								ignoreCase: true,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 153, col: 21, offset: 3699},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 158, col: 6, offset: 3808},
						val:        "[êÄÄD -!#-[]-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
						chars:      []rune{'êÄÄ', 'D'},
						ranges:     []rune{' ', '!', '#', '[', ']', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "DoubleQuoteLiteral",
			pos:  position{line: 163, col: 1, offset: 3874},
			expr: &actionExpr{
				pos: position{line: 163, col: 22, offset: 3897},
				run: (*parser).callonDoubleQuoteLiteral1,
				expr: &seqExpr{
					pos: position{line: 163, col: 22, offset: 3897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 163, col: 22, offset: 3897},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 163, col: 26, offset: 3901},
							label: "chunks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 163, col: 33, offset: 3908},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 33, offset: 3908},
									name: "DoubleQuoteChunk",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 163, col: 51, offset: 3926},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteContinue",
			pos:  position{line: 180, col: 1, offset: 4394},
			expr: &choiceExpr{
				pos: position{line: 181, col: 7, offset: 4424},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 181, col: 7, offset: 4424},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 181, col: 7, offset: 4424},
								name: "Interpolation",
							},
							&ruleRefExpr{
								pos:  position{line: 181, col: 21, offset: 4438},
								name: "SingleQuoteContinue",
							},
						},
					},
					&seqExpr{
						pos: position{line: 182, col: 7, offset: 4464},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 187, col: 20, offset: 4623},
								run: (*parser).callonSingleQuoteContinue6,
								expr: &litMatcher{
									pos:        position{line: 187, col: 20, offset: 4623},
									val:        "'''",
									ignoreCase: false,
									want:       "\"'''\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 182, col: 24, offset: 4481},
								name: "SingleQuoteContinue",
							},
						},
					},
					&seqExpr{
						pos: position{line: 183, col: 7, offset: 4507},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 191, col: 24, offset: 4783},
								run: (*parser).callonSingleQuoteContinue10,
								expr: &litMatcher{
									pos:        position{line: 191, col: 24, offset: 4783},
									val:        "''${",
									ignoreCase: false,
									want:       "\"''${\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 183, col: 28, offset: 4528},
								name: "SingleQuoteContinue",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 184, col: 7, offset: 4554},
						val:        "''",
						ignoreCase: false,
						want:       "\"''\"",
					},
					&seqExpr{
						pos: position{line: 185, col: 7, offset: 4565},
						exprs: []interface{}{
							&choiceExpr{
								pos: position{line: 194, col: 6, offset: 4850},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 194, col: 6, offset: 4850},
										val:        "[êÄÄD\\t\\n -\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
										chars:      []rune{'êÄÄ', 'D', '\t', '\n'},
										ranges:     []rune{' ', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
										ignoreCase: false,
										inverted:   false,
									},
									&actionExpr{
										pos: position{line: 61, col: 14, offset: 1321},
										run: (*parser).callonSingleQuoteContinue17,
										expr: &litMatcher{
											pos:        position{line: 61, col: 14, offset: 1321},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 185, col: 23, offset: 4581},
								name: "SingleQuoteContinue",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteLiteral",
			pos:  position{line: 199, col: 1, offset: 4901},
			expr: &actionExpr{
				pos: position{line: 199, col: 22, offset: 4924},
				run: (*parser).callonSingleQuoteLiteral1,
				expr: &seqExpr{
					pos: position{line: 199, col: 22, offset: 4924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 199, col: 22, offset: 4924},
							val:        "''",
							ignoreCase: false,
							want:       "\"''\"",
						},
						&choiceExpr{
							pos: position{line: 61, col: 7, offset: 1314},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 61, col: 7, offset: 1314},
									val:        "\n",
									ignoreCase: false,
									want:       "\"\\n\"",
								},
								&actionExpr{
									pos: position{line: 61, col: 14, offset: 1321},
									run: (*parser).callonSingleQuoteLiteral6,
									expr: &litMatcher{
										pos:        position{line: 61, col: 14, offset: 1321},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 31, offset: 4933},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 39, offset: 4941},
								name: "SingleQuoteContinue",
							},
						},
					},
				},
			},
		},
		{
			name: "Interpolation",
			pos:  position{line: 217, col: 1, offset: 5491},
			expr: &actionExpr{
				pos: position{line: 217, col: 17, offset: 5509},
				run: (*parser).callonInterpolation1,
				expr: &seqExpr{
					pos: position{line: 217, col: 17, offset: 5509},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 17, offset: 5509},
							val:        "${",
							ignoreCase: false,
							want:       "\"${\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 22, offset: 5514},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 24, offset: 5516},
								name: "CompleteExpression",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 43, offset: 5535},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "TextLiteral",
			pos:  position{line: 219, col: 1, offset: 5558},
			expr: &choiceExpr{
				pos: position{line: 219, col: 15, offset: 5574},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 15, offset: 5574},
						name: "DoubleQuoteLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 36, offset: 5595},
						name: "SingleQuoteLiteral",
					},
				},
			},
		},
		{
			name: "DeBruijn",
			pos:  position{line: 329, col: 1, offset: 8933},
			expr: &actionExpr{
				pos: position{line: 329, col: 12, offset: 8946},
				run: (*parser).callonDeBruijn1,
				expr: &seqExpr{
					pos: position{line: 329, col: 12, offset: 8946},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 329, col: 12, offset: 8946},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 329, col: 14, offset: 8948},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&ruleRefExpr{
							pos:  position{line: 329, col: 18, offset: 8952},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 329, col: 20, offset: 8954},
							label: "index",
							expr: &choiceExpr{
								pos: position{line: 317, col: 3, offset: 8492},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 317, col: 3, offset: 8492},
										run: (*parser).callonDeBruijn8,
										expr: &choiceExpr{
											pos: position{line: 317, col: 4, offset: 8493},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 317, col: 4, offset: 8493},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 317, col: 4, offset: 8493},
															val:        "0x",
															ignoreCase: false,
															want:       "\"0x\"",
														},
														&oneOrMoreExpr{
															pos: position{line: 317, col: 9, offset: 8498},
															expr: &choiceExpr{
																pos: position{line: 108, col: 10, offset: 2394},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 106, col: 9, offset: 2376},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&charClassMatcher{
																		pos:        position{line: 108, col: 18, offset: 2402},
																		val:        "[a-f]i",
																		ranges:     []rune{'a', 'f'},
																		ignoreCase: true,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&seqExpr{
													pos: position{line: 317, col: 19, offset: 8508},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 317, col: 19, offset: 8508},
															val:        "[1-9]",
															ranges:     []rune{'1', '9'},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 317, col: 25, offset: 8514},
															expr: &charClassMatcher{
																pos:        position{line: 106, col: 9, offset: 2376},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 322, col: 5, offset: 8650},
										run: (*parser).callonDeBruijn20,
										expr: &seqExpr{
											pos: position{line: 322, col: 5, offset: 8650},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 322, col: 5, offset: 8650},
													val:        "0",
													ignoreCase: false,
													want:       "\"0\"",
												},
												&oneOrMoreExpr{
													pos: position{line: 322, col: 9, offset: 8654},
													expr: &charClassMatcher{
														pos:        position{line: 106, col: 9, offset: 2376},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 323, col: 5, offset: 8739},
										run: (*parser).callonDeBruijn25,
										expr: &litMatcher{
											pos:        position{line: 323, col: 5, offset: 8739},
											val:        "0",
											ignoreCase: false,
											want:       "\"0\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Variable",
			pos:  position{line: 331, col: 1, offset: 9016},
			expr: &actionExpr{
				pos: position{line: 331, col: 12, offset: 9029},
				run: (*parser).callonVariable1,
				expr: &seqExpr{
					pos: position{line: 331, col: 12, offset: 9029},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 331, col: 12, offset: 9029},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 124, col: 20, offset: 2921},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 124, col: 20, offset: 2921},
										run: (*parser).callonVariable5,
										expr: &seqExpr{
											pos: position{line: 124, col: 20, offset: 2921},
											exprs: []interface{}{
												&andExpr{
													pos: position{line: 124, col: 20, offset: 2921},
													expr: &seqExpr{
														pos: position{line: 124, col: 22, offset: 2923},
														exprs: []interface{}{
															&choiceExpr{
																pos: position{line: 223, col: 5, offset: 5717},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 223, col: 5, offset: 5717},
																		run: (*parser).callonVariable10,
																		expr: &litMatcher{
																			pos:        position{line: 223, col: 5, offset: 5717},
																			val:        "Natural/build",
																			ignoreCase: false,
																			want:       "\"Natural/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 224, col: 5, offset: 5766},
																		run: (*parser).callonVariable12,
																		expr: &litMatcher{
																			pos:        position{line: 224, col: 5, offset: 5766},
																			val:        "Natural/fold",
																			ignoreCase: false,
																			want:       "\"Natural/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 225, col: 5, offset: 5813},
																		run: (*parser).callonVariable14,
																		expr: &litMatcher{
																			pos:        position{line: 225, col: 5, offset: 5813},
																			val:        "Natural/isZero",
																			ignoreCase: false,
																			want:       "\"Natural/isZero\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 226, col: 5, offset: 5864},
																		run: (*parser).callonVariable16,
																		expr: &litMatcher{
																			pos:        position{line: 226, col: 5, offset: 5864},
																			val:        "Natural/even",
																			ignoreCase: false,
																			want:       "\"Natural/even\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 227, col: 5, offset: 5911},
																		run: (*parser).callonVariable18,
																		expr: &litMatcher{
																			pos:        position{line: 227, col: 5, offset: 5911},
																			val:        "Natural/odd",
																			ignoreCase: false,
																			want:       "\"Natural/odd\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 228, col: 5, offset: 5956},
																		run: (*parser).callonVariable20,
																		expr: &litMatcher{
																			pos:        position{line: 228, col: 5, offset: 5956},
																			val:        "Natural/toInteger",
																			ignoreCase: false,
																			want:       "\"Natural/toInteger\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 229, col: 5, offset: 6013},
																		run: (*parser).callonVariable22,
																		expr: &litMatcher{
																			pos:        position{line: 229, col: 5, offset: 6013},
																			val:        "Natural/show",
																			ignoreCase: false,
																			want:       "\"Natural/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 230, col: 5, offset: 6060},
																		run: (*parser).callonVariable24,
																		expr: &litMatcher{
																			pos:        position{line: 230, col: 5, offset: 6060},
																			val:        "Natural/subtract",
																			ignoreCase: false,
																			want:       "\"Natural/subtract\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 231, col: 5, offset: 6115},
																		run: (*parser).callonVariable26,
																		expr: &litMatcher{
																			pos:        position{line: 231, col: 5, offset: 6115},
																			val:        "Integer/clamp",
																			ignoreCase: false,
																			want:       "\"Integer/clamp\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 232, col: 5, offset: 6164},
																		run: (*parser).callonVariable28,
																		expr: &litMatcher{
																			pos:        position{line: 232, col: 5, offset: 6164},
																			val:        "Integer/negate",
																			ignoreCase: false,
																			want:       "\"Integer/negate\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 233, col: 5, offset: 6215},
																		run: (*parser).callonVariable30,
																		expr: &litMatcher{
																			pos:        position{line: 233, col: 5, offset: 6215},
																			val:        "Integer/toDouble",
																			ignoreCase: false,
																			want:       "\"Integer/toDouble\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 234, col: 5, offset: 6270},
																		run: (*parser).callonVariable32,
																		expr: &litMatcher{
																			pos:        position{line: 234, col: 5, offset: 6270},
																			val:        "Integer/show",
																			ignoreCase: false,
																			want:       "\"Integer/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 235, col: 5, offset: 6317},
																		run: (*parser).callonVariable34,
																		expr: &litMatcher{
																			pos:        position{line: 235, col: 5, offset: 6317},
																			val:        "Double/show",
																			ignoreCase: false,
																			want:       "\"Double/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 236, col: 5, offset: 6362},
																		run: (*parser).callonVariable36,
																		expr: &litMatcher{
																			pos:        position{line: 236, col: 5, offset: 6362},
																			val:        "List/build",
																			ignoreCase: false,
																			want:       "\"List/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 237, col: 5, offset: 6405},
																		run: (*parser).callonVariable38,
																		expr: &litMatcher{
																			pos:        position{line: 237, col: 5, offset: 6405},
																			val:        "List/fold",
																			ignoreCase: false,
																			want:       "\"List/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 238, col: 5, offset: 6446},
																		run: (*parser).callonVariable40,
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 5, offset: 6446},
																			val:        "List/length",
																			ignoreCase: false,
																			want:       "\"List/length\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 239, col: 5, offset: 6491},
																		run: (*parser).callonVariable42,
																		expr: &litMatcher{
																			pos:        position{line: 239, col: 5, offset: 6491},
																			val:        "List/head",
																			ignoreCase: false,
																			want:       "\"List/head\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 240, col: 5, offset: 6532},
																		run: (*parser).callonVariable44,
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 5, offset: 6532},
																			val:        "List/last",
																			ignoreCase: false,
																			want:       "\"List/last\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 241, col: 5, offset: 6573},
																		run: (*parser).callonVariable46,
																		expr: &litMatcher{
																			pos:        position{line: 241, col: 5, offset: 6573},
																			val:        "List/indexed",
																			ignoreCase: false,
																			want:       "\"List/indexed\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 242, col: 5, offset: 6620},
																		run: (*parser).callonVariable48,
																		expr: &litMatcher{
																			pos:        position{line: 242, col: 5, offset: 6620},
																			val:        "List/reverse",
																			ignoreCase: false,
																			want:       "\"List/reverse\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 243, col: 5, offset: 6667},
																		run: (*parser).callonVariable50,
																		expr: &litMatcher{
																			pos:        position{line: 243, col: 5, offset: 6667},
																			val:        "Optional/build",
																			ignoreCase: false,
																			want:       "\"Optional/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 244, col: 5, offset: 6718},
																		run: (*parser).callonVariable52,
																		expr: &litMatcher{
																			pos:        position{line: 244, col: 5, offset: 6718},
																			val:        "Optional/fold",
																			ignoreCase: false,
																			want:       "\"Optional/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 245, col: 5, offset: 6767},
																		run: (*parser).callonVariable54,
																		expr: &litMatcher{
																			pos:        position{line: 245, col: 5, offset: 6767},
																			val:        "Text/show",
																			ignoreCase: false,
																			want:       "\"Text/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 246, col: 5, offset: 6808},
																		run: (*parser).callonVariable56,
																		expr: &litMatcher{
																			pos:        position{line: 246, col: 5, offset: 6808},
																			val:        "Bool",
																			ignoreCase: false,
																			want:       "\"Bool\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 247, col: 5, offset: 6840},
																		run: (*parser).callonVariable58,
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 5, offset: 6840},
																			val:        "True",
																			ignoreCase: false,
																			want:       "\"True\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 248, col: 5, offset: 6872},
																		run: (*parser).callonVariable60,
																		expr: &litMatcher{
																			pos:        position{line: 248, col: 5, offset: 6872},
																			val:        "False",
																			ignoreCase: false,
																			want:       "\"False\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 249, col: 5, offset: 6906},
																		run: (*parser).callonVariable62,
																		expr: &litMatcher{
																			pos:        position{line: 249, col: 5, offset: 6906},
																			val:        "Optional",
																			ignoreCase: false,
																			want:       "\"Optional\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 250, col: 5, offset: 6946},
																		run: (*parser).callonVariable64,
																		expr: &litMatcher{
																			pos:        position{line: 250, col: 5, offset: 6946},
																			val:        "Natural",
																			ignoreCase: false,
																			want:       "\"Natural\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 251, col: 5, offset: 6984},
																		run: (*parser).callonVariable66,
																		expr: &litMatcher{
																			pos:        position{line: 251, col: 5, offset: 6984},
																			val:        "Integer",
																			ignoreCase: false,
																			want:       "\"Integer\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 252, col: 5, offset: 7022},
																		run: (*parser).callonVariable68,
																		expr: &litMatcher{
																			pos:        position{line: 252, col: 5, offset: 7022},
																			val:        "Double",
																			ignoreCase: false,
																			want:       "\"Double\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 253, col: 5, offset: 7058},
																		run: (*parser).callonVariable70,
																		expr: &litMatcher{
																			pos:        position{line: 253, col: 5, offset: 7058},
																			val:        "Text",
																			ignoreCase: false,
																			want:       "\"Text\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 254, col: 5, offset: 7090},
																		run: (*parser).callonVariable72,
																		expr: &litMatcher{
																			pos:        position{line: 254, col: 5, offset: 7090},
																			val:        "List",
																			ignoreCase: false,
																			want:       "\"List\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 255, col: 5, offset: 7122},
																		run: (*parser).callonVariable74,
																		expr: &litMatcher{
																			pos:        position{line: 255, col: 5, offset: 7122},
																			val:        "None",
																			ignoreCase: false,
																			want:       "\"None\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 256, col: 5, offset: 7154},
																		run: (*parser).callonVariable76,
																		expr: &litMatcher{
																			pos:        position{line: 256, col: 5, offset: 7154},
																			val:        "Type",
																			ignoreCase: false,
																			want:       "\"Type\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 257, col: 5, offset: 7186},
																		run: (*parser).callonVariable78,
																		expr: &litMatcher{
																			pos:        position{line: 257, col: 5, offset: 7186},
																			val:        "Kind",
																			ignoreCase: false,
																			want:       "\"Kind\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 258, col: 5, offset: 7218},
																		run: (*parser).callonVariable80,
																		expr: &litMatcher{
																			pos:        position{line: 258, col: 5, offset: 7218},
																			val:        "Sort",
																			ignoreCase: false,
																			want:       "\"Sort\"",
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 111, col: 23, offset: 2469},
																val:        "[_/-A-Za-z0-9]",
																chars:      []rune{'_', '/', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 124, col: 52, offset: 2953},
													label: "label",
													expr: &choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonVariable85,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonVariable89,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonVariable93,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonVariable96,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 278, col: 5, offset: 7577},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7254},
																									val:        "if",
																									ignoreCase: false,
																									want:       "\"if\"",
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 8, offset: 7268},
																									val:        "then",
																									ignoreCase: false,
																									want:       "\"then\"",
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 8, offset: 7284},
																									val:        "else",
																									ignoreCase: false,
																									want:       "\"else\"",
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 7, offset: 7299},
																									val:        "let",
																									ignoreCase: false,
																									want:       "\"let\"",
																								},
																								&litMatcher{
																									pos:        position{line: 264, col: 6, offset: 7312},
																									val:        "in",
																									ignoreCase: false,
																									want:       "\"in\"",
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7339},
																									val:        "using",
																									ignoreCase: false,
																									want:       "\"using\"",
																								},
																								&actionExpr{
																									pos: position{line: 268, col: 11, offset: 7377},
																									run: (*parser).callonVariable105,
																									expr: &seqExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 268, col: 11, offset: 7377},
																												val:        "missing",
																												ignoreCase: false,
																												want:       "\"missing\"",
																											},
																											&notExpr{
																												pos: position{line: 268, col: 21, offset: 7387},
																												expr: &charClassMatcher{
																													pos:        position{line: 111, col: 23, offset: 2469},
																													val:        "[_/-A-Za-z0-9]",
																													chars:      []rune{'_', '/', '-'},
																													ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 275, col: 10, offset: 7551},
																									val:        "assert",
																									ignoreCase: false,
																									want:       "\"assert\"",
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 6, offset: 7324},
																									val:        "as",
																									ignoreCase: false,
																									want:       "\"as\"",
																								},
																								&litMatcher{
																									pos:        position{line: 271, col: 12, offset: 7481},
																									val:        "Infinity",
																									ignoreCase: false,
																									want:       "\"Infinity\"",
																								},
																								&litMatcher{
																									pos:        position{line: 272, col: 7, offset: 7500},
																									val:        "NaN",
																									ignoreCase: false,
																									want:       "\"NaN\"",
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 9, offset: 7357},
																									val:        "merge",
																									ignoreCase: false,
																									want:       "\"merge\"",
																								},
																								&litMatcher{
																									pos:        position{line: 273, col: 8, offset: 7515},
																									val:        "Some",
																									ignoreCase: false,
																									want:       "\"Some\"",
																								},
																								&litMatcher{
																									pos:        position{line: 274, col: 9, offset: 7532},
																									val:        "toMap",
																									ignoreCase: false,
																									want:       "\"toMap\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 10, offset: 7927},
																									val:        "forall",
																									ignoreCase: false,
																									want:       "\"forall\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 21, offset: 7938},
																									val:        "‚àÄ",
																									ignoreCase: false,
																									want:       "\"‚àÄ\"",
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonVariable121,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 278, col: 5, offset: 7577},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7254},
																										val:        "if",
																										ignoreCase: false,
																										want:       "\"if\"",
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 8, offset: 7268},
																										val:        "then",
																										ignoreCase: false,
																										want:       "\"then\"",
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 8, offset: 7284},
																										val:        "else",
																										ignoreCase: false,
																										want:       "\"else\"",
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 7, offset: 7299},
																										val:        "let",
																										ignoreCase: false,
																										want:       "\"let\"",
																									},
																									&litMatcher{
																										pos:        position{line: 264, col: 6, offset: 7312},
																										val:        "in",
																										ignoreCase: false,
																										want:       "\"in\"",
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7339},
																										val:        "using",
																										ignoreCase: false,
																										want:       "\"using\"",
																									},
																									&actionExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										run: (*parser).callonVariable131,
																										expr: &seqExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 268, col: 11, offset: 7377},
																													val:        "missing",
																													ignoreCase: false,
																													want:       "\"missing\"",
																												},
																												&notExpr{
																													pos: position{line: 268, col: 21, offset: 7387},
																													expr: &charClassMatcher{
																														pos:        position{line: 111, col: 23, offset: 2469},
																														val:        "[_/-A-Za-z0-9]",
																														chars:      []rune{'_', '/', '-'},
																														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 275, col: 10, offset: 7551},
																										val:        "assert",
																										ignoreCase: false,
																										want:       "\"assert\"",
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 6, offset: 7324},
																										val:        "as",
																										ignoreCase: false,
																										want:       "\"as\"",
																									},
																									&litMatcher{
																										pos:        position{line: 271, col: 12, offset: 7481},
																										val:        "Infinity",
																										ignoreCase: false,
																										want:       "\"Infinity\"",
																									},
																									&litMatcher{
																										pos:        position{line: 272, col: 7, offset: 7500},
																										val:        "NaN",
																										ignoreCase: false,
																										want:       "\"NaN\"",
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 9, offset: 7357},
																										val:        "merge",
																										ignoreCase: false,
																										want:       "\"merge\"",
																									},
																									&litMatcher{
																										pos:        position{line: 273, col: 8, offset: 7515},
																										val:        "Some",
																										ignoreCase: false,
																										want:       "\"Some\"",
																									},
																									&litMatcher{
																										pos:        position{line: 274, col: 9, offset: 7532},
																										val:        "toMap",
																										ignoreCase: false,
																										want:       "\"toMap\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 10, offset: 7927},
																										val:        "forall",
																										ignoreCase: false,
																										want:       "\"forall\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 21, offset: 7938},
																										val:        "‚àÄ",
																										ignoreCase: false,
																										want:       "\"‚àÄ\"",
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 125, col: 19, offset: 3005},
										run: (*parser).callonVariable148,
										expr: &seqExpr{
											pos: position{line: 125, col: 19, offset: 3005},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 125, col: 19, offset: 3005},
													expr: &choiceExpr{
														pos: position{line: 223, col: 5, offset: 5717},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 223, col: 5, offset: 5717},
																run: (*parser).callonVariable152,
																expr: &litMatcher{
																	pos:        position{line: 223, col: 5, offset: 5717},
																	val:        "Natural/build",
																	ignoreCase: false,
																	want:       "\"Natural/build\"",
																},
															},
															&actionExpr{
																pos: position{line: 224, col: 5, offset: 5766},
																run: (*parser).callonVariable154,
																expr: &litMatcher{
																	pos:        position{line: 224, col: 5, offset: 5766},
																	val:        "Natural/fold",
																	ignoreCase: false,
																	want:       "\"Natural/fold\"",
																},
															},
															&actionExpr{
																pos: position{line: 225, col: 5, offset: 5813},
																run: (*parser).callonVariable156,
																expr: &litMatcher{
																	pos:        position{line: 225, col: 5, offset: 5813},
																	val:        "Natural/isZero",
																	ignoreCase: false,
																	want:       "\"Natural/isZero\"",
																},
															},
															&actionExpr{
																pos: position{line: 226, col: 5, offset: 5864},
																run: (*parser).callonVariable158,
																expr: &litMatcher{
																	pos:        position{line: 226, col: 5, offset: 5864},
																	val:        "Natural/even",
																	ignoreCase: false,
																	want:       "\"Natural/even\"",
																},
															},
															&actionExpr{
																pos: position{line: 227, col: 5, offset: 5911},
																run: (*parser).callonVariable160,
																expr: &litMatcher{
																	pos:        position{line: 227, col: 5, offset: 5911},
																	val:        "Natural/odd",
																	ignoreCase: false,
																	want:       "\"Natural/odd\"",
																},
															},
															&actionExpr{
																pos: position{line: 228, col: 5, offset: 5956},
																run: (*parser).callonVariable162,
																expr: &litMatcher{
																	pos:        position{line: 228, col: 5, offset: 5956},
																	val:        "Natural/toInteger",
																	ignoreCase: false,
																	want:       "\"Natural/toInteger\"",
																},
															},
															&actionExpr{
																pos: position{line: 229, col: 5, offset: 6013},
																run: (*parser).callonVariable164,
																expr: &litMatcher{
																	pos:        position{line: 229, col: 5, offset: 6013},
																	val:        "Natural/show",
																	ignoreCase: false,
																	want:       "\"Natural/show\"",
																},
															},
															&actionExpr{
																pos: position{line: 230, col: 5, offset: 6060},
																run: (*parser).callonVariable166,
																expr: &litMatcher{
																	pos:        position{line: 230, col: 5, offset: 6060},
																	val:        "Natural/subtract",
																	ignoreCase: false,
																	want:       "\"Natural/subtract\"",
																},
															},
															&actionExpr{
																pos: position{line: 231, col: 5, offset: 6115},
																run: (*parser).callonVariable168,
																expr: &litMatcher{
																	pos:        position{line: 231, col: 5, offset: 6115},
																	val:        "Integer/clamp",
																	ignoreCase: false,
																	want:       "\"Integer/clamp\"",
																},
															},
															&actionExpr{
																pos: position{line: 232, col: 5, offset: 6164},
																run: (*parser).callonVariable170,
																expr: &litMatcher{
																	pos:        position{line: 232, col: 5, offset: 6164},
																	val:        "Integer/negate",
																	ignoreCase: false,
																	want:       "\"Integer/negate\"",
																},
															},
															&actionExpr{
																pos: position{line: 233, col: 5, offset: 6215},
																run: (*parser).callonVariable172,
																expr: &litMatcher{
																	pos:        position{line: 233, col: 5, offset: 6215},
																	val:        "Integer/toDouble",
																	ignoreCase: false,
																	want:       "\"Integer/toDouble\"",
																},
															},
															&actionExpr{
																pos: position{line: 234, col: 5, offset: 6270},
																run: (*parser).callonVariable174,
																expr: &litMatcher{
																	pos:        position{line: 234, col: 5, offset: 6270},
																	val:        "Integer/show",
																	ignoreCase: false,
																	want:       "\"Integer/show\"",
																},
															},
															&actionExpr{
																pos: position{line: 235, col: 5, offset: 6317},
																run: (*parser).callonVariable176,
																expr: &litMatcher{
																	pos:        position{line: 235, col: 5, offset: 6317},
																	val:        "Double/show",
																	ignoreCase: false,
																	want:       "\"Double/show\"",
																},
															},
															&actionExpr{
																pos: position{line: 236, col: 5, offset: 6362},
																run: (*parser).callonVariable178,
																expr: &litMatcher{
																	pos:        position{line: 236, col: 5, offset: 6362},
																	val:        "List/build",
																	ignoreCase: false,
																	want:       "\"List/build\"",
																},
															},
															&actionExpr{
																pos: position{line: 237, col: 5, offset: 6405},
																run: (*parser).callonVariable180,
																expr: &litMatcher{
																	pos:        position{line: 237, col: 5, offset: 6405},
																	val:        "List/fold",
																	ignoreCase: false,
																	want:       "\"List/fold\"",
																},
															},
															&actionExpr{
																pos: position{line: 238, col: 5, offset: 6446},
																run: (*parser).callonVariable182,
																expr: &litMatcher{
																	pos:        position{line: 238, col: 5, offset: 6446},
																	val:        "List/length",
																	ignoreCase: false,
																	want:       "\"List/length\"",
																},
															},
															&actionExpr{
																pos: position{line: 239, col: 5, offset: 6491},
																run: (*parser).callonVariable184,
																expr: &litMatcher{
																	pos:        position{line: 239, col: 5, offset: 6491},
																	val:        "List/head",
																	ignoreCase: false,
																	want:       "\"List/head\"",
																},
															},
															&actionExpr{
																pos: position{line: 240, col: 5, offset: 6532},
																run: (*parser).callonVariable186,
																expr: &litMatcher{
																	pos:        position{line: 240, col: 5, offset: 6532},
																	val:        "List/last",
																	ignoreCase: false,
																	want:       "\"List/last\"",
																},
															},
															&actionExpr{
																pos: position{line: 241, col: 5, offset: 6573},
																run: (*parser).callonVariable188,
																expr: &litMatcher{
																	pos:        position{line: 241, col: 5, offset: 6573},
																	val:        "List/indexed",
																	ignoreCase: false,
																	want:       "\"List/indexed\"",
																},
															},
															&actionExpr{
																pos: position{line: 242, col: 5, offset: 6620},
																run: (*parser).callonVariable190,
																expr: &litMatcher{
																	pos:        position{line: 242, col: 5, offset: 6620},
																	val:        "List/reverse",
																	ignoreCase: false,
																	want:       "\"List/reverse\"",
																},
															},
															&actionExpr{
																pos: position{line: 243, col: 5, offset: 6667},
																run: (*parser).callonVariable192,
																expr: &litMatcher{
																	pos:        position{line: 243, col: 5, offset: 6667},
																	val:        "Optional/build",
																	ignoreCase: false,
																	want:       "\"Optional/build\"",
																},
															},
															&actionExpr{
																pos: position{line: 244, col: 5, offset: 6718},
																run: (*parser).callonVariable194,
																expr: &litMatcher{
																	pos:        position{line: 244, col: 5, offset: 6718},
																	val:        "Optional/fold",
																	ignoreCase: false,
																	want:       "\"Optional/fold\"",
																},
															},
															&actionExpr{
																pos: position{line: 245, col: 5, offset: 6767},
																run: (*parser).callonVariable196,
																expr: &litMatcher{
																	pos:        position{line: 245, col: 5, offset: 6767},
																	val:        "Text/show",
																	ignoreCase: false,
																	want:       "\"Text/show\"",
																},
															},
															&actionExpr{
																pos: position{line: 246, col: 5, offset: 6808},
																run: (*parser).callonVariable198,
																expr: &litMatcher{
																	pos:        position{line: 246, col: 5, offset: 6808},
																	val:        "Bool",
																	ignoreCase: false,
																	want:       "\"Bool\"",
																},
															},
															&actionExpr{
																pos: position{line: 247, col: 5, offset: 6840},
																run: (*parser).callonVariable200,
																expr: &litMatcher{
																	pos:        position{line: 247, col: 5, offset: 6840},
																	val:        "True",
																	ignoreCase: false,
																	want:       "\"True\"",
																},
															},
															&actionExpr{
																pos: position{line: 248, col: 5, offset: 6872},
																run: (*parser).callonVariable202,
																expr: &litMatcher{
																	pos:        position{line: 248, col: 5, offset: 6872},
																	val:        "False",
																	ignoreCase: false,
																	want:       "\"False\"",
																},
															},
															&actionExpr{
																pos: position{line: 249, col: 5, offset: 6906},
																run: (*parser).callonVariable204,
																expr: &litMatcher{
																	pos:        position{line: 249, col: 5, offset: 6906},
																	val:        "Optional",
																	ignoreCase: false,
																	want:       "\"Optional\"",
																},
															},
															&actionExpr{
																pos: position{line: 250, col: 5, offset: 6946},
																run: (*parser).callonVariable206,
																expr: &litMatcher{
																	pos:        position{line: 250, col: 5, offset: 6946},
																	val:        "Natural",
																	ignoreCase: false,
																	want:       "\"Natural\"",
																},
															},
															&actionExpr{
																pos: position{line: 251, col: 5, offset: 6984},
																run: (*parser).callonVariable208,
																expr: &litMatcher{
																	pos:        position{line: 251, col: 5, offset: 6984},
																	val:        "Integer",
																	ignoreCase: false,
																	want:       "\"Integer\"",
																},
															},
															&actionExpr{
																pos: position{line: 252, col: 5, offset: 7022},
																run: (*parser).callonVariable210,
																expr: &litMatcher{
																	pos:        position{line: 252, col: 5, offset: 7022},
																	val:        "Double",
																	ignoreCase: false,
																	want:       "\"Double\"",
																},
															},
															&actionExpr{
																pos: position{line: 253, col: 5, offset: 7058},
																run: (*parser).callonVariable212,
																expr: &litMatcher{
																	pos:        position{line: 253, col: 5, offset: 7058},
																	val:        "Text",
																	ignoreCase: false,
																	want:       "\"Text\"",
																},
															},
															&actionExpr{
																pos: position{line: 254, col: 5, offset: 7090},
																run: (*parser).callonVariable214,
																expr: &litMatcher{
																	pos:        position{line: 254, col: 5, offset: 7090},
																	val:        "List",
																	ignoreCase: false,
																	want:       "\"List\"",
																},
															},
															&actionExpr{
																pos: position{line: 255, col: 5, offset: 7122},
																run: (*parser).callonVariable216,
																expr: &litMatcher{
																	pos:        position{line: 255, col: 5, offset: 7122},
																	val:        "None",
																	ignoreCase: false,
																	want:       "\"None\"",
																},
															},
															&actionExpr{
																pos: position{line: 256, col: 5, offset: 7154},
																run: (*parser).callonVariable218,
																expr: &litMatcher{
																	pos:        position{line: 256, col: 5, offset: 7154},
																	val:        "Type",
																	ignoreCase: false,
																	want:       "\"Type\"",
																},
															},
															&actionExpr{
																pos: position{line: 257, col: 5, offset: 7186},
																run: (*parser).callonVariable220,
																expr: &litMatcher{
																	pos:        position{line: 257, col: 5, offset: 7186},
																	val:        "Kind",
																	ignoreCase: false,
																	want:       "\"Kind\"",
																},
															},
															&actionExpr{
																pos: position{line: 258, col: 5, offset: 7218},
																run: (*parser).callonVariable222,
																expr: &litMatcher{
																	pos:        position{line: 258, col: 5, offset: 7218},
																	val:        "Sort",
																	ignoreCase: false,
																	want:       "\"Sort\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 125, col: 29, offset: 3015},
													label: "label",
													expr: &choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonVariable226,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonVariable230,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonVariable234,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonVariable237,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 278, col: 5, offset: 7577},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7254},
																									val:        "if",
																									ignoreCase: false,
																									want:       "\"if\"",
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 8, offset: 7268},
																									val:        "then",
																									ignoreCase: false,
																									want:       "\"then\"",
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 8, offset: 7284},
																									val:        "else",
																									ignoreCase: false,
																									want:       "\"else\"",
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 7, offset: 7299},
																									val:        "let",
																									ignoreCase: false,
																									want:       "\"let\"",
																								},
																								&litMatcher{
																									pos:        position{line: 264, col: 6, offset: 7312},
																									val:        "in",
																									ignoreCase: false,
																									want:       "\"in\"",
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7339},
																									val:        "using",
																									ignoreCase: false,
																									want:       "\"using\"",
																								},
																								&actionExpr{
																									pos: position{line: 268, col: 11, offset: 7377},
																									run: (*parser).callonVariable246,
																									expr: &seqExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 268, col: 11, offset: 7377},
																												val:        "missing",
																												ignoreCase: false,
																												want:       "\"missing\"",
																											},
																											&notExpr{
																												pos: position{line: 268, col: 21, offset: 7387},
																												expr: &charClassMatcher{
																													pos:        position{line: 111, col: 23, offset: 2469},
																													val:        "[_/-A-Za-z0-9]",
																													chars:      []rune{'_', '/', '-'},
																													ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 275, col: 10, offset: 7551},
																									val:        "assert",
																									ignoreCase: false,
																									want:       "\"assert\"",
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 6, offset: 7324},
																									val:        "as",
																									ignoreCase: false,
																									want:       "\"as\"",
																								},
																								&litMatcher{
																									pos:        position{line: 271, col: 12, offset: 7481},
																									val:        "Infinity",
																									ignoreCase: false,
																									want:       "\"Infinity\"",
																								},
																								&litMatcher{
																									pos:        position{line: 272, col: 7, offset: 7500},
																									val:        "NaN",
																									ignoreCase: false,
																									want:       "\"NaN\"",
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 9, offset: 7357},
																									val:        "merge",
																									ignoreCase: false,
																									want:       "\"merge\"",
																								},
																								&litMatcher{
																									pos:        position{line: 273, col: 8, offset: 7515},
																									val:        "Some",
																									ignoreCase: false,
																									want:       "\"Some\"",
																								},
																								&litMatcher{
																									pos:        position{line: 274, col: 9, offset: 7532},
																									val:        "toMap",
																									ignoreCase: false,
																									want:       "\"toMap\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 10, offset: 7927},
																									val:        "forall",
																									ignoreCase: false,
																									want:       "\"forall\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 21, offset: 7938},
																									val:        "‚àÄ",
																									ignoreCase: false,
																									want:       "\"‚àÄ\"",
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonVariable262,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 278, col: 5, offset: 7577},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7254},
																										val:        "if",
																										ignoreCase: false,
																										want:       "\"if\"",
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 8, offset: 7268},
																										val:        "then",
																										ignoreCase: false,
																										want:       "\"then\"",
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 8, offset: 7284},
																										val:        "else",
																										ignoreCase: false,
																										want:       "\"else\"",
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 7, offset: 7299},
																										val:        "let",
																										ignoreCase: false,
																										want:       "\"let\"",
																									},
																									&litMatcher{
																										pos:        position{line: 264, col: 6, offset: 7312},
																										val:        "in",
																										ignoreCase: false,
																										want:       "\"in\"",
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7339},
																										val:        "using",
																										ignoreCase: false,
																										want:       "\"using\"",
																									},
																									&actionExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										run: (*parser).callonVariable272,
																										expr: &seqExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 268, col: 11, offset: 7377},
																													val:        "missing",
																													ignoreCase: false,
																													want:       "\"missing\"",
																												},
																												&notExpr{
																													pos: position{line: 268, col: 21, offset: 7387},
																													expr: &charClassMatcher{
																														pos:        position{line: 111, col: 23, offset: 2469},
																														val:        "[_/-A-Za-z0-9]",
																														chars:      []rune{'_', '/', '-'},
																														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 275, col: 10, offset: 7551},
																										val:        "assert",
																										ignoreCase: false,
																										want:       "\"assert\"",
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 6, offset: 7324},
																										val:        "as",
																										ignoreCase: false,
																										want:       "\"as\"",
																									},
																									&litMatcher{
																										pos:        position{line: 271, col: 12, offset: 7481},
																										val:        "Infinity",
																										ignoreCase: false,
																										want:       "\"Infinity\"",
																									},
																									&litMatcher{
																										pos:        position{line: 272, col: 7, offset: 7500},
																										val:        "NaN",
																										ignoreCase: false,
																										want:       "\"NaN\"",
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 9, offset: 7357},
																										val:        "merge",
																										ignoreCase: false,
																										want:       "\"merge\"",
																									},
																									&litMatcher{
																										pos:        position{line: 273, col: 8, offset: 7515},
																										val:        "Some",
																										ignoreCase: false,
																										want:       "\"Some\"",
																									},
																									&litMatcher{
																										pos:        position{line: 274, col: 9, offset: 7532},
																										val:        "toMap",
																										ignoreCase: false,
																										want:       "\"toMap\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 10, offset: 7927},
																										val:        "forall",
																										ignoreCase: false,
																										want:       "\"forall\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 21, offset: 7938},
																										val:        "‚àÄ",
																										ignoreCase: false,
																										want:       "\"‚àÄ\"",
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 331, col: 34, offset: 9051},
							label: "index",
							expr: &zeroOrOneExpr{
								pos: position{line: 331, col: 40, offset: 9057},
								expr: &ruleRefExpr{
									pos:  position{line: 331, col: 40, offset: 9057},
									name: "DeBruijn",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 339, col: 1, offset: 9220},
			expr: &choiceExpr{
				pos: position{line: 339, col: 14, offset: 9235},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 339, col: 14, offset: 9235},
						name: "Variable",
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 5717},
						run: (*parser).callonIdentifier3,
						expr: &litMatcher{
							pos:        position{line: 223, col: 5, offset: 5717},
							val:        "Natural/build",
							ignoreCase: false,
							want:       "\"Natural/build\"",
						},
					},
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 5766},
						run: (*parser).callonIdentifier5,
						expr: &litMatcher{
							pos:        position{line: 224, col: 5, offset: 5766},
							val:        "Natural/fold",
							ignoreCase: false,
							want:       "\"Natural/fold\"",
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 5813},
						run: (*parser).callonIdentifier7,
						expr: &litMatcher{
							pos:        position{line: 225, col: 5, offset: 5813},
							val:        "Natural/isZero",
							ignoreCase: false,
							want:       "\"Natural/isZero\"",
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 5864},
						run: (*parser).callonIdentifier9,
						expr: &litMatcher{
							pos:        position{line: 226, col: 5, offset: 5864},
							val:        "Natural/even",
							ignoreCase: false,
							want:       "\"Natural/even\"",
						},
					},
					&actionExpr{
						pos: position{line: 227, col: 5, offset: 5911},
						run: (*parser).callonIdentifier11,
						expr: &litMatcher{
							pos:        position{line: 227, col: 5, offset: 5911},
							val:        "Natural/odd",
							ignoreCase: false,
							want:       "\"Natural/odd\"",
						},
					},
					&actionExpr{
						pos: position{line: 228, col: 5, offset: 5956},
						run: (*parser).callonIdentifier13,
						expr: &litMatcher{
							pos:        position{line: 228, col: 5, offset: 5956},
							val:        "Natural/toInteger",
							ignoreCase: false,
							want:       "\"Natural/toInteger\"",
						},
					},
					&actionExpr{
						pos: position{line: 229, col: 5, offset: 6013},
						run: (*parser).callonIdentifier15,
						expr: &litMatcher{
							pos:        position{line: 229, col: 5, offset: 6013},
							val:        "Natural/show",
							ignoreCase: false,
							want:       "\"Natural/show\"",
						},
					},
					&actionExpr{
						pos: position{line: 230, col: 5, offset: 6060},
						run: (*parser).callonIdentifier17,
						expr: &litMatcher{
							pos:        position{line: 230, col: 5, offset: 6060},
							val:        "Natural/subtract",
							ignoreCase: false,
							want:       "\"Natural/subtract\"",
						},
					},
					&actionExpr{
						pos: position{line: 231, col: 5, offset: 6115},
						run: (*parser).callonIdentifier19,
						expr: &litMatcher{
							pos:        position{line: 231, col: 5, offset: 6115},
							val:        "Integer/clamp",
							ignoreCase: false,
							want:       "\"Integer/clamp\"",
						},
					},
					&actionExpr{
						pos: position{line: 232, col: 5, offset: 6164},
						run: (*parser).callonIdentifier21,
						expr: &litMatcher{
							pos:        position{line: 232, col: 5, offset: 6164},
							val:        "Integer/negate",
							ignoreCase: false,
							want:       "\"Integer/negate\"",
						},
					},
					&actionExpr{
						pos: position{line: 233, col: 5, offset: 6215},
						run: (*parser).callonIdentifier23,
						expr: &litMatcher{
							pos:        position{line: 233, col: 5, offset: 6215},
							val:        "Integer/toDouble",
							ignoreCase: false,
							want:       "\"Integer/toDouble\"",
						},
					},
					&actionExpr{
						pos: position{line: 234, col: 5, offset: 6270},
						run: (*parser).callonIdentifier25,
						expr: &litMatcher{
							pos:        position{line: 234, col: 5, offset: 6270},
							val:        "Integer/show",
							ignoreCase: false,
							want:       "\"Integer/show\"",
						},
					},
					&actionExpr{
						pos: position{line: 235, col: 5, offset: 6317},
						run: (*parser).callonIdentifier27,
						expr: &litMatcher{
							pos:        position{line: 235, col: 5, offset: 6317},
							val:        "Double/show",
							ignoreCase: false,
							want:       "\"Double/show\"",
						},
					},
					&actionExpr{
						pos: position{line: 236, col: 5, offset: 6362},
						run: (*parser).callonIdentifier29,
						expr: &litMatcher{
							pos:        position{line: 236, col: 5, offset: 6362},
							val:        "List/build",
							ignoreCase: false,
							want:       "\"List/build\"",
						},
					},
					&actionExpr{
						pos: position{line: 237, col: 5, offset: 6405},
						run: (*parser).callonIdentifier31,
						expr: &litMatcher{
							pos:        position{line: 237, col: 5, offset: 6405},
							val:        "List/fold",
							ignoreCase: false,
							want:       "\"List/fold\"",
						},
					},
					&actionExpr{
						pos: position{line: 238, col: 5, offset: 6446},
						run: (*parser).callonIdentifier33,
						expr: &litMatcher{
							pos:        position{line: 238, col: 5, offset: 6446},
							val:        "List/length",
							ignoreCase: false,
							want:       "\"List/length\"",
						},
					},
					&actionExpr{
						pos: position{line: 239, col: 5, offset: 6491},
						run: (*parser).callonIdentifier35,
						expr: &litMatcher{
							pos:        position{line: 239, col: 5, offset: 6491},
							val:        "List/head",
							ignoreCase: false,
							want:       "\"List/head\"",
						},
					},
					&actionExpr{
						pos: position{line: 240, col: 5, offset: 6532},
						run: (*parser).callonIdentifier37,
						expr: &litMatcher{
							pos:        position{line: 240, col: 5, offset: 6532},
							val:        "List/last",
							ignoreCase: false,
							want:       "\"List/last\"",
						},
					},
					&actionExpr{
						pos: position{line: 241, col: 5, offset: 6573},
						run: (*parser).callonIdentifier39,
						expr: &litMatcher{
							pos:        position{line: 241, col: 5, offset: 6573},
							val:        "List/indexed",
							ignoreCase: false,
							want:       "\"List/indexed\"",
						},
					},
					&actionExpr{
						pos: position{line: 242, col: 5, offset: 6620},
						run: (*parser).callonIdentifier41,
						expr: &litMatcher{
							pos:        position{line: 242, col: 5, offset: 6620},
							val:        "List/reverse",
							ignoreCase: false,
							want:       "\"List/reverse\"",
						},
					},
					&actionExpr{
						pos: position{line: 243, col: 5, offset: 6667},
						run: (*parser).callonIdentifier43,
						expr: &litMatcher{
							pos:        position{line: 243, col: 5, offset: 6667},
							val:        "Optional/build",
							ignoreCase: false,
							want:       "\"Optional/build\"",
						},
					},
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 6718},
						run: (*parser).callonIdentifier45,
						expr: &litMatcher{
							pos:        position{line: 244, col: 5, offset: 6718},
							val:        "Optional/fold",
							ignoreCase: false,
							want:       "\"Optional/fold\"",
						},
					},
					&actionExpr{
						pos: position{line: 245, col: 5, offset: 6767},
						run: (*parser).callonIdentifier47,
						expr: &litMatcher{
							pos:        position{line: 245, col: 5, offset: 6767},
							val:        "Text/show",
							ignoreCase: false,
							want:       "\"Text/show\"",
						},
					},
					&actionExpr{
						pos: position{line: 246, col: 5, offset: 6808},
						run: (*parser).callonIdentifier49,
						expr: &litMatcher{
							pos:        position{line: 246, col: 5, offset: 6808},
							val:        "Bool",
							ignoreCase: false,
							want:       "\"Bool\"",
						},
					},
					&actionExpr{
						pos: position{line: 247, col: 5, offset: 6840},
						run: (*parser).callonIdentifier51,
						expr: &litMatcher{
							pos:        position{line: 247, col: 5, offset: 6840},
							val:        "True",
							ignoreCase: false,
							want:       "\"True\"",
						},
					},
					&actionExpr{
						pos: position{line: 248, col: 5, offset: 6872},
						run: (*parser).callonIdentifier53,
						expr: &litMatcher{
							pos:        position{line: 248, col: 5, offset: 6872},
							val:        "False",
							ignoreCase: false,
							want:       "\"False\"",
						},
					},
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 6906},
						run: (*parser).callonIdentifier55,
						expr: &litMatcher{
							pos:        position{line: 249, col: 5, offset: 6906},
							val:        "Optional",
							ignoreCase: false,
							want:       "\"Optional\"",
						},
					},
					&actionExpr{
						pos: position{line: 250, col: 5, offset: 6946},
						run: (*parser).callonIdentifier57,
						expr: &litMatcher{
							pos:        position{line: 250, col: 5, offset: 6946},
							val:        "Natural",
							ignoreCase: false,
							want:       "\"Natural\"",
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 5, offset: 6984},
						run: (*parser).callonIdentifier59,
						expr: &litMatcher{
							pos:        position{line: 251, col: 5, offset: 6984},
							val:        "Integer",
							ignoreCase: false,
							want:       "\"Integer\"",
						},
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 7022},
						run: (*parser).callonIdentifier61,
						expr: &litMatcher{
							pos:        position{line: 252, col: 5, offset: 7022},
							val:        "Double",
							ignoreCase: false,
							want:       "\"Double\"",
						},
					},
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 7058},
						run: (*parser).callonIdentifier63,
						expr: &litMatcher{
							pos:        position{line: 253, col: 5, offset: 7058},
							val:        "Text",
							ignoreCase: false,
							want:       "\"Text\"",
						},
					},
					&actionExpr{
						pos: position{line: 254, col: 5, offset: 7090},
						run: (*parser).callonIdentifier65,
						expr: &litMatcher{
							pos:        position{line: 254, col: 5, offset: 7090},
							val:        "List",
							ignoreCase: false,
							want:       "\"List\"",
						},
					},
					&actionExpr{
						pos: position{line: 255, col: 5, offset: 7122},
						run: (*parser).callonIdentifier67,
						expr: &litMatcher{
							pos:        position{line: 255, col: 5, offset: 7122},
							val:        "None",
							ignoreCase: false,
							want:       "\"None\"",
						},
					},
					&actionExpr{
						pos: position{line: 256, col: 5, offset: 7154},
						run: (*parser).callonIdentifier69,
						expr: &litMatcher{
							pos:        position{line: 256, col: 5, offset: 7154},
							val:        "Type",
							ignoreCase: false,
							want:       "\"Type\"",
						},
					},
					&actionExpr{
						pos: position{line: 257, col: 5, offset: 7186},
						run: (*parser).callonIdentifier71,
						expr: &litMatcher{
							pos:        position{line: 257, col: 5, offset: 7186},
							val:        "Kind",
							ignoreCase: false,
							want:       "\"Kind\"",
						},
					},
					&actionExpr{
						pos: position{line: 258, col: 5, offset: 7218},
						run: (*parser).callonIdentifier73,
						expr: &litMatcher{
							pos:        position{line: 258, col: 5, offset: 7218},
							val:        "Sort",
							ignoreCase: false,
							want:       "\"Sort\"",
						},
					},
				},
			},
		},
		{
			name: "Http",
			pos:  position{line: 417, col: 1, offset: 11293},
			expr: &actionExpr{
				pos: position{line: 417, col: 8, offset: 11302},
				run: (*parser).callonHttp1,
				expr: &seqExpr{
					pos: position{line: 417, col: 8, offset: 11302},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 417, col: 8, offset: 11302},
							label: "u",
							expr: &actionExpr{
								pos: position{line: 383, col: 11, offset: 10484},
								run: (*parser).callonHttp4,
								expr: &seqExpr{
									pos: position{line: 383, col: 11, offset: 10484},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 381, col: 10, offset: 10459},
											val:        "http",
											ignoreCase: false,
											want:       "\"http\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 381, col: 17, offset: 10466},
											expr: &litMatcher{
												pos:        position{line: 381, col: 17, offset: 10466},
												val:        "s",
												ignoreCase: false,
												want:       "\"s\"",
											},
										},
										&litMatcher{
											pos:        position{line: 383, col: 18, offset: 10491},
											val:        "://",
											ignoreCase: false,
											want:       "\"://\"",
										},
										&zeroOrOneExpr{
											pos: position{line: 387, col: 13, offset: 10636},
											expr: &seqExpr{
												pos: position{line: 387, col: 14, offset: 10637},
												exprs: []interface{}{
													&zeroOrMoreExpr{
														pos: position{line: 389, col: 12, offset: 10683},
														expr: &choiceExpr{
															pos: position{line: 389, col: 14, offset: 10685},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 413, col: 14, offset: 11215},
																	val:        "[._~-A-Za-z0-9]",
																	chars:      []rune{'.', '_', '~', '-'},
																	ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 411, col: 14, offset: 11181},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 411, col: 14, offset: 11181},
																			val:        "%",
																			ignoreCase: false,
																			want:       "\"%\"",
																		},
																		&choiceExpr{
																			pos: position{line: 108, col: 10, offset: 2394},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 106, col: 9, offset: 2376},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 108, col: 18, offset: 2402},
																					val:        "[a-f]i",
																					ranges:     []rune{'a', 'f'},
																					ignoreCase: true,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 108, col: 10, offset: 2394},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 106, col: 9, offset: 2376},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 108, col: 18, offset: 2402},
																					val:        "[a-f]i",
																					ranges:     []rune{'a', 'f'},
																					ignoreCase: true,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 415, col: 13, offset: 11246},
																	val:        "[!$&\\*+;=:]",
																	chars:      []rune{'!', '$', '&', '\'', '*', '+', ';', '=', ':'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 387, col: 23, offset: 10646},
														val:        "@",
														ignoreCase: false,
														want:       "\"@\"",
													},
												},
											},
										},
										&choiceExpr{
											pos: position{line: 391, col: 8, offset: 10740},
											alternatives: []interface{}{
												&seqExpr{
													pos: position{line: 395, col: 13, offset: 10792},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 395, col: 13, offset: 10792},
															val:        "[",
															ignoreCase: false,
															want:       "\"[\"",
														},
														&actionExpr{
															pos: position{line: 397, col: 15, offset: 10829},
															run: (*parser).callonHttp28,
															expr: &seqExpr{
																pos: position{line: 397, col: 15, offset: 10829},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 397, col: 15, offset: 10829},
																		expr: &choiceExpr{
																			pos: position{line: 108, col: 10, offset: 2394},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 106, col: 9, offset: 2376},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 108, col: 18, offset: 2402},
																					val:        "[a-f]i",
																					ranges:     []rune{'a', 'f'},
																					ignoreCase: true,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 397, col: 25, offset: 10839},
																		val:        ":",
																		ignoreCase: false,
																		want:       "\":\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 397, col: 29, offset: 10843},
																		expr: &choiceExpr{
																			pos: position{line: 397, col: 30, offset: 10844},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 106, col: 9, offset: 2376},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 108, col: 18, offset: 2402},
																					val:        "[a-f]i",
																					ranges:     []rune{'a', 'f'},
																					ignoreCase: true,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 397, col: 39, offset: 10853},
																					val:        "[:.]",
																					chars:      []rune{':', '.'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 395, col: 29, offset: 10808},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 403, col: 11, offset: 11025},
													expr: &choiceExpr{
														pos: position{line: 403, col: 12, offset: 11026},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 413, col: 14, offset: 11215},
																val:        "[._~-A-Za-z0-9]",
																chars:      []rune{'.', '_', '~', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
															&seqExpr{
																pos: position{line: 411, col: 14, offset: 11181},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 411, col: 14, offset: 11181},
																		val:        "%",
																		ignoreCase: false,
																		want:       "\"%\"",
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 415, col: 13, offset: 11246},
																val:        "[!$&\\*+;=]",
																chars:      []rune{'!', '$', '&', '\'', '*', '+', ';', '='},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 387, col: 34, offset: 10657},
											expr: &seqExpr{
												pos: position{line: 387, col: 35, offset: 10658},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 387, col: 35, offset: 10658},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 393, col: 8, offset: 10770},
														expr: &charClassMatcher{
															pos:        position{line: 106, col: 9, offset: 2376},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 385, col: 11, offset: 10590},
											expr: &choiceExpr{
												pos: position{line: 385, col: 12, offset: 10591},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 362, col: 17, offset: 9687},
														run: (*parser).callonHttp60,
														expr: &seqExpr{
															pos: position{line: 362, col: 17, offset: 9687},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 362, col: 17, offset: 9687},
																	val:        "/",
																	ignoreCase: false,
																	want:       "\"/\"",
																},
																&labeledExpr{
																	pos:   position{line: 362, col: 21, offset: 9691},
																	label: "u",
																	expr: &actionExpr{
																		pos: position{line: 359, col: 25, offset: 9546},
																		run: (*parser).callonHttp64,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 359, col: 25, offset: 9546},
																			expr: &charClassMatcher{
																				pos:        position{line: 343, col: 6, offset: 9291},
																				val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																				chars:      []rune{'!', '=', '|', '~'},
																				ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 363, col: 17, offset: 9749},
														run: (*parser).callonHttp67,
														expr: &seqExpr{
															pos: position{line: 363, col: 17, offset: 9749},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 363, col: 17, offset: 9749},
																	val:        "/\"",
																	ignoreCase: false,
																	want:       "\"/\\\"\"",
																},
																&labeledExpr{
																	pos:   position{line: 363, col: 25, offset: 9757},
																	label: "q",
																	expr: &actionExpr{
																		pos: position{line: 360, col: 23, offset: 9616},
																		run: (*parser).callonHttp71,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 360, col: 23, offset: 9616},
																			expr: &charClassMatcher{
																				pos:        position{line: 354, col: 6, offset: 9454},
																				val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																				chars:      []rune{'êÄÄ', 'D'},
																				ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 363, col: 47, offset: 9779},
																	val:        "\"",
																	ignoreCase: false,
																	want:       "\"\\\"\"",
																},
															},
														},
													},
													&seqExpr{
														pos: position{line: 385, col: 28, offset: 10607},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 385, col: 28, offset: 10607},
																val:        "/",
																ignoreCase: false,
																want:       "\"/\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 405, col: 11, offset: 11077},
																expr: &choiceExpr{
																	pos: position{line: 407, col: 9, offset: 11095},
																	alternatives: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 413, col: 14, offset: 11215},
																			val:        "[._~-A-Za-z0-9]",
																			chars:      []rune{'.', '_', '~', '-'},
																			ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&seqExpr{
																			pos: position{line: 411, col: 14, offset: 11181},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 411, col: 14, offset: 11181},
																					val:        "%",
																					ignoreCase: false,
																					want:       "\"%\"",
																				},
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 108, col: 10, offset: 2394},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 106, col: 9, offset: 2376},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&charClassMatcher{
																							pos:        position{line: 108, col: 18, offset: 2402},
																							val:        "[a-f]i",
																							ranges:     []rune{'a', 'f'},
																							ignoreCase: true,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&charClassMatcher{
																			pos:        position{line: 415, col: 13, offset: 11246},
																			val:        "[!$&\\*+;=:@]",
																			chars:      []rune{'!', '$', '&', '\'', '*', '+', ';', '=', ':', '@'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 383, col: 42, offset: 10515},
											expr: &seqExpr{
												pos: position{line: 383, col: 44, offset: 10517},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 383, col: 44, offset: 10517},
														val:        "?",
														ignoreCase: false,
														want:       "\"?\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 409, col: 9, offset: 11149},
														expr: &choiceExpr{
															pos: position{line: 409, col: 10, offset: 11150},
															alternatives: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 413, col: 14, offset: 11215},
																	val:        "[._~-A-Za-z0-9]",
																	chars:      []rune{'.', '_', '~', '-'},
																	ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&seqExpr{
																	pos: position{line: 411, col: 14, offset: 11181},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 411, col: 14, offset: 11181},
																			val:        "%",
																			ignoreCase: false,
																			want:       "\"%\"",
																		},
																		&choiceExpr{
																			pos: position{line: 108, col: 10, offset: 2394},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 106, col: 9, offset: 2376},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 108, col: 18, offset: 2402},
																					val:        "[a-f]i",
																					ranges:     []rune{'a', 'f'},
																					ignoreCase: true,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 108, col: 10, offset: 2394},
																			alternatives: []interface{}{
																				&charClassMatcher{
																					pos:        position{line: 106, col: 9, offset: 2376},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																				&charClassMatcher{
																					pos:        position{line: 108, col: 18, offset: 2402},
																					val:        "[a-f]i",
																					ranges:     []rune{'a', 'f'},
																					ignoreCase: true,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 415, col: 13, offset: 11246},
																	val:        "[!$&\\*+;=:@/?]",
																	chars:      []rune{'!', '$', '&', '\'', '*', '+', ';', '=', ':', '@', '/', '?'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 417, col: 18, offset: 11312},
							label: "usingClause",
							expr: &zeroOrOneExpr{
								pos: position{line: 417, col: 30, offset: 11324},
								expr: &seqExpr{
									pos: position{line: 417, col: 32, offset: 11326},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 417, col: 32, offset: 11326},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 266, col: 9, offset: 7339},
											val:        "using",
											ignoreCase: false,
											want:       "\"using\"",
										},
										&ruleRefExpr{
											pos:  position{line: 417, col: 40, offset: 11334},
											name: "_1",
										},
										&ruleRefExpr{
											pos:  position{line: 417, col: 43, offset: 11337},
											name: "ImportExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImportType",
			pos:  position{line: 458, col: 1, offset: 12533},
			expr: &choiceExpr{
				pos: position{line: 458, col: 14, offset: 12548},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 268, col: 11, offset: 7377},
						run: (*parser).callonImportType2,
						expr: &seqExpr{
							pos: position{line: 268, col: 11, offset: 7377},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 268, col: 11, offset: 7377},
									val:        "missing",
									ignoreCase: false,
									want:       "\"missing\"",
								},
								&notExpr{
									pos: position{line: 268, col: 21, offset: 7387},
									expr: &charClassMatcher{
										pos:        position{line: 111, col: 23, offset: 2469},
										val:        "[_/-A-Za-z0-9]",
										chars:      []rune{'_', '/', '-'},
										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 376, col: 14, offset: 10162},
						run: (*parser).callonImportType7,
						expr: &seqExpr{
							pos: position{line: 376, col: 14, offset: 10162},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 376, col: 14, offset: 10162},
									val:        "..",
									ignoreCase: false,
									want:       "\"..\"",
								},
								&labeledExpr{
									pos:   position{line: 376, col: 19, offset: 10167},
									label: "p",
									expr: &actionExpr{
										pos: position{line: 365, col: 8, offset: 9811},
										run: (*parser).callonImportType11,
										expr: &labeledExpr{
											pos:   position{line: 365, col: 8, offset: 9811},
											label: "cs",
											expr: &oneOrMoreExpr{
												pos: position{line: 365, col: 11, offset: 9814},
												expr: &choiceExpr{
													pos: position{line: 362, col: 17, offset: 9687},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 362, col: 17, offset: 9687},
															run: (*parser).callonImportType15,
															expr: &seqExpr{
																pos: position{line: 362, col: 17, offset: 9687},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 362, col: 17, offset: 9687},
																		val:        "/",
																		ignoreCase: false,
																		want:       "\"/\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 362, col: 21, offset: 9691},
																		label: "u",
																		expr: &actionExpr{
																			pos: position{line: 359, col: 25, offset: 9546},
																			run: (*parser).callonImportType19,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 359, col: 25, offset: 9546},
																				expr: &charClassMatcher{
																					pos:        position{line: 343, col: 6, offset: 9291},
																					val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																					chars:      []rune{'!', '=', '|', '~'},
																					ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 363, col: 17, offset: 9749},
															run: (*parser).callonImportType22,
															expr: &seqExpr{
																pos: position{line: 363, col: 17, offset: 9749},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 363, col: 17, offset: 9749},
																		val:        "/\"",
																		ignoreCase: false,
																		want:       "\"/\\\"\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 363, col: 25, offset: 9757},
																		label: "q",
																		expr: &actionExpr{
																			pos: position{line: 360, col: 23, offset: 9616},
																			run: (*parser).callonImportType26,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 360, col: 23, offset: 9616},
																				expr: &charClassMatcher{
																					pos:        position{line: 354, col: 6, offset: 9454},
																					val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																					chars:      []rune{'êÄÄ', 'D'},
																					ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 363, col: 47, offset: 9779},
																		val:        "\"",
																		ignoreCase: false,
																		want:       "\"\\\"\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 377, col: 12, offset: 10242},
						run: (*parser).callonImportType30,
						expr: &seqExpr{
							pos: position{line: 377, col: 12, offset: 10242},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 377, col: 12, offset: 10242},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 377, col: 16, offset: 10246},
									label: "p",
									expr: &actionExpr{
										pos: position{line: 365, col: 8, offset: 9811},
										run: (*parser).callonImportType34,
										expr: &labeledExpr{
											pos:   position{line: 365, col: 8, offset: 9811},
											label: "cs",
											expr: &oneOrMoreExpr{
												pos: position{line: 365, col: 11, offset: 9814},
												expr: &choiceExpr{
													pos: position{line: 362, col: 17, offset: 9687},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 362, col: 17, offset: 9687},
															run: (*parser).callonImportType38,
															expr: &seqExpr{
																pos: position{line: 362, col: 17, offset: 9687},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 362, col: 17, offset: 9687},
																		val:        "/",
																		ignoreCase: false,
																		want:       "\"/\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 362, col: 21, offset: 9691},
																		label: "u",
																		expr: &actionExpr{
																			pos: position{line: 359, col: 25, offset: 9546},
																			run: (*parser).callonImportType42,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 359, col: 25, offset: 9546},
																				expr: &charClassMatcher{
																					pos:        position{line: 343, col: 6, offset: 9291},
																					val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																					chars:      []rune{'!', '=', '|', '~'},
																					ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 363, col: 17, offset: 9749},
															run: (*parser).callonImportType45,
															expr: &seqExpr{
																pos: position{line: 363, col: 17, offset: 9749},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 363, col: 17, offset: 9749},
																		val:        "/\"",
																		ignoreCase: false,
																		want:       "\"/\\\"\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 363, col: 25, offset: 9757},
																		label: "q",
																		expr: &actionExpr{
																			pos: position{line: 360, col: 23, offset: 9616},
																			run: (*parser).callonImportType49,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 360, col: 23, offset: 9616},
																				expr: &charClassMatcher{
																					pos:        position{line: 354, col: 6, offset: 9454},
																					val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																					chars:      []rune{'êÄÄ', 'D'},
																					ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 363, col: 47, offset: 9779},
																		val:        "\"",
																		ignoreCase: false,
																		want:       "\"\\\"\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 378, col: 12, offset: 10304},
						run: (*parser).callonImportType53,
						expr: &seqExpr{
							pos: position{line: 378, col: 12, offset: 10304},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 378, col: 12, offset: 10304},
									val:        "~",
									ignoreCase: false,
									want:       "\"~\"",
								},
								&labeledExpr{
									pos:   position{line: 378, col: 16, offset: 10308},
									label: "p",
									expr: &actionExpr{
										pos: position{line: 365, col: 8, offset: 9811},
										run: (*parser).callonImportType57,
										expr: &labeledExpr{
											pos:   position{line: 365, col: 8, offset: 9811},
											label: "cs",
											expr: &oneOrMoreExpr{
												pos: position{line: 365, col: 11, offset: 9814},
												expr: &choiceExpr{
													pos: position{line: 362, col: 17, offset: 9687},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 362, col: 17, offset: 9687},
															run: (*parser).callonImportType61,
															expr: &seqExpr{
																pos: position{line: 362, col: 17, offset: 9687},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 362, col: 17, offset: 9687},
																		val:        "/",
																		ignoreCase: false,
																		want:       "\"/\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 362, col: 21, offset: 9691},
																		label: "u",
																		expr: &actionExpr{
																			pos: position{line: 359, col: 25, offset: 9546},
																			run: (*parser).callonImportType65,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 359, col: 25, offset: 9546},
																				expr: &charClassMatcher{
																					pos:        position{line: 343, col: 6, offset: 9291},
																					val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																					chars:      []rune{'!', '=', '|', '~'},
																					ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 363, col: 17, offset: 9749},
															run: (*parser).callonImportType68,
															expr: &seqExpr{
																pos: position{line: 363, col: 17, offset: 9749},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 363, col: 17, offset: 9749},
																		val:        "/\"",
																		ignoreCase: false,
																		want:       "\"/\\\"\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 363, col: 25, offset: 9757},
																		label: "q",
																		expr: &actionExpr{
																			pos: position{line: 360, col: 23, offset: 9616},
																			run: (*parser).callonImportType72,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 360, col: 23, offset: 9616},
																				expr: &charClassMatcher{
																					pos:        position{line: 354, col: 6, offset: 9454},
																					val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																					chars:      []rune{'êÄÄ', 'D'},
																					ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 363, col: 47, offset: 9779},
																		val:        "\"",
																		ignoreCase: false,
																		want:       "\"\\\"\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 379, col: 16, offset: 10386},
						run: (*parser).callonImportType76,
						expr: &labeledExpr{
							pos:   position{line: 379, col: 16, offset: 10386},
							label: "p",
							expr: &actionExpr{
								pos: position{line: 365, col: 8, offset: 9811},
								run: (*parser).callonImportType78,
								expr: &labeledExpr{
									pos:   position{line: 365, col: 8, offset: 9811},
									label: "cs",
									expr: &oneOrMoreExpr{
										pos: position{line: 365, col: 11, offset: 9814},
										expr: &choiceExpr{
											pos: position{line: 362, col: 17, offset: 9687},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 362, col: 17, offset: 9687},
													run: (*parser).callonImportType82,
													expr: &seqExpr{
														pos: position{line: 362, col: 17, offset: 9687},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 362, col: 17, offset: 9687},
																val:        "/",
																ignoreCase: false,
																want:       "\"/\"",
															},
															&labeledExpr{
																pos:   position{line: 362, col: 21, offset: 9691},
																label: "u",
																expr: &actionExpr{
																	pos: position{line: 359, col: 25, offset: 9546},
																	run: (*parser).callonImportType86,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 359, col: 25, offset: 9546},
																		expr: &charClassMatcher{
																			pos:        position{line: 343, col: 6, offset: 9291},
																			val:        "[!=|~$-\\*-+--.0-;@-Z^-z]",
																			chars:      []rune{'!', '=', '|', '~'},
																			ranges:     []rune{'$', '\'', '*', '+', '-', '.', '0', ';', '@', 'Z', '^', 'z'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 363, col: 17, offset: 9749},
													run: (*parser).callonImportType89,
													expr: &seqExpr{
														pos: position{line: 363, col: 17, offset: 9749},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 363, col: 17, offset: 9749},
																val:        "/\"",
																ignoreCase: false,
																want:       "\"/\\\"\"",
															},
															&labeledExpr{
																pos:   position{line: 363, col: 25, offset: 9757},
																label: "q",
																expr: &actionExpr{
																	pos: position{line: 360, col: 23, offset: 9616},
																	run: (*parser).callonImportType93,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 360, col: 23, offset: 9616},
																		expr: &charClassMatcher{
																			pos:        position{line: 354, col: 6, offset: 9454},
																			val:        "[êÄÄD -!#-.0-\\u007f\\u0080-\\ud7ff\\ue000-ÔøΩêÄÄ-\\U0001fffd†ÄÄ-\\U0002fffd\\U00030000-\\U0003fffd\\U00040000-\\U0004fffd\\U00050000-\\U0005fffd\\U00060000-\\U0006fffd\\U00070000-\\U0007fffd\\U00080000-\\U0008fffd\\U00090000-\\U0009fffd\\U000a0000-\\U000afffd\\U000b0000-\\U000bfffd\\U000c0000-\\U000cfffd\\U000d0000-\\U000dfffd\\U000e0000-\\U000efffd\\U000f0000-\\U000ffffd0-\\U00010fff]",
																			chars:      []rune{'êÄÄ', 'D'},
																			ranges:     []rune{' ', '!', '#', '.', '0', '\u007f', '\u0080', '\ud7ff', '\ue000', 'ÔøΩ', 'êÄÄ', '\U0001fffd', '†ÄÄ', '\U0002fffd', '\U00030000', '\U0003fffd', '\U00040000', '\U0004fffd', '\U00050000', '\U0005fffd', '\U00060000', '\U0006fffd', '\U00070000', '\U0007fffd', '\U00080000', '\U0008fffd', '\U00090000', '\U0009fffd', '\U000a0000', '\U000afffd', '\U000b0000', '\U000bfffd', '\U000c0000', '\U000cfffd', '\U000d0000', '\U000dfffd', '\U000e0000', '\U000efffd', '\U000f0000', '\U000ffffd', '0', '\U00010fff'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 363, col: 47, offset: 9779},
																val:        "\"",
																ignoreCase: false,
																want:       "\"\\\"\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 458, col: 32, offset: 12566},
						name: "Http",
					},
					&actionExpr{
						pos: position{line: 424, col: 7, offset: 11545},
						run: (*parser).callonImportType98,
						expr: &seqExpr{
							pos: position{line: 424, col: 7, offset: 11545},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 424, col: 7, offset: 11545},
									val:        "env:",
									ignoreCase: false,
									want:       "\"env:\"",
								},
								&labeledExpr{
									pos:   position{line: 424, col: 14, offset: 11552},
									label: "v",
									expr: &choiceExpr{
										pos: position{line: 424, col: 17, offset: 11555},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 426, col: 27, offset: 11654},
												run: (*parser).callonImportType103,
												expr: &seqExpr{
													pos: position{line: 426, col: 27, offset: 11654},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 426, col: 27, offset: 11654},
															val:        "[_A-Za-z]",
															chars:      []rune{'_'},
															ranges:     []rune{'A', 'Z', 'a', 'z'},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 426, col: 36, offset: 11663},
															expr: &charClassMatcher{
																pos:        position{line: 426, col: 36, offset: 11663},
																val:        "[_A-Za-z0-9]",
																chars:      []rune{'_'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 430, col: 28, offset: 11748},
												run: (*parser).callonImportType108,
												expr: &seqExpr{
													pos: position{line: 430, col: 28, offset: 11748},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 430, col: 28, offset: 11748},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
														&labeledExpr{
															pos:   position{line: 430, col: 32, offset: 11752},
															label: "v",
															expr: &actionExpr{
																pos: position{line: 434, col: 35, offset: 11847},
																run: (*parser).callonImportType112,
																expr: &labeledExpr{
																	pos:   position{line: 434, col: 35, offset: 11847},
																	label: "v",
																	expr: &oneOrMoreExpr{
																		pos: position{line: 434, col: 37, offset: 11849},
																		expr: &choiceExpr{
																			pos: position{line: 444, col: 7, offset: 12106},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 444, col: 7, offset: 12106},
																					run: (*parser).callonImportType116,
																					expr: &litMatcher{
																						pos:        position{line: 444, col: 7, offset: 12106},
																						val:        "\\\"",
																						ignoreCase: false,
																						want:       "\"\\\\\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 445, col: 7, offset: 12146},
																					run: (*parser).callonImportType118,
																					expr: &litMatcher{
																						pos:        position{line: 445, col: 7, offset: 12146},
																						val:        "\\\\",
																						ignoreCase: false,
																						want:       "\"\\\\\\\\\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 446, col: 7, offset: 12186},
																					run: (*parser).callonImportType120,
																					expr: &litMatcher{
																						pos:        position{line: 446, col: 7, offset: 12186},
																						val:        "\\a",
																						ignoreCase: false,
																						want:       "\"\\\\a\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 447, col: 7, offset: 12226},
																					run: (*parser).callonImportType122,
																					expr: &litMatcher{
																						pos:        position{line: 447, col: 7, offset: 12226},
																						val:        "\\b",
																						ignoreCase: false,
																						want:       "\"\\\\b\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 448, col: 7, offset: 12266},
																					run: (*parser).callonImportType124,
																					expr: &litMatcher{
																						pos:        position{line: 448, col: 7, offset: 12266},
																						val:        "\\f",
																						ignoreCase: false,
																						want:       "\"\\\\f\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 449, col: 7, offset: 12306},
																					run: (*parser).callonImportType126,
																					expr: &litMatcher{
																						pos:        position{line: 449, col: 7, offset: 12306},
																						val:        "\\n",
																						ignoreCase: false,
																						want:       "\"\\\\n\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 450, col: 7, offset: 12346},
																					run: (*parser).callonImportType128,
																					expr: &litMatcher{
																						pos:        position{line: 450, col: 7, offset: 12346},
																						val:        "\\r",
																						ignoreCase: false,
																						want:       "\"\\\\r\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 451, col: 7, offset: 12386},
																					run: (*parser).callonImportType130,
																					expr: &litMatcher{
																						pos:        position{line: 451, col: 7, offset: 12386},
																						val:        "\\t",
																						ignoreCase: false,
																						want:       "\"\\\\t\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 452, col: 7, offset: 12426},
																					run: (*parser).callonImportType132,
																					expr: &litMatcher{
																						pos:        position{line: 452, col: 7, offset: 12426},
																						val:        "\\v",
																						ignoreCase: false,
																						want:       "\"\\\\v\"",
																					},
																				},
																				&charClassMatcher{
																					pos:        position{line: 453, col: 7, offset: 12466},
																					val:        "[ -!#-<>-[]-~]",
																					ranges:     []rune{' ', '!', '#', '<', '>', '[', ']', '~'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 430, col: 66, offset: 11786},
															val:        "\"",
															ignoreCase: false,
															want:       "\"\\\"\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImportHashed",
			pos:  position{line: 476, col: 1, offset: 13418},
			expr: &actionExpr{
				pos: position{line: 476, col: 16, offset: 13435},
				run: (*parser).callonImportHashed1,
				expr: &seqExpr{
					pos: position{line: 476, col: 16, offset: 13435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 476, col: 16, offset: 13435},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 18, offset: 13437},
								name: "ImportType",
							},
						},
						&labeledExpr{
							pos:   position{line: 476, col: 29, offset: 13448},
							label: "h",
							expr: &zeroOrOneExpr{
								pos: position{line: 476, col: 31, offset: 13450},
								expr: &seqExpr{
									pos: position{line: 476, col: 32, offset: 13451},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 476, col: 32, offset: 13451},
											name: "_1",
										},
										&actionExpr{
											pos: position{line: 474, col: 8, offset: 13334},
											run: (*parser).callonImportHashed9,
											expr: &seqExpr{
												pos: position{line: 474, col: 8, offset: 13334},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 474, col: 8, offset: 13334},
														val:        "sha256:",
														ignoreCase: false,
														want:       "\"sha256:\"",
													},
													&labeledExpr{
														pos:   position{line: 474, col: 18, offset: 13344},
														label: "val",
														expr: &actionExpr{
															pos: position{line: 461, col: 13, offset: 12658},
															run: (*parser).callonImportHashed13,
															expr: &seqExpr{
																pos: position{line: 461, col: 13, offset: 12658},
																exprs: []interface{}{
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Import",
			pos:  position{line: 484, col: 1, offset: 13609},
			expr: &choiceExpr{
				pos: position{line: 484, col: 10, offset: 13620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 484, col: 10, offset: 13620},
						run: (*parser).callonImport2,
						expr: &seqExpr{
							pos: position{line: 484, col: 10, offset: 13620},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 484, col: 10, offset: 13620},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 484, col: 12, offset: 13622},
										name: "ImportHashed",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 484, col: 25, offset: 13635},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 265, col: 6, offset: 7324},
									val:        "as",
									ignoreCase: false,
									want:       "\"as\"",
								},
								&ruleRefExpr{
									pos:  position{line: 484, col: 30, offset: 13640},
									name: "_1",
								},
								&litMatcher{
									pos:        position{line: 287, col: 8, offset: 7732},
									val:        "Text",
									ignoreCase: false,
									want:       "\"Text\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 485, col: 10, offset: 13733},
						run: (*parser).callonImport10,
						expr: &seqExpr{
							pos: position{line: 485, col: 10, offset: 13733},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 485, col: 10, offset: 13733},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 485, col: 12, offset: 13735},
										name: "ImportHashed",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 485, col: 25, offset: 13748},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 265, col: 6, offset: 7324},
									val:        "as",
									ignoreCase: false,
									want:       "\"as\"",
								},
								&ruleRefExpr{
									pos:  position{line: 485, col: 30, offset: 13753},
									name: "_1",
								},
								&litMatcher{
									pos:        position{line: 289, col: 12, offset: 7768},
									val:        "Location",
									ignoreCase: false,
									want:       "\"Location\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 486, col: 10, offset: 13851},
						run: (*parser).callonImport18,
						expr: &labeledExpr{
							pos:   position{line: 486, col: 10, offset: 13851},
							label: "i",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 12, offset: 13853},
								name: "ImportHashed",
							},
						},
					},
				},
			},
		},
		{
			name: "LetBinding",
			pos:  position{line: 489, col: 1, offset: 13941},
			expr: &actionExpr{
				pos: position{line: 489, col: 14, offset: 13956},
				run: (*parser).callonLetBinding1,
				expr: &seqExpr{
					pos: position{line: 489, col: 14, offset: 13956},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 7, offset: 7299},
							val:        "let",
							ignoreCase: false,
							want:       "\"let\"",
						},
						&ruleRefExpr{
							pos:  position{line: 489, col: 18, offset: 13960},
							name: "_1",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 21, offset: 13963},
							label: "label",
							expr: &choiceExpr{
								pos: position{line: 124, col: 20, offset: 2921},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 124, col: 20, offset: 2921},
										run: (*parser).callonLetBinding7,
										expr: &seqExpr{
											pos: position{line: 124, col: 20, offset: 2921},
											exprs: []interface{}{
												&andExpr{
													pos: position{line: 124, col: 20, offset: 2921},
													expr: &seqExpr{
														pos: position{line: 124, col: 22, offset: 2923},
														exprs: []interface{}{
															&choiceExpr{
																pos: position{line: 223, col: 5, offset: 5717},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 223, col: 5, offset: 5717},
																		run: (*parser).callonLetBinding12,
																		expr: &litMatcher{
																			pos:        position{line: 223, col: 5, offset: 5717},
																			val:        "Natural/build",
																			ignoreCase: false,
																			want:       "\"Natural/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 224, col: 5, offset: 5766},
																		run: (*parser).callonLetBinding14,
																		expr: &litMatcher{
																			pos:        position{line: 224, col: 5, offset: 5766},
																			val:        "Natural/fold",
																			ignoreCase: false,
																			want:       "\"Natural/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 225, col: 5, offset: 5813},
																		run: (*parser).callonLetBinding16,
																		expr: &litMatcher{
																			pos:        position{line: 225, col: 5, offset: 5813},
																			val:        "Natural/isZero",
																			ignoreCase: false,
																			want:       "\"Natural/isZero\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 226, col: 5, offset: 5864},
																		run: (*parser).callonLetBinding18,
																		expr: &litMatcher{
																			pos:        position{line: 226, col: 5, offset: 5864},
																			val:        "Natural/even",
																			ignoreCase: false,
																			want:       "\"Natural/even\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 227, col: 5, offset: 5911},
																		run: (*parser).callonLetBinding20,
																		expr: &litMatcher{
																			pos:        position{line: 227, col: 5, offset: 5911},
																			val:        "Natural/odd",
																			ignoreCase: false,
																			want:       "\"Natural/odd\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 228, col: 5, offset: 5956},
																		run: (*parser).callonLetBinding22,
																		expr: &litMatcher{
																			pos:        position{line: 228, col: 5, offset: 5956},
																			val:        "Natural/toInteger",
																			ignoreCase: false,
																			want:       "\"Natural/toInteger\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 229, col: 5, offset: 6013},
																		run: (*parser).callonLetBinding24,
																		expr: &litMatcher{
																			pos:        position{line: 229, col: 5, offset: 6013},
																			val:        "Natural/show",
																			ignoreCase: false,
																			want:       "\"Natural/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 230, col: 5, offset: 6060},
																		run: (*parser).callonLetBinding26,
																		expr: &litMatcher{
																			pos:        position{line: 230, col: 5, offset: 6060},
																			val:        "Natural/subtract",
																			ignoreCase: false,
																			want:       "\"Natural/subtract\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 231, col: 5, offset: 6115},
																		run: (*parser).callonLetBinding28,
																		expr: &litMatcher{
																			pos:        position{line: 231, col: 5, offset: 6115},
																			val:        "Integer/clamp",
																			ignoreCase: false,
																			want:       "\"Integer/clamp\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 232, col: 5, offset: 6164},
																		run: (*parser).callonLetBinding30,
																		expr: &litMatcher{
																			pos:        position{line: 232, col: 5, offset: 6164},
																			val:        "Integer/negate",
																			ignoreCase: false,
																			want:       "\"Integer/negate\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 233, col: 5, offset: 6215},
																		run: (*parser).callonLetBinding32,
																		expr: &litMatcher{
																			pos:        position{line: 233, col: 5, offset: 6215},
																			val:        "Integer/toDouble",
																			ignoreCase: false,
																			want:       "\"Integer/toDouble\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 234, col: 5, offset: 6270},
																		run: (*parser).callonLetBinding34,
																		expr: &litMatcher{
																			pos:        position{line: 234, col: 5, offset: 6270},
																			val:        "Integer/show",
																			ignoreCase: false,
																			want:       "\"Integer/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 235, col: 5, offset: 6317},
																		run: (*parser).callonLetBinding36,
																		expr: &litMatcher{
																			pos:        position{line: 235, col: 5, offset: 6317},
																			val:        "Double/show",
																			ignoreCase: false,
																			want:       "\"Double/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 236, col: 5, offset: 6362},
																		run: (*parser).callonLetBinding38,
																		expr: &litMatcher{
																			pos:        position{line: 236, col: 5, offset: 6362},
																			val:        "List/build",
																			ignoreCase: false,
																			want:       "\"List/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 237, col: 5, offset: 6405},
																		run: (*parser).callonLetBinding40,
																		expr: &litMatcher{
																			pos:        position{line: 237, col: 5, offset: 6405},
																			val:        "List/fold",
																			ignoreCase: false,
																			want:       "\"List/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 238, col: 5, offset: 6446},
																		run: (*parser).callonLetBinding42,
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 5, offset: 6446},
																			val:        "List/length",
																			ignoreCase: false,
																			want:       "\"List/length\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 239, col: 5, offset: 6491},
																		run: (*parser).callonLetBinding44,
																		expr: &litMatcher{
																			pos:        position{line: 239, col: 5, offset: 6491},
																			val:        "List/head",
																			ignoreCase: false,
																			want:       "\"List/head\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 240, col: 5, offset: 6532},
																		run: (*parser).callonLetBinding46,
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 5, offset: 6532},
																			val:        "List/last",
																			ignoreCase: false,
																			want:       "\"List/last\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 241, col: 5, offset: 6573},
																		run: (*parser).callonLetBinding48,
																		expr: &litMatcher{
																			pos:        position{line: 241, col: 5, offset: 6573},
																			val:        "List/indexed",
																			ignoreCase: false,
																			want:       "\"List/indexed\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 242, col: 5, offset: 6620},
																		run: (*parser).callonLetBinding50,
																		expr: &litMatcher{
																			pos:        position{line: 242, col: 5, offset: 6620},
																			val:        "List/reverse",
																			ignoreCase: false,
																			want:       "\"List/reverse\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 243, col: 5, offset: 6667},
																		run: (*parser).callonLetBinding52,
																		expr: &litMatcher{
																			pos:        position{line: 243, col: 5, offset: 6667},
																			val:        "Optional/build",
																			ignoreCase: false,
																			want:       "\"Optional/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 244, col: 5, offset: 6718},
																		run: (*parser).callonLetBinding54,
																		expr: &litMatcher{
																			pos:        position{line: 244, col: 5, offset: 6718},
																			val:        "Optional/fold",
																			ignoreCase: false,
																			want:       "\"Optional/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 245, col: 5, offset: 6767},
																		run: (*parser).callonLetBinding56,
																		expr: &litMatcher{
																			pos:        position{line: 245, col: 5, offset: 6767},
																			val:        "Text/show",
																			ignoreCase: false,
																			want:       "\"Text/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 246, col: 5, offset: 6808},
																		run: (*parser).callonLetBinding58,
																		expr: &litMatcher{
																			pos:        position{line: 246, col: 5, offset: 6808},
																			val:        "Bool",
																			ignoreCase: false,
																			want:       "\"Bool\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 247, col: 5, offset: 6840},
																		run: (*parser).callonLetBinding60,
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 5, offset: 6840},
																			val:        "True",
																			ignoreCase: false,
																			want:       "\"True\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 248, col: 5, offset: 6872},
																		run: (*parser).callonLetBinding62,
																		expr: &litMatcher{
																			pos:        position{line: 248, col: 5, offset: 6872},
																			val:        "False",
																			ignoreCase: false,
																			want:       "\"False\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 249, col: 5, offset: 6906},
																		run: (*parser).callonLetBinding64,
																		expr: &litMatcher{
																			pos:        position{line: 249, col: 5, offset: 6906},
																			val:        "Optional",
																			ignoreCase: false,
																			want:       "\"Optional\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 250, col: 5, offset: 6946},
																		run: (*parser).callonLetBinding66,
																		expr: &litMatcher{
																			pos:        position{line: 250, col: 5, offset: 6946},
																			val:        "Natural",
																			ignoreCase: false,
																			want:       "\"Natural\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 251, col: 5, offset: 6984},
																		run: (*parser).callonLetBinding68,
																		expr: &litMatcher{
																			pos:        position{line: 251, col: 5, offset: 6984},
																			val:        "Integer",
																			ignoreCase: false,
																			want:       "\"Integer\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 252, col: 5, offset: 7022},
																		run: (*parser).callonLetBinding70,
																		expr: &litMatcher{
																			pos:        position{line: 252, col: 5, offset: 7022},
																			val:        "Double",
																			ignoreCase: false,
																			want:       "\"Double\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 253, col: 5, offset: 7058},
																		run: (*parser).callonLetBinding72,
																		expr: &litMatcher{
																			pos:        position{line: 253, col: 5, offset: 7058},
																			val:        "Text",
																			ignoreCase: false,
																			want:       "\"Text\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 254, col: 5, offset: 7090},
																		run: (*parser).callonLetBinding74,
																		expr: &litMatcher{
																			pos:        position{line: 254, col: 5, offset: 7090},
																			val:        "List",
																			ignoreCase: false,
																			want:       "\"List\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 255, col: 5, offset: 7122},
																		run: (*parser).callonLetBinding76,
																		expr: &litMatcher{
																			pos:        position{line: 255, col: 5, offset: 7122},
																			val:        "None",
																			ignoreCase: false,
																			want:       "\"None\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 256, col: 5, offset: 7154},
																		run: (*parser).callonLetBinding78,
																		expr: &litMatcher{
																			pos:        position{line: 256, col: 5, offset: 7154},
																			val:        "Type",
																			ignoreCase: false,
																			want:       "\"Type\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 257, col: 5, offset: 7186},
																		run: (*parser).callonLetBinding80,
																		expr: &litMatcher{
																			pos:        position{line: 257, col: 5, offset: 7186},
																			val:        "Kind",
																			ignoreCase: false,
																			want:       "\"Kind\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 258, col: 5, offset: 7218},
																		run: (*parser).callonLetBinding82,
																		expr: &litMatcher{
																			pos:        position{line: 258, col: 5, offset: 7218},
																			val:        "Sort",
																			ignoreCase: false,
																			want:       "\"Sort\"",
																		},
																	},
																},
															},
															&charClassMatcher{
																pos:        position{line: 111, col: 23, offset: 2469},
																val:        "[_/-A-Za-z0-9]",
																chars:      []rune{'_', '/', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 124, col: 52, offset: 2953},
													label: "label",
													expr: &choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonLetBinding87,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonLetBinding91,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonLetBinding95,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonLetBinding98,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 278, col: 5, offset: 7577},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7254},
																									val:        "if",
																									ignoreCase: false,
																									want:       "\"if\"",
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 8, offset: 7268},
																									val:        "then",
																									ignoreCase: false,
																									want:       "\"then\"",
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 8, offset: 7284},
																									val:        "else",
																									ignoreCase: false,
																									want:       "\"else\"",
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 7, offset: 7299},
																									val:        "let",
																									ignoreCase: false,
																									want:       "\"let\"",
																								},
																								&litMatcher{
																									pos:        position{line: 264, col: 6, offset: 7312},
																									val:        "in",
																									ignoreCase: false,
																									want:       "\"in\"",
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7339},
																									val:        "using",
																									ignoreCase: false,
																									want:       "\"using\"",
																								},
																								&actionExpr{
																									pos: position{line: 268, col: 11, offset: 7377},
																									run: (*parser).callonLetBinding107,
																									expr: &seqExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 268, col: 11, offset: 7377},
																												val:        "missing",
																												ignoreCase: false,
																												want:       "\"missing\"",
																											},
																											&notExpr{
																												pos: position{line: 268, col: 21, offset: 7387},
																												expr: &charClassMatcher{
																													pos:        position{line: 111, col: 23, offset: 2469},
																													val:        "[_/-A-Za-z0-9]",
																													chars:      []rune{'_', '/', '-'},
																													ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 275, col: 10, offset: 7551},
																									val:        "assert",
																									ignoreCase: false,
																									want:       "\"assert\"",
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 6, offset: 7324},
																									val:        "as",
																									ignoreCase: false,
																									want:       "\"as\"",
																								},
																								&litMatcher{
																									pos:        position{line: 271, col: 12, offset: 7481},
																									val:        "Infinity",
																									ignoreCase: false,
																									want:       "\"Infinity\"",
																								},
																								&litMatcher{
																									pos:        position{line: 272, col: 7, offset: 7500},
																									val:        "NaN",
																									ignoreCase: false,
																									want:       "\"NaN\"",
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 9, offset: 7357},
																									val:        "merge",
																									ignoreCase: false,
																									want:       "\"merge\"",
																								},
																								&litMatcher{
																									pos:        position{line: 273, col: 8, offset: 7515},
																									val:        "Some",
																									ignoreCase: false,
																									want:       "\"Some\"",
																								},
																								&litMatcher{
																									pos:        position{line: 274, col: 9, offset: 7532},
																									val:        "toMap",
																									ignoreCase: false,
																									want:       "\"toMap\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 10, offset: 7927},
																									val:        "forall",
																									ignoreCase: false,
																									want:       "\"forall\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 21, offset: 7938},
																									val:        "‚àÄ",
																									ignoreCase: false,
																									want:       "\"‚àÄ\"",
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonLetBinding123,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 278, col: 5, offset: 7577},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7254},
																										val:        "if",
																										ignoreCase: false,
																										want:       "\"if\"",
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 8, offset: 7268},
																										val:        "then",
																										ignoreCase: false,
																										want:       "\"then\"",
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 8, offset: 7284},
																										val:        "else",
																										ignoreCase: false,
																										want:       "\"else\"",
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 7, offset: 7299},
																										val:        "let",
																										ignoreCase: false,
																										want:       "\"let\"",
																									},
																									&litMatcher{
																										pos:        position{line: 264, col: 6, offset: 7312},
																										val:        "in",
																										ignoreCase: false,
																										want:       "\"in\"",
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7339},
																										val:        "using",
																										ignoreCase: false,
																										want:       "\"using\"",
																									},
																									&actionExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										run: (*parser).callonLetBinding133,
																										expr: &seqExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 268, col: 11, offset: 7377},
																													val:        "missing",
																													ignoreCase: false,
																													want:       "\"missing\"",
																												},
																												&notExpr{
																													pos: position{line: 268, col: 21, offset: 7387},
																													expr: &charClassMatcher{
																														pos:        position{line: 111, col: 23, offset: 2469},
																														val:        "[_/-A-Za-z0-9]",
																														chars:      []rune{'_', '/', '-'},
																														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 275, col: 10, offset: 7551},
																										val:        "assert",
																										ignoreCase: false,
																										want:       "\"assert\"",
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 6, offset: 7324},
																										val:        "as",
																										ignoreCase: false,
																										want:       "\"as\"",
																									},
																									&litMatcher{
																										pos:        position{line: 271, col: 12, offset: 7481},
																										val:        "Infinity",
																										ignoreCase: false,
																										want:       "\"Infinity\"",
																									},
																									&litMatcher{
																										pos:        position{line: 272, col: 7, offset: 7500},
																										val:        "NaN",
																										ignoreCase: false,
																										want:       "\"NaN\"",
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 9, offset: 7357},
																										val:        "merge",
																										ignoreCase: false,
																										want:       "\"merge\"",
																									},
																									&litMatcher{
																										pos:        position{line: 273, col: 8, offset: 7515},
																										val:        "Some",
																										ignoreCase: false,
																										want:       "\"Some\"",
																									},
																									&litMatcher{
																										pos:        position{line: 274, col: 9, offset: 7532},
																										val:        "toMap",
																										ignoreCase: false,
																										want:       "\"toMap\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 10, offset: 7927},
																										val:        "forall",
																										ignoreCase: false,
																										want:       "\"forall\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 21, offset: 7938},
																										val:        "‚àÄ",
																										ignoreCase: false,
																										want:       "\"‚àÄ\"",
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 125, col: 19, offset: 3005},
										run: (*parser).callonLetBinding150,
										expr: &seqExpr{
											pos: position{line: 125, col: 19, offset: 3005},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 125, col: 19, offset: 3005},
													expr: &choiceExpr{
														pos: position{line: 223, col: 5, offset: 5717},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 223, col: 5, offset: 5717},
																run: (*parser).callonLetBinding154,
																expr: &litMatcher{
																	pos:        position{line: 223, col: 5, offset: 5717},
																	val:        "Natural/build",
																	ignoreCase: false,
																	want:       "\"Natural/build\"",
																},
															},
															&actionExpr{
																pos: position{line: 224, col: 5, offset: 5766},
																run: (*parser).callonLetBinding156,
																expr: &litMatcher{
																	pos:        position{line: 224, col: 5, offset: 5766},
																	val:        "Natural/fold",
																	ignoreCase: false,
																	want:       "\"Natural/fold\"",
																},
															},
															&actionExpr{
																pos: position{line: 225, col: 5, offset: 5813},
																run: (*parser).callonLetBinding158,
																expr: &litMatcher{
																	pos:        position{line: 225, col: 5, offset: 5813},
																	val:        "Natural/isZero",
																	ignoreCase: false,
																	want:       "\"Natural/isZero\"",
																},
															},
															&actionExpr{
																pos: position{line: 226, col: 5, offset: 5864},
																run: (*parser).callonLetBinding160,
																expr: &litMatcher{
																	pos:        position{line: 226, col: 5, offset: 5864},
																	val:        "Natural/even",
																	ignoreCase: false,
																	want:       "\"Natural/even\"",
																},
															},
															&actionExpr{
																pos: position{line: 227, col: 5, offset: 5911},
																run: (*parser).callonLetBinding162,
																expr: &litMatcher{
																	pos:        position{line: 227, col: 5, offset: 5911},
																	val:        "Natural/odd",
																	ignoreCase: false,
																	want:       "\"Natural/odd\"",
																},
															},
															&actionExpr{
																pos: position{line: 228, col: 5, offset: 5956},
																run: (*parser).callonLetBinding164,
																expr: &litMatcher{
																	pos:        position{line: 228, col: 5, offset: 5956},
																	val:        "Natural/toInteger",
																	ignoreCase: false,
																	want:       "\"Natural/toInteger\"",
																},
															},
															&actionExpr{
																pos: position{line: 229, col: 5, offset: 6013},
																run: (*parser).callonLetBinding166,
																expr: &litMatcher{
																	pos:        position{line: 229, col: 5, offset: 6013},
																	val:        "Natural/show",
																	ignoreCase: false,
																	want:       "\"Natural/show\"",
																},
															},
															&actionExpr{
																pos: position{line: 230, col: 5, offset: 6060},
																run: (*parser).callonLetBinding168,
																expr: &litMatcher{
																	pos:        position{line: 230, col: 5, offset: 6060},
																	val:        "Natural/subtract",
																	ignoreCase: false,
																	want:       "\"Natural/subtract\"",
																},
															},
															&actionExpr{
																pos: position{line: 231, col: 5, offset: 6115},
																run: (*parser).callonLetBinding170,
																expr: &litMatcher{
																	pos:        position{line: 231, col: 5, offset: 6115},
																	val:        "Integer/clamp",
																	ignoreCase: false,
																	want:       "\"Integer/clamp\"",
																},
															},
															&actionExpr{
																pos: position{line: 232, col: 5, offset: 6164},
																run: (*parser).callonLetBinding172,
																expr: &litMatcher{
																	pos:        position{line: 232, col: 5, offset: 6164},
																	val:        "Integer/negate",
																	ignoreCase: false,
																	want:       "\"Integer/negate\"",
																},
															},
															&actionExpr{
																pos: position{line: 233, col: 5, offset: 6215},
																run: (*parser).callonLetBinding174,
																expr: &litMatcher{
																	pos:        position{line: 233, col: 5, offset: 6215},
																	val:        "Integer/toDouble",
																	ignoreCase: false,
																	want:       "\"Integer/toDouble\"",
																},
															},
															&actionExpr{
																pos: position{line: 234, col: 5, offset: 6270},
																run: (*parser).callonLetBinding176,
																expr: &litMatcher{
																	pos:        position{line: 234, col: 5, offset: 6270},
																	val:        "Integer/show",
																	ignoreCase: false,
																	want:       "\"Integer/show\"",
																},
															},
															&actionExpr{
																pos: position{line: 235, col: 5, offset: 6317},
																run: (*parser).callonLetBinding178,
																expr: &litMatcher{
																	pos:        position{line: 235, col: 5, offset: 6317},
																	val:        "Double/show",
																	ignoreCase: false,
																	want:       "\"Double/show\"",
																},
															},
															&actionExpr{
																pos: position{line: 236, col: 5, offset: 6362},
																run: (*parser).callonLetBinding180,
																expr: &litMatcher{
																	pos:        position{line: 236, col: 5, offset: 6362},
																	val:        "List/build",
																	ignoreCase: false,
																	want:       "\"List/build\"",
																},
															},
															&actionExpr{
																pos: position{line: 237, col: 5, offset: 6405},
																run: (*parser).callonLetBinding182,
																expr: &litMatcher{
																	pos:        position{line: 237, col: 5, offset: 6405},
																	val:        "List/fold",
																	ignoreCase: false,
																	want:       "\"List/fold\"",
																},
															},
															&actionExpr{
																pos: position{line: 238, col: 5, offset: 6446},
																run: (*parser).callonLetBinding184,
																expr: &litMatcher{
																	pos:        position{line: 238, col: 5, offset: 6446},
																	val:        "List/length",
																	ignoreCase: false,
																	want:       "\"List/length\"",
																},
															},
															&actionExpr{
																pos: position{line: 239, col: 5, offset: 6491},
																run: (*parser).callonLetBinding186,
																expr: &litMatcher{
																	pos:        position{line: 239, col: 5, offset: 6491},
																	val:        "List/head",
																	ignoreCase: false,
																	want:       "\"List/head\"",
																},
															},
															&actionExpr{
																pos: position{line: 240, col: 5, offset: 6532},
																run: (*parser).callonLetBinding188,
																expr: &litMatcher{
																	pos:        position{line: 240, col: 5, offset: 6532},
																	val:        "List/last",
																	ignoreCase: false,
																	want:       "\"List/last\"",
																},
															},
															&actionExpr{
																pos: position{line: 241, col: 5, offset: 6573},
																run: (*parser).callonLetBinding190,
																expr: &litMatcher{
																	pos:        position{line: 241, col: 5, offset: 6573},
																	val:        "List/indexed",
																	ignoreCase: false,
																	want:       "\"List/indexed\"",
																},
															},
															&actionExpr{
																pos: position{line: 242, col: 5, offset: 6620},
																run: (*parser).callonLetBinding192,
																expr: &litMatcher{
																	pos:        position{line: 242, col: 5, offset: 6620},
																	val:        "List/reverse",
																	ignoreCase: false,
																	want:       "\"List/reverse\"",
																},
															},
															&actionExpr{
																pos: position{line: 243, col: 5, offset: 6667},
																run: (*parser).callonLetBinding194,
																expr: &litMatcher{
																	pos:        position{line: 243, col: 5, offset: 6667},
																	val:        "Optional/build",
																	ignoreCase: false,
																	want:       "\"Optional/build\"",
																},
															},
															&actionExpr{
																pos: position{line: 244, col: 5, offset: 6718},
																run: (*parser).callonLetBinding196,
																expr: &litMatcher{
																	pos:        position{line: 244, col: 5, offset: 6718},
																	val:        "Optional/fold",
																	ignoreCase: false,
																	want:       "\"Optional/fold\"",
																},
															},
															&actionExpr{
																pos: position{line: 245, col: 5, offset: 6767},
																run: (*parser).callonLetBinding198,
																expr: &litMatcher{
																	pos:        position{line: 245, col: 5, offset: 6767},
																	val:        "Text/show",
																	ignoreCase: false,
																	want:       "\"Text/show\"",
																},
															},
															&actionExpr{
																pos: position{line: 246, col: 5, offset: 6808},
																run: (*parser).callonLetBinding200,
																expr: &litMatcher{
																	pos:        position{line: 246, col: 5, offset: 6808},
																	val:        "Bool",
																	ignoreCase: false,
																	want:       "\"Bool\"",
																},
															},
															&actionExpr{
																pos: position{line: 247, col: 5, offset: 6840},
																run: (*parser).callonLetBinding202,
																expr: &litMatcher{
																	pos:        position{line: 247, col: 5, offset: 6840},
																	val:        "True",
																	ignoreCase: false,
																	want:       "\"True\"",
																},
															},
															&actionExpr{
																pos: position{line: 248, col: 5, offset: 6872},
																run: (*parser).callonLetBinding204,
																expr: &litMatcher{
																	pos:        position{line: 248, col: 5, offset: 6872},
																	val:        "False",
																	ignoreCase: false,
																	want:       "\"False\"",
																},
															},
															&actionExpr{
																pos: position{line: 249, col: 5, offset: 6906},
																run: (*parser).callonLetBinding206,
																expr: &litMatcher{
																	pos:        position{line: 249, col: 5, offset: 6906},
																	val:        "Optional",
																	ignoreCase: false,
																	want:       "\"Optional\"",
																},
															},
															&actionExpr{
																pos: position{line: 250, col: 5, offset: 6946},
																run: (*parser).callonLetBinding208,
																expr: &litMatcher{
																	pos:        position{line: 250, col: 5, offset: 6946},
																	val:        "Natural",
																	ignoreCase: false,
																	want:       "\"Natural\"",
																},
															},
															&actionExpr{
																pos: position{line: 251, col: 5, offset: 6984},
																run: (*parser).callonLetBinding210,
																expr: &litMatcher{
																	pos:        position{line: 251, col: 5, offset: 6984},
																	val:        "Integer",
																	ignoreCase: false,
																	want:       "\"Integer\"",
																},
															},
															&actionExpr{
																pos: position{line: 252, col: 5, offset: 7022},
																run: (*parser).callonLetBinding212,
																expr: &litMatcher{
																	pos:        position{line: 252, col: 5, offset: 7022},
																	val:        "Double",
																	ignoreCase: false,
																	want:       "\"Double\"",
																},
															},
															&actionExpr{
																pos: position{line: 253, col: 5, offset: 7058},
																run: (*parser).callonLetBinding214,
																expr: &litMatcher{
																	pos:        position{line: 253, col: 5, offset: 7058},
																	val:        "Text",
																	ignoreCase: false,
																	want:       "\"Text\"",
																},
															},
															&actionExpr{
																pos: position{line: 254, col: 5, offset: 7090},
																run: (*parser).callonLetBinding216,
																expr: &litMatcher{
																	pos:        position{line: 254, col: 5, offset: 7090},
																	val:        "List",
																	ignoreCase: false,
																	want:       "\"List\"",
																},
															},
															&actionExpr{
																pos: position{line: 255, col: 5, offset: 7122},
																run: (*parser).callonLetBinding218,
																expr: &litMatcher{
																	pos:        position{line: 255, col: 5, offset: 7122},
																	val:        "None",
																	ignoreCase: false,
																	want:       "\"None\"",
																},
															},
															&actionExpr{
																pos: position{line: 256, col: 5, offset: 7154},
																run: (*parser).callonLetBinding220,
																expr: &litMatcher{
																	pos:        position{line: 256, col: 5, offset: 7154},
																	val:        "Type",
																	ignoreCase: false,
																	want:       "\"Type\"",
																},
															},
															&actionExpr{
																pos: position{line: 257, col: 5, offset: 7186},
																run: (*parser).callonLetBinding222,
																expr: &litMatcher{
																	pos:        position{line: 257, col: 5, offset: 7186},
																	val:        "Kind",
																	ignoreCase: false,
																	want:       "\"Kind\"",
																},
															},
															&actionExpr{
																pos: position{line: 258, col: 5, offset: 7218},
																run: (*parser).callonLetBinding224,
																expr: &litMatcher{
																	pos:        position{line: 258, col: 5, offset: 7218},
																	val:        "Sort",
																	ignoreCase: false,
																	want:       "\"Sort\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 125, col: 29, offset: 3015},
													label: "label",
													expr: &choiceExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonLetBinding228,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonLetBinding232,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonLetBinding236,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonLetBinding239,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 278, col: 5, offset: 7577},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7254},
																									val:        "if",
																									ignoreCase: false,
																									want:       "\"if\"",
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 8, offset: 7268},
																									val:        "then",
																									ignoreCase: false,
																									want:       "\"then\"",
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 8, offset: 7284},
																									val:        "else",
																									ignoreCase: false,
																									want:       "\"else\"",
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 7, offset: 7299},
																									val:        "let",
																									ignoreCase: false,
																									want:       "\"let\"",
																								},
																								&litMatcher{
																									pos:        position{line: 264, col: 6, offset: 7312},
																									val:        "in",
																									ignoreCase: false,
																									want:       "\"in\"",
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7339},
																									val:        "using",
																									ignoreCase: false,
																									want:       "\"using\"",
																								},
																								&actionExpr{
																									pos: position{line: 268, col: 11, offset: 7377},
																									run: (*parser).callonLetBinding248,
																									expr: &seqExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 268, col: 11, offset: 7377},
																												val:        "missing",
																												ignoreCase: false,
																												want:       "\"missing\"",
																											},
																											&notExpr{
																												pos: position{line: 268, col: 21, offset: 7387},
																												expr: &charClassMatcher{
																													pos:        position{line: 111, col: 23, offset: 2469},
																													val:        "[_/-A-Za-z0-9]",
																													chars:      []rune{'_', '/', '-'},
																													ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 275, col: 10, offset: 7551},
																									val:        "assert",
																									ignoreCase: false,
																									want:       "\"assert\"",
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 6, offset: 7324},
																									val:        "as",
																									ignoreCase: false,
																									want:       "\"as\"",
																								},
																								&litMatcher{
																									pos:        position{line: 271, col: 12, offset: 7481},
																									val:        "Infinity",
																									ignoreCase: false,
																									want:       "\"Infinity\"",
																								},
																								&litMatcher{
																									pos:        position{line: 272, col: 7, offset: 7500},
																									val:        "NaN",
																									ignoreCase: false,
																									want:       "\"NaN\"",
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 9, offset: 7357},
																									val:        "merge",
																									ignoreCase: false,
																									want:       "\"merge\"",
																								},
																								&litMatcher{
																									pos:        position{line: 273, col: 8, offset: 7515},
																									val:        "Some",
																									ignoreCase: false,
																									want:       "\"Some\"",
																								},
																								&litMatcher{
																									pos:        position{line: 274, col: 9, offset: 7532},
																									val:        "toMap",
																									ignoreCase: false,
																									want:       "\"toMap\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 10, offset: 7927},
																									val:        "forall",
																									ignoreCase: false,
																									want:       "\"forall\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 21, offset: 7938},
																									val:        "‚àÄ",
																									ignoreCase: false,
																									want:       "\"‚àÄ\"",
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonLetBinding264,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 278, col: 5, offset: 7577},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7254},
																										val:        "if",
																										ignoreCase: false,
																										want:       "\"if\"",
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 8, offset: 7268},
																										val:        "then",
																										ignoreCase: false,
																										want:       "\"then\"",
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 8, offset: 7284},
																										val:        "else",
																										ignoreCase: false,
																										want:       "\"else\"",
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 7, offset: 7299},
																										val:        "let",
																										ignoreCase: false,
																										want:       "\"let\"",
																									},
																									&litMatcher{
																										pos:        position{line: 264, col: 6, offset: 7312},
																										val:        "in",
																										ignoreCase: false,
																										want:       "\"in\"",
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7339},
																										val:        "using",
																										ignoreCase: false,
																										want:       "\"using\"",
																									},
																									&actionExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										run: (*parser).callonLetBinding274,
																										expr: &seqExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 268, col: 11, offset: 7377},
																													val:        "missing",
																													ignoreCase: false,
																													want:       "\"missing\"",
																												},
																												&notExpr{
																													pos: position{line: 268, col: 21, offset: 7387},
																													expr: &charClassMatcher{
																														pos:        position{line: 111, col: 23, offset: 2469},
																														val:        "[_/-A-Za-z0-9]",
																														chars:      []rune{'_', '/', '-'},
																														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 275, col: 10, offset: 7551},
																										val:        "assert",
																										ignoreCase: false,
																										want:       "\"assert\"",
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 6, offset: 7324},
																										val:        "as",
																										ignoreCase: false,
																										want:       "\"as\"",
																									},
																									&litMatcher{
																										pos:        position{line: 271, col: 12, offset: 7481},
																										val:        "Infinity",
																										ignoreCase: false,
																										want:       "\"Infinity\"",
																									},
																									&litMatcher{
																										pos:        position{line: 272, col: 7, offset: 7500},
																										val:        "NaN",
																										ignoreCase: false,
																										want:       "\"NaN\"",
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 9, offset: 7357},
																										val:        "merge",
																										ignoreCase: false,
																										want:       "\"merge\"",
																									},
																									&litMatcher{
																										pos:        position{line: 273, col: 8, offset: 7515},
																										val:        "Some",
																										ignoreCase: false,
																										want:       "\"Some\"",
																									},
																									&litMatcher{
																										pos:        position{line: 274, col: 9, offset: 7532},
																										val:        "toMap",
																										ignoreCase: false,
																										want:       "\"toMap\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 10, offset: 7927},
																										val:        "forall",
																										ignoreCase: false,
																										want:       "\"forall\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 21, offset: 7938},
																										val:        "‚àÄ",
																										ignoreCase: false,
																										want:       "\"‚àÄ\"",
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 489, col: 44, offset: 13986},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 489, col: 46, offset: 13988},
							label: "a",
							expr: &zeroOrOneExpr{
								pos: position{line: 489, col: 48, offset: 13990},
								expr: &seqExpr{
									pos: position{line: 489, col: 49, offset: 13991},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 489, col: 49, offset: 13991},
											name: "Annotation",
										},
										&ruleRefExpr{
											pos:  position{line: 489, col: 60, offset: 14002},
											name: "_",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 490, col: 13, offset: 14018},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 17, offset: 14022},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 490, col: 19, offset: 14024},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 21, offset: 14026},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 32, offset: 14037},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "Expression",
			pos:  position{line: 505, col: 1, offset: 14346},
			expr: &choiceExpr{
				pos: position{line: 506, col: 7, offset: 14367},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 506, col: 7, offset: 14367},
						run: (*parser).callonExpression2,
						expr: &seqExpr{
							pos: position{line: 506, col: 7, offset: 14367},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 295, col: 10, offset: 7904},
									val:        "[\\\\Œª]",
									chars:      []rune{'\\', 'Œª'},
									ignoreCase: false,
									inverted:   false,
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 14, offset: 14374},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 16, offset: 14376},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 20, offset: 14380},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 506, col: 22, offset: 14382},
									label: "label",
									expr: &choiceExpr{
										pos: position{line: 124, col: 20, offset: 2921},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 124, col: 20, offset: 2921},
												run: (*parser).callonExpression10,
												expr: &seqExpr{
													pos: position{line: 124, col: 20, offset: 2921},
													exprs: []interface{}{
														&andExpr{
															pos: position{line: 124, col: 20, offset: 2921},
															expr: &seqExpr{
																pos: position{line: 124, col: 22, offset: 2923},
																exprs: []interface{}{
																	&choiceExpr{
																		pos: position{line: 223, col: 5, offset: 5717},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 223, col: 5, offset: 5717},
																				run: (*parser).callonExpression15,
																				expr: &litMatcher{
																					pos:        position{line: 223, col: 5, offset: 5717},
																					val:        "Natural/build",
																					ignoreCase: false,
																					want:       "\"Natural/build\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 224, col: 5, offset: 5766},
																				run: (*parser).callonExpression17,
																				expr: &litMatcher{
																					pos:        position{line: 224, col: 5, offset: 5766},
																					val:        "Natural/fold",
																					ignoreCase: false,
																					want:       "\"Natural/fold\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 225, col: 5, offset: 5813},
																				run: (*parser).callonExpression19,
																				expr: &litMatcher{
																					pos:        position{line: 225, col: 5, offset: 5813},
																					val:        "Natural/isZero",
																					ignoreCase: false,
																					want:       "\"Natural/isZero\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 226, col: 5, offset: 5864},
																				run: (*parser).callonExpression21,
																				expr: &litMatcher{
																					pos:        position{line: 226, col: 5, offset: 5864},
																					val:        "Natural/even",
																					ignoreCase: false,
																					want:       "\"Natural/even\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 227, col: 5, offset: 5911},
																				run: (*parser).callonExpression23,
																				expr: &litMatcher{
																					pos:        position{line: 227, col: 5, offset: 5911},
																					val:        "Natural/odd",
																					ignoreCase: false,
																					want:       "\"Natural/odd\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 228, col: 5, offset: 5956},
																				run: (*parser).callonExpression25,
																				expr: &litMatcher{
																					pos:        position{line: 228, col: 5, offset: 5956},
																					val:        "Natural/toInteger",
																					ignoreCase: false,
																					want:       "\"Natural/toInteger\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 229, col: 5, offset: 6013},
																				run: (*parser).callonExpression27,
																				expr: &litMatcher{
																					pos:        position{line: 229, col: 5, offset: 6013},
																					val:        "Natural/show",
																					ignoreCase: false,
																					want:       "\"Natural/show\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 230, col: 5, offset: 6060},
																				run: (*parser).callonExpression29,
																				expr: &litMatcher{
																					pos:        position{line: 230, col: 5, offset: 6060},
																					val:        "Natural/subtract",
																					ignoreCase: false,
																					want:       "\"Natural/subtract\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 231, col: 5, offset: 6115},
																				run: (*parser).callonExpression31,
																				expr: &litMatcher{
																					pos:        position{line: 231, col: 5, offset: 6115},
																					val:        "Integer/clamp",
																					ignoreCase: false,
																					want:       "\"Integer/clamp\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 232, col: 5, offset: 6164},
																				run: (*parser).callonExpression33,
																				expr: &litMatcher{
																					pos:        position{line: 232, col: 5, offset: 6164},
																					val:        "Integer/negate",
																					ignoreCase: false,
																					want:       "\"Integer/negate\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 233, col: 5, offset: 6215},
																				run: (*parser).callonExpression35,
																				expr: &litMatcher{
																					pos:        position{line: 233, col: 5, offset: 6215},
																					val:        "Integer/toDouble",
																					ignoreCase: false,
																					want:       "\"Integer/toDouble\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 234, col: 5, offset: 6270},
																				run: (*parser).callonExpression37,
																				expr: &litMatcher{
																					pos:        position{line: 234, col: 5, offset: 6270},
																					val:        "Integer/show",
																					ignoreCase: false,
																					want:       "\"Integer/show\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 235, col: 5, offset: 6317},
																				run: (*parser).callonExpression39,
																				expr: &litMatcher{
																					pos:        position{line: 235, col: 5, offset: 6317},
																					val:        "Double/show",
																					ignoreCase: false,
																					want:       "\"Double/show\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 236, col: 5, offset: 6362},
																				run: (*parser).callonExpression41,
																				expr: &litMatcher{
																					pos:        position{line: 236, col: 5, offset: 6362},
																					val:        "List/build",
																					ignoreCase: false,
																					want:       "\"List/build\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 237, col: 5, offset: 6405},
																				run: (*parser).callonExpression43,
																				expr: &litMatcher{
																					pos:        position{line: 237, col: 5, offset: 6405},
																					val:        "List/fold",
																					ignoreCase: false,
																					want:       "\"List/fold\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 238, col: 5, offset: 6446},
																				run: (*parser).callonExpression45,
																				expr: &litMatcher{
																					pos:        position{line: 238, col: 5, offset: 6446},
																					val:        "List/length",
																					ignoreCase: false,
																					want:       "\"List/length\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 239, col: 5, offset: 6491},
																				run: (*parser).callonExpression47,
																				expr: &litMatcher{
																					pos:        position{line: 239, col: 5, offset: 6491},
																					val:        "List/head",
																					ignoreCase: false,
																					want:       "\"List/head\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 240, col: 5, offset: 6532},
																				run: (*parser).callonExpression49,
																				expr: &litMatcher{
																					pos:        position{line: 240, col: 5, offset: 6532},
																					val:        "List/last",
																					ignoreCase: false,
																					want:       "\"List/last\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 241, col: 5, offset: 6573},
																				run: (*parser).callonExpression51,
																				expr: &litMatcher{
																					pos:        position{line: 241, col: 5, offset: 6573},
																					val:        "List/indexed",
																					ignoreCase: false,
																					want:       "\"List/indexed\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 242, col: 5, offset: 6620},
																				run: (*parser).callonExpression53,
																				expr: &litMatcher{
																					pos:        position{line: 242, col: 5, offset: 6620},
																					val:        "List/reverse",
																					ignoreCase: false,
																					want:       "\"List/reverse\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 243, col: 5, offset: 6667},
																				run: (*parser).callonExpression55,
																				expr: &litMatcher{
																					pos:        position{line: 243, col: 5, offset: 6667},
																					val:        "Optional/build",
																					ignoreCase: false,
																					want:       "\"Optional/build\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 244, col: 5, offset: 6718},
																				run: (*parser).callonExpression57,
																				expr: &litMatcher{
																					pos:        position{line: 244, col: 5, offset: 6718},
																					val:        "Optional/fold",
																					ignoreCase: false,
																					want:       "\"Optional/fold\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 245, col: 5, offset: 6767},
																				run: (*parser).callonExpression59,
																				expr: &litMatcher{
																					pos:        position{line: 245, col: 5, offset: 6767},
																					val:        "Text/show",
																					ignoreCase: false,
																					want:       "\"Text/show\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 246, col: 5, offset: 6808},
																				run: (*parser).callonExpression61,
																				expr: &litMatcher{
																					pos:        position{line: 246, col: 5, offset: 6808},
																					val:        "Bool",
																					ignoreCase: false,
																					want:       "\"Bool\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 247, col: 5, offset: 6840},
																				run: (*parser).callonExpression63,
																				expr: &litMatcher{
																					pos:        position{line: 247, col: 5, offset: 6840},
																					val:        "True",
																					ignoreCase: false,
																					want:       "\"True\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 248, col: 5, offset: 6872},
																				run: (*parser).callonExpression65,
																				expr: &litMatcher{
																					pos:        position{line: 248, col: 5, offset: 6872},
																					val:        "False",
																					ignoreCase: false,
																					want:       "\"False\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 249, col: 5, offset: 6906},
																				run: (*parser).callonExpression67,
																				expr: &litMatcher{
																					pos:        position{line: 249, col: 5, offset: 6906},
																					val:        "Optional",
																					ignoreCase: false,
																					want:       "\"Optional\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 250, col: 5, offset: 6946},
																				run: (*parser).callonExpression69,
																				expr: &litMatcher{
																					pos:        position{line: 250, col: 5, offset: 6946},
																					val:        "Natural",
																					ignoreCase: false,
																					want:       "\"Natural\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 251, col: 5, offset: 6984},
																				run: (*parser).callonExpression71,
																				expr: &litMatcher{
																					pos:        position{line: 251, col: 5, offset: 6984},
																					val:        "Integer",
																					ignoreCase: false,
																					want:       "\"Integer\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 252, col: 5, offset: 7022},
																				run: (*parser).callonExpression73,
																				expr: &litMatcher{
																					pos:        position{line: 252, col: 5, offset: 7022},
																					val:        "Double",
																					ignoreCase: false,
																					want:       "\"Double\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 253, col: 5, offset: 7058},
																				run: (*parser).callonExpression75,
																				expr: &litMatcher{
																					pos:        position{line: 253, col: 5, offset: 7058},
																					val:        "Text",
																					ignoreCase: false,
																					want:       "\"Text\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 254, col: 5, offset: 7090},
																				run: (*parser).callonExpression77,
																				expr: &litMatcher{
																					pos:        position{line: 254, col: 5, offset: 7090},
																					val:        "List",
																					ignoreCase: false,
																					want:       "\"List\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 255, col: 5, offset: 7122},
																				run: (*parser).callonExpression79,
																				expr: &litMatcher{
																					pos:        position{line: 255, col: 5, offset: 7122},
																					val:        "None",
																					ignoreCase: false,
																					want:       "\"None\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 256, col: 5, offset: 7154},
																				run: (*parser).callonExpression81,
																				expr: &litMatcher{
																					pos:        position{line: 256, col: 5, offset: 7154},
																					val:        "Type",
																					ignoreCase: false,
																					want:       "\"Type\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 257, col: 5, offset: 7186},
																				run: (*parser).callonExpression83,
																				expr: &litMatcher{
																					pos:        position{line: 257, col: 5, offset: 7186},
																					val:        "Kind",
																					ignoreCase: false,
																					want:       "\"Kind\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 258, col: 5, offset: 7218},
																				run: (*parser).callonExpression85,
																				expr: &litMatcher{
																					pos:        position{line: 258, col: 5, offset: 7218},
																					val:        "Sort",
																					ignoreCase: false,
																					want:       "\"Sort\"",
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 124, col: 52, offset: 2953},
															label: "label",
															expr: &choiceExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 121, col: 9, offset: 2803},
																		run: (*parser).callonExpression90,
																		expr: &seqExpr{
																			pos: position{line: 121, col: 9, offset: 2803},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 121, col: 9, offset: 2803},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 121, col: 13, offset: 2807},
																					label: "label",
																					expr: &actionExpr{
																						pos: position{line: 119, col: 15, offset: 2744},
																						run: (*parser).callonExpression94,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 119, col: 15, offset: 2744},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 19, offset: 2707},
																								val:        "[ -_a-~]",
																								ranges:     []rune{' ', '_', 'a', '~'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 121, col: 31, offset: 2825},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 122, col: 9, offset: 2859},
																		run: (*parser).callonExpression98,
																		expr: &labeledExpr{
																			pos:   position{line: 122, col: 9, offset: 2859},
																			label: "label",
																			expr: &choiceExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 112, col: 15, offset: 2500},
																						run: (*parser).callonExpression101,
																						expr: &seqExpr{
																							pos: position{line: 112, col: 15, offset: 2500},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 278, col: 5, offset: 7577},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 260, col: 6, offset: 7254},
																											val:        "if",
																											ignoreCase: false,
																											want:       "\"if\"",
																										},
																										&litMatcher{
																											pos:        position{line: 261, col: 8, offset: 7268},
																											val:        "then",
																											ignoreCase: false,
																											want:       "\"then\"",
																										},
																										&litMatcher{
																											pos:        position{line: 262, col: 8, offset: 7284},
																											val:        "else",
																											ignoreCase: false,
																											want:       "\"else\"",
																										},
																										&litMatcher{
																											pos:        position{line: 263, col: 7, offset: 7299},
																											val:        "let",
																											ignoreCase: false,
																											want:       "\"let\"",
																										},
																										&litMatcher{
																											pos:        position{line: 264, col: 6, offset: 7312},
																											val:        "in",
																											ignoreCase: false,
																											want:       "\"in\"",
																										},
																										&litMatcher{
																											pos:        position{line: 266, col: 9, offset: 7339},
																											val:        "using",
																											ignoreCase: false,
																											want:       "\"using\"",
																										},
																										&actionExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											run: (*parser).callonExpression110,
																											expr: &seqExpr{
																												pos: position{line: 268, col: 11, offset: 7377},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 268, col: 11, offset: 7377},
																														val:        "missing",
																														ignoreCase: false,
																														want:       "\"missing\"",
																													},
																													&notExpr{
																														pos: position{line: 268, col: 21, offset: 7387},
																														expr: &charClassMatcher{
																															pos:        position{line: 111, col: 23, offset: 2469},
																															val:        "[_/-A-Za-z0-9]",
																															chars:      []rune{'_', '/', '-'},
																															ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 275, col: 10, offset: 7551},
																											val:        "assert",
																											ignoreCase: false,
																											want:       "\"assert\"",
																										},
																										&litMatcher{
																											pos:        position{line: 265, col: 6, offset: 7324},
																											val:        "as",
																											ignoreCase: false,
																											want:       "\"as\"",
																										},
																										&litMatcher{
																											pos:        position{line: 271, col: 12, offset: 7481},
																											val:        "Infinity",
																											ignoreCase: false,
																											want:       "\"Infinity\"",
																										},
																										&litMatcher{
																											pos:        position{line: 272, col: 7, offset: 7500},
																											val:        "NaN",
																											ignoreCase: false,
																											want:       "\"NaN\"",
																										},
																										&litMatcher{
																											pos:        position{line: 267, col: 9, offset: 7357},
																											val:        "merge",
																											ignoreCase: false,
																											want:       "\"merge\"",
																										},
																										&litMatcher{
																											pos:        position{line: 273, col: 8, offset: 7515},
																											val:        "Some",
																											ignoreCase: false,
																											want:       "\"Some\"",
																										},
																										&litMatcher{
																											pos:        position{line: 274, col: 9, offset: 7532},
																											val:        "toMap",
																											ignoreCase: false,
																											want:       "\"toMap\"",
																										},
																										&litMatcher{
																											pos:        position{line: 296, col: 10, offset: 7927},
																											val:        "forall",
																											ignoreCase: false,
																											want:       "\"forall\"",
																										},
																										&litMatcher{
																											pos:        position{line: 296, col: 21, offset: 7938},
																											val:        "‚àÄ",
																											ignoreCase: false,
																											want:       "\"‚àÄ\"",
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 112, col: 23, offset: 2508},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 113, col: 13, offset: 2572},
																						run: (*parser).callonExpression126,
																						expr: &seqExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 113, col: 13, offset: 2572},
																									expr: &choiceExpr{
																										pos: position{line: 278, col: 5, offset: 7577},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 260, col: 6, offset: 7254},
																												val:        "if",
																												ignoreCase: false,
																												want:       "\"if\"",
																											},
																											&litMatcher{
																												pos:        position{line: 261, col: 8, offset: 7268},
																												val:        "then",
																												ignoreCase: false,
																												want:       "\"then\"",
																											},
																											&litMatcher{
																												pos:        position{line: 262, col: 8, offset: 7284},
																												val:        "else",
																												ignoreCase: false,
																												want:       "\"else\"",
																											},
																											&litMatcher{
																												pos:        position{line: 263, col: 7, offset: 7299},
																												val:        "let",
																												ignoreCase: false,
																												want:       "\"let\"",
																											},
																											&litMatcher{
																												pos:        position{line: 264, col: 6, offset: 7312},
																												val:        "in",
																												ignoreCase: false,
																												want:       "\"in\"",
																											},
																											&litMatcher{
																												pos:        position{line: 266, col: 9, offset: 7339},
																												val:        "using",
																												ignoreCase: false,
																												want:       "\"using\"",
																											},
																											&actionExpr{
																												pos: position{line: 268, col: 11, offset: 7377},
																												run: (*parser).callonExpression136,
																												expr: &seqExpr{
																													pos: position{line: 268, col: 11, offset: 7377},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 268, col: 11, offset: 7377},
																															val:        "missing",
																															ignoreCase: false,
																															want:       "\"missing\"",
																														},
																														&notExpr{
																															pos: position{line: 268, col: 21, offset: 7387},
																															expr: &charClassMatcher{
																																pos:        position{line: 111, col: 23, offset: 2469},
																																val:        "[_/-A-Za-z0-9]",
																																chars:      []rune{'_', '/', '-'},
																																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 275, col: 10, offset: 7551},
																												val:        "assert",
																												ignoreCase: false,
																												want:       "\"assert\"",
																											},
																											&litMatcher{
																												pos:        position{line: 265, col: 6, offset: 7324},
																												val:        "as",
																												ignoreCase: false,
																												want:       "\"as\"",
																											},
																											&litMatcher{
																												pos:        position{line: 271, col: 12, offset: 7481},
																												val:        "Infinity",
																												ignoreCase: false,
																												want:       "\"Infinity\"",
																											},
																											&litMatcher{
																												pos:        position{line: 272, col: 7, offset: 7500},
																												val:        "NaN",
																												ignoreCase: false,
																												want:       "\"NaN\"",
																											},
																											&litMatcher{
																												pos:        position{line: 267, col: 9, offset: 7357},
																												val:        "merge",
																												ignoreCase: false,
																												want:       "\"merge\"",
																											},
																											&litMatcher{
																												pos:        position{line: 273, col: 8, offset: 7515},
																												val:        "Some",
																												ignoreCase: false,
																												want:       "\"Some\"",
																											},
																											&litMatcher{
																												pos:        position{line: 274, col: 9, offset: 7532},
																												val:        "toMap",
																												ignoreCase: false,
																												want:       "\"toMap\"",
																											},
																											&litMatcher{
																												pos:        position{line: 296, col: 10, offset: 7927},
																												val:        "forall",
																												ignoreCase: false,
																												want:       "\"forall\"",
																											},
																											&litMatcher{
																												pos:        position{line: 296, col: 21, offset: 7938},
																												val:        "‚àÄ",
																												ignoreCase: false,
																												want:       "\"‚àÄ\"",
																											},
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 110, col: 24, offset: 2435},
																									val:        "[_A-Za-z]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 113, col: 43, offset: 2602},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 125, col: 19, offset: 3005},
												run: (*parser).callonExpression153,
												expr: &seqExpr{
													pos: position{line: 125, col: 19, offset: 3005},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 125, col: 19, offset: 3005},
															expr: &choiceExpr{
																pos: position{line: 223, col: 5, offset: 5717},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 223, col: 5, offset: 5717},
																		run: (*parser).callonExpression157,
																		expr: &litMatcher{
																			pos:        position{line: 223, col: 5, offset: 5717},
																			val:        "Natural/build",
																			ignoreCase: false,
																			want:       "\"Natural/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 224, col: 5, offset: 5766},
																		run: (*parser).callonExpression159,
																		expr: &litMatcher{
																			pos:        position{line: 224, col: 5, offset: 5766},
																			val:        "Natural/fold",
																			ignoreCase: false,
																			want:       "\"Natural/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 225, col: 5, offset: 5813},
																		run: (*parser).callonExpression161,
																		expr: &litMatcher{
																			pos:        position{line: 225, col: 5, offset: 5813},
																			val:        "Natural/isZero",
																			ignoreCase: false,
																			want:       "\"Natural/isZero\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 226, col: 5, offset: 5864},
																		run: (*parser).callonExpression163,
																		expr: &litMatcher{
																			pos:        position{line: 226, col: 5, offset: 5864},
																			val:        "Natural/even",
																			ignoreCase: false,
																			want:       "\"Natural/even\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 227, col: 5, offset: 5911},
																		run: (*parser).callonExpression165,
																		expr: &litMatcher{
																			pos:        position{line: 227, col: 5, offset: 5911},
																			val:        "Natural/odd",
																			ignoreCase: false,
																			want:       "\"Natural/odd\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 228, col: 5, offset: 5956},
																		run: (*parser).callonExpression167,
																		expr: &litMatcher{
																			pos:        position{line: 228, col: 5, offset: 5956},
																			val:        "Natural/toInteger",
																			ignoreCase: false,
																			want:       "\"Natural/toInteger\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 229, col: 5, offset: 6013},
																		run: (*parser).callonExpression169,
																		expr: &litMatcher{
																			pos:        position{line: 229, col: 5, offset: 6013},
																			val:        "Natural/show",
																			ignoreCase: false,
																			want:       "\"Natural/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 230, col: 5, offset: 6060},
																		run: (*parser).callonExpression171,
																		expr: &litMatcher{
																			pos:        position{line: 230, col: 5, offset: 6060},
																			val:        "Natural/subtract",
																			ignoreCase: false,
																			want:       "\"Natural/subtract\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 231, col: 5, offset: 6115},
																		run: (*parser).callonExpression173,
																		expr: &litMatcher{
																			pos:        position{line: 231, col: 5, offset: 6115},
																			val:        "Integer/clamp",
																			ignoreCase: false,
																			want:       "\"Integer/clamp\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 232, col: 5, offset: 6164},
																		run: (*parser).callonExpression175,
																		expr: &litMatcher{
																			pos:        position{line: 232, col: 5, offset: 6164},
																			val:        "Integer/negate",
																			ignoreCase: false,
																			want:       "\"Integer/negate\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 233, col: 5, offset: 6215},
																		run: (*parser).callonExpression177,
																		expr: &litMatcher{
																			pos:        position{line: 233, col: 5, offset: 6215},
																			val:        "Integer/toDouble",
																			ignoreCase: false,
																			want:       "\"Integer/toDouble\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 234, col: 5, offset: 6270},
																		run: (*parser).callonExpression179,
																		expr: &litMatcher{
																			pos:        position{line: 234, col: 5, offset: 6270},
																			val:        "Integer/show",
																			ignoreCase: false,
																			want:       "\"Integer/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 235, col: 5, offset: 6317},
																		run: (*parser).callonExpression181,
																		expr: &litMatcher{
																			pos:        position{line: 235, col: 5, offset: 6317},
																			val:        "Double/show",
																			ignoreCase: false,
																			want:       "\"Double/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 236, col: 5, offset: 6362},
																		run: (*parser).callonExpression183,
																		expr: &litMatcher{
																			pos:        position{line: 236, col: 5, offset: 6362},
																			val:        "List/build",
																			ignoreCase: false,
																			want:       "\"List/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 237, col: 5, offset: 6405},
																		run: (*parser).callonExpression185,
																		expr: &litMatcher{
																			pos:        position{line: 237, col: 5, offset: 6405},
																			val:        "List/fold",
																			ignoreCase: false,
																			want:       "\"List/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 238, col: 5, offset: 6446},
																		run: (*parser).callonExpression187,
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 5, offset: 6446},
																			val:        "List/length",
																			ignoreCase: false,
																			want:       "\"List/length\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 239, col: 5, offset: 6491},
																		run: (*parser).callonExpression189,
																		expr: &litMatcher{
																			pos:        position{line: 239, col: 5, offset: 6491},
																			val:        "List/head",
																			ignoreCase: false,
																			want:       "\"List/head\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 240, col: 5, offset: 6532},
																		run: (*parser).callonExpression191,
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 5, offset: 6532},
																			val:        "List/last",
																			ignoreCase: false,
																			want:       "\"List/last\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 241, col: 5, offset: 6573},
																		run: (*parser).callonExpression193,
																		expr: &litMatcher{
																			pos:        position{line: 241, col: 5, offset: 6573},
																			val:        "List/indexed",
																			ignoreCase: false,
																			want:       "\"List/indexed\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 242, col: 5, offset: 6620},
																		run: (*parser).callonExpression195,
																		expr: &litMatcher{
																			pos:        position{line: 242, col: 5, offset: 6620},
																			val:        "List/reverse",
																			ignoreCase: false,
																			want:       "\"List/reverse\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 243, col: 5, offset: 6667},
																		run: (*parser).callonExpression197,
																		expr: &litMatcher{
																			pos:        position{line: 243, col: 5, offset: 6667},
																			val:        "Optional/build",
																			ignoreCase: false,
																			want:       "\"Optional/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 244, col: 5, offset: 6718},
																		run: (*parser).callonExpression199,
																		expr: &litMatcher{
																			pos:        position{line: 244, col: 5, offset: 6718},
																			val:        "Optional/fold",
																			ignoreCase: false,
																			want:       "\"Optional/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 245, col: 5, offset: 6767},
																		run: (*parser).callonExpression201,
																		expr: &litMatcher{
																			pos:        position{line: 245, col: 5, offset: 6767},
																			val:        "Text/show",
																			ignoreCase: false,
																			want:       "\"Text/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 246, col: 5, offset: 6808},
																		run: (*parser).callonExpression203,
																		expr: &litMatcher{
																			pos:        position{line: 246, col: 5, offset: 6808},
																			val:        "Bool",
																			ignoreCase: false,
																			want:       "\"Bool\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 247, col: 5, offset: 6840},
																		run: (*parser).callonExpression205,
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 5, offset: 6840},
																			val:        "True",
																			ignoreCase: false,
																			want:       "\"True\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 248, col: 5, offset: 6872},
																		run: (*parser).callonExpression207,
																		expr: &litMatcher{
																			pos:        position{line: 248, col: 5, offset: 6872},
																			val:        "False",
																			ignoreCase: false,
																			want:       "\"False\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 249, col: 5, offset: 6906},
																		run: (*parser).callonExpression209,
																		expr: &litMatcher{
																			pos:        position{line: 249, col: 5, offset: 6906},
																			val:        "Optional",
																			ignoreCase: false,
																			want:       "\"Optional\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 250, col: 5, offset: 6946},
																		run: (*parser).callonExpression211,
																		expr: &litMatcher{
																			pos:        position{line: 250, col: 5, offset: 6946},
																			val:        "Natural",
																			ignoreCase: false,
																			want:       "\"Natural\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 251, col: 5, offset: 6984},
																		run: (*parser).callonExpression213,
																		expr: &litMatcher{
																			pos:        position{line: 251, col: 5, offset: 6984},
																			val:        "Integer",
																			ignoreCase: false,
																			want:       "\"Integer\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 252, col: 5, offset: 7022},
																		run: (*parser).callonExpression215,
																		expr: &litMatcher{
																			pos:        position{line: 252, col: 5, offset: 7022},
																			val:        "Double",
																			ignoreCase: false,
																			want:       "\"Double\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 253, col: 5, offset: 7058},
																		run: (*parser).callonExpression217,
																		expr: &litMatcher{
																			pos:        position{line: 253, col: 5, offset: 7058},
																			val:        "Text",
																			ignoreCase: false,
																			want:       "\"Text\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 254, col: 5, offset: 7090},
																		run: (*parser).callonExpression219,
																		expr: &litMatcher{
																			pos:        position{line: 254, col: 5, offset: 7090},
																			val:        "List",
																			ignoreCase: false,
																			want:       "\"List\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 255, col: 5, offset: 7122},
																		run: (*parser).callonExpression221,
																		expr: &litMatcher{
																			pos:        position{line: 255, col: 5, offset: 7122},
																			val:        "None",
																			ignoreCase: false,
																			want:       "\"None\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 256, col: 5, offset: 7154},
																		run: (*parser).callonExpression223,
																		expr: &litMatcher{
																			pos:        position{line: 256, col: 5, offset: 7154},
																			val:        "Type",
																			ignoreCase: false,
																			want:       "\"Type\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 257, col: 5, offset: 7186},
																		run: (*parser).callonExpression225,
																		expr: &litMatcher{
																			pos:        position{line: 257, col: 5, offset: 7186},
																			val:        "Kind",
																			ignoreCase: false,
																			want:       "\"Kind\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 258, col: 5, offset: 7218},
																		run: (*parser).callonExpression227,
																		expr: &litMatcher{
																			pos:        position{line: 258, col: 5, offset: 7218},
																			val:        "Sort",
																			ignoreCase: false,
																			want:       "\"Sort\"",
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 125, col: 29, offset: 3015},
															label: "label",
															expr: &choiceExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 121, col: 9, offset: 2803},
																		run: (*parser).callonExpression231,
																		expr: &seqExpr{
																			pos: position{line: 121, col: 9, offset: 2803},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 121, col: 9, offset: 2803},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 121, col: 13, offset: 2807},
																					label: "label",
																					expr: &actionExpr{
																						pos: position{line: 119, col: 15, offset: 2744},
																						run: (*parser).callonExpression235,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 119, col: 15, offset: 2744},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 19, offset: 2707},
																								val:        "[ -_a-~]",
																								ranges:     []rune{' ', '_', 'a', '~'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 121, col: 31, offset: 2825},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 122, col: 9, offset: 2859},
																		run: (*parser).callonExpression239,
																		expr: &labeledExpr{
																			pos:   position{line: 122, col: 9, offset: 2859},
																			label: "label",
																			expr: &choiceExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 112, col: 15, offset: 2500},
																						run: (*parser).callonExpression242,
																						expr: &seqExpr{
																							pos: position{line: 112, col: 15, offset: 2500},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 278, col: 5, offset: 7577},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 260, col: 6, offset: 7254},
																											val:        "if",
																											ignoreCase: false,
																											want:       "\"if\"",
																										},
																										&litMatcher{
																											pos:        position{line: 261, col: 8, offset: 7268},
																											val:        "then",
																											ignoreCase: false,
																											want:       "\"then\"",
																										},
																										&litMatcher{
																											pos:        position{line: 262, col: 8, offset: 7284},
																											val:        "else",
																											ignoreCase: false,
																											want:       "\"else\"",
																										},
																										&litMatcher{
																											pos:        position{line: 263, col: 7, offset: 7299},
																											val:        "let",
																											ignoreCase: false,
																											want:       "\"let\"",
																										},
																										&litMatcher{
																											pos:        position{line: 264, col: 6, offset: 7312},
																											val:        "in",
																											ignoreCase: false,
																											want:       "\"in\"",
																										},
																										&litMatcher{
																											pos:        position{line: 266, col: 9, offset: 7339},
																											val:        "using",
																											ignoreCase: false,
																											want:       "\"using\"",
																										},
																										&actionExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											run: (*parser).callonExpression251,
																											expr: &seqExpr{
																												pos: position{line: 268, col: 11, offset: 7377},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 268, col: 11, offset: 7377},
																														val:        "missing",
																														ignoreCase: false,
																														want:       "\"missing\"",
																													},
																													&notExpr{
																														pos: position{line: 268, col: 21, offset: 7387},
																														expr: &charClassMatcher{
																															pos:        position{line: 111, col: 23, offset: 2469},
																															val:        "[_/-A-Za-z0-9]",
																															chars:      []rune{'_', '/', '-'},
																															ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 275, col: 10, offset: 7551},
																											val:        "assert",
																											ignoreCase: false,
																											want:       "\"assert\"",
																										},
																										&litMatcher{
																											pos:        position{line: 265, col: 6, offset: 7324},
																											val:        "as",
																											ignoreCase: false,
																											want:       "\"as\"",
																										},
																										&litMatcher{
																											pos:        position{line: 271, col: 12, offset: 7481},
																											val:        "Infinity",
																											ignoreCase: false,
																											want:       "\"Infinity\"",
																										},
																										&litMatcher{
																											pos:        position{line: 272, col: 7, offset: 7500},
																											val:        "NaN",
																											ignoreCase: false,
																											want:       "\"NaN\"",
																										},
																										&litMatcher{
																											pos:        position{line: 267, col: 9, offset: 7357},
																											val:        "merge",
																											ignoreCase: false,
																											want:       "\"merge\"",
																										},
																										&litMatcher{
																											pos:        position{line: 273, col: 8, offset: 7515},
																											val:        "Some",
																											ignoreCase: false,
																											want:       "\"Some\"",
																										},
																										&litMatcher{
																											pos:        position{line: 274, col: 9, offset: 7532},
																											val:        "toMap",
																											ignoreCase: false,
																											want:       "\"toMap\"",
																										},
																										&litMatcher{
																											pos:        position{line: 296, col: 10, offset: 7927},
																											val:        "forall",
																											ignoreCase: false,
																											want:       "\"forall\"",
																										},
																										&litMatcher{
																											pos:        position{line: 296, col: 21, offset: 7938},
																											val:        "‚àÄ",
																											ignoreCase: false,
																											want:       "\"‚àÄ\"",
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 112, col: 23, offset: 2508},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 113, col: 13, offset: 2572},
																						run: (*parser).callonExpression267,
																						expr: &seqExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 113, col: 13, offset: 2572},
																									expr: &choiceExpr{
																										pos: position{line: 278, col: 5, offset: 7577},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 260, col: 6, offset: 7254},
																												val:        "if",
																												ignoreCase: false,
																												want:       "\"if\"",
																											},
																											&litMatcher{
																												pos:        position{line: 261, col: 8, offset: 7268},
																												val:        "then",
																												ignoreCase: false,
																												want:       "\"then\"",
																											},
																											&litMatcher{
																												pos:        position{line: 262, col: 8, offset: 7284},
																												val:        "else",
																												ignoreCase: false,
																												want:       "\"else\"",
																											},
																											&litMatcher{
																												pos:        position{line: 263, col: 7, offset: 7299},
																												val:        "let",
																												ignoreCase: false,
																												want:       "\"let\"",
																											},
																											&litMatcher{
																												pos:        position{line: 264, col: 6, offset: 7312},
																												val:        "in",
																												ignoreCase: false,
																												want:       "\"in\"",
																											},
																											&litMatcher{
																												pos:        position{line: 266, col: 9, offset: 7339},
																												val:        "using",
																												ignoreCase: false,
																												want:       "\"using\"",
																											},
																											&actionExpr{
																												pos: position{line: 268, col: 11, offset: 7377},
																												run: (*parser).callonExpression277,
																												expr: &seqExpr{
																													pos: position{line: 268, col: 11, offset: 7377},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 268, col: 11, offset: 7377},
																															val:        "missing",
																															ignoreCase: false,
																															want:       "\"missing\"",
																														},
																														&notExpr{
																															pos: position{line: 268, col: 21, offset: 7387},
																															expr: &charClassMatcher{
																																pos:        position{line: 111, col: 23, offset: 2469},
																																val:        "[_/-A-Za-z0-9]",
																																chars:      []rune{'_', '/', '-'},
																																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 275, col: 10, offset: 7551},
																												val:        "assert",
																												ignoreCase: false,
																												want:       "\"assert\"",
																											},
																											&litMatcher{
																												pos:        position{line: 265, col: 6, offset: 7324},
																												val:        "as",
																												ignoreCase: false,
																												want:       "\"as\"",
																											},
																											&litMatcher{
																												pos:        position{line: 271, col: 12, offset: 7481},
																												val:        "Infinity",
																												ignoreCase: false,
																												want:       "\"Infinity\"",
																											},
																											&litMatcher{
																												pos:        position{line: 272, col: 7, offset: 7500},
																												val:        "NaN",
																												ignoreCase: false,
																												want:       "\"NaN\"",
																											},
																											&litMatcher{
																												pos:        position{line: 267, col: 9, offset: 7357},
																												val:        "merge",
																												ignoreCase: false,
																												want:       "\"merge\"",
																											},
																											&litMatcher{
																												pos:        position{line: 273, col: 8, offset: 7515},
																												val:        "Some",
																												ignoreCase: false,
																												want:       "\"Some\"",
																											},
																											&litMatcher{
																												pos:        position{line: 274, col: 9, offset: 7532},
																												val:        "toMap",
																												ignoreCase: false,
																												want:       "\"toMap\"",
																											},
																											&litMatcher{
																												pos:        position{line: 296, col: 10, offset: 7927},
																												val:        "forall",
																												ignoreCase: false,
																												want:       "\"forall\"",
																											},
																											&litMatcher{
																												pos:        position{line: 296, col: 21, offset: 7938},
																												val:        "‚àÄ",
																												ignoreCase: false,
																												want:       "\"‚àÄ\"",
																											},
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 110, col: 24, offset: 2435},
																									val:        "[_A-Za-z]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 113, col: 43, offset: 2602},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 45, offset: 14405},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 47, offset: 14407},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 51, offset: 14411},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 506, col: 54, offset: 14414},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 506, col: 56, offset: 14416},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 67, offset: 14427},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 506, col: 69, offset: 14429},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 73, offset: 14433},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 297, col: 9, offset: 7954},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 297, col: 9, offset: 7954},
											val:        "->",
											ignoreCase: false,
											want:       "\"->\"",
										},
										&litMatcher{
											pos:        position{line: 297, col: 16, offset: 7961},
											val:        "‚Üí",
											ignoreCase: false,
											want:       "\"‚Üí\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 506, col: 81, offset: 14441},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 506, col: 83, offset: 14443},
									label: "body",
									expr: &ruleRefExpr{
										pos:  position{line: 506, col: 88, offset: 14448},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 509, col: 7, offset: 14560},
						run: (*parser).callonExpression308,
						expr: &seqExpr{
							pos: position{line: 509, col: 7, offset: 14560},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 260, col: 6, offset: 7254},
									val:        "if",
									ignoreCase: false,
									want:       "\"if\"",
								},
								&ruleRefExpr{
									pos:  position{line: 509, col: 10, offset: 14563},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 509, col: 13, offset: 14566},
									label: "cond",
									expr: &ruleRefExpr{
										pos:  position{line: 509, col: 18, offset: 14571},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 509, col: 29, offset: 14582},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 261, col: 8, offset: 7268},
									val:        "then",
									ignoreCase: false,
									want:       "\"then\"",
								},
								&ruleRefExpr{
									pos:  position{line: 509, col: 36, offset: 14589},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 509, col: 39, offset: 14592},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 509, col: 41, offset: 14594},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 509, col: 52, offset: 14605},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 262, col: 8, offset: 7284},
									val:        "else",
									ignoreCase: false,
									want:       "\"else\"",
								},
								&ruleRefExpr{
									pos:  position{line: 509, col: 59, offset: 14612},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 509, col: 62, offset: 14615},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 509, col: 64, offset: 14617},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 512, col: 7, offset: 14699},
						run: (*parser).callonExpression324,
						expr: &seqExpr{
							pos: position{line: 512, col: 7, offset: 14699},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 512, col: 7, offset: 14699},
									label: "bindings",
									expr: &oneOrMoreExpr{
										pos: position{line: 512, col: 16, offset: 14708},
										expr: &ruleRefExpr{
											pos:  position{line: 512, col: 16, offset: 14708},
											name: "LetBinding",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 264, col: 6, offset: 7312},
									val:        "in",
									ignoreCase: false,
									want:       "\"in\"",
								},
								&ruleRefExpr{
									pos:  position{line: 512, col: 31, offset: 14723},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 512, col: 34, offset: 14726},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 512, col: 36, offset: 14728},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 519, col: 7, offset: 14967},
						run: (*parser).callonExpression333,
						expr: &seqExpr{
							pos: position{line: 519, col: 7, offset: 14967},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 296, col: 10, offset: 7927},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 296, col: 10, offset: 7927},
											val:        "forall",
											ignoreCase: false,
											want:       "\"forall\"",
										},
										&litMatcher{
											pos:        position{line: 296, col: 21, offset: 7938},
											val:        "‚àÄ",
											ignoreCase: false,
											want:       "\"‚àÄ\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 14, offset: 14974},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 519, col: 16, offset: 14976},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 20, offset: 14980},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 519, col: 22, offset: 14982},
									label: "label",
									expr: &choiceExpr{
										pos: position{line: 124, col: 20, offset: 2921},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 124, col: 20, offset: 2921},
												run: (*parser).callonExpression343,
												expr: &seqExpr{
													pos: position{line: 124, col: 20, offset: 2921},
													exprs: []interface{}{
														&andExpr{
															pos: position{line: 124, col: 20, offset: 2921},
															expr: &seqExpr{
																pos: position{line: 124, col: 22, offset: 2923},
																exprs: []interface{}{
																	&choiceExpr{
																		pos: position{line: 223, col: 5, offset: 5717},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 223, col: 5, offset: 5717},
																				run: (*parser).callonExpression348,
																				expr: &litMatcher{
																					pos:        position{line: 223, col: 5, offset: 5717},
																					val:        "Natural/build",
																					ignoreCase: false,
																					want:       "\"Natural/build\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 224, col: 5, offset: 5766},
																				run: (*parser).callonExpression350,
																				expr: &litMatcher{
																					pos:        position{line: 224, col: 5, offset: 5766},
																					val:        "Natural/fold",
																					ignoreCase: false,
																					want:       "\"Natural/fold\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 225, col: 5, offset: 5813},
																				run: (*parser).callonExpression352,
																				expr: &litMatcher{
																					pos:        position{line: 225, col: 5, offset: 5813},
																					val:        "Natural/isZero",
																					ignoreCase: false,
																					want:       "\"Natural/isZero\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 226, col: 5, offset: 5864},
																				run: (*parser).callonExpression354,
																				expr: &litMatcher{
																					pos:        position{line: 226, col: 5, offset: 5864},
																					val:        "Natural/even",
																					ignoreCase: false,
																					want:       "\"Natural/even\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 227, col: 5, offset: 5911},
																				run: (*parser).callonExpression356,
																				expr: &litMatcher{
																					pos:        position{line: 227, col: 5, offset: 5911},
																					val:        "Natural/odd",
																					ignoreCase: false,
																					want:       "\"Natural/odd\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 228, col: 5, offset: 5956},
																				run: (*parser).callonExpression358,
																				expr: &litMatcher{
																					pos:        position{line: 228, col: 5, offset: 5956},
																					val:        "Natural/toInteger",
																					ignoreCase: false,
																					want:       "\"Natural/toInteger\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 229, col: 5, offset: 6013},
																				run: (*parser).callonExpression360,
																				expr: &litMatcher{
																					pos:        position{line: 229, col: 5, offset: 6013},
																					val:        "Natural/show",
																					ignoreCase: false,
																					want:       "\"Natural/show\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 230, col: 5, offset: 6060},
																				run: (*parser).callonExpression362,
																				expr: &litMatcher{
																					pos:        position{line: 230, col: 5, offset: 6060},
																					val:        "Natural/subtract",
																					ignoreCase: false,
																					want:       "\"Natural/subtract\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 231, col: 5, offset: 6115},
																				run: (*parser).callonExpression364,
																				expr: &litMatcher{
																					pos:        position{line: 231, col: 5, offset: 6115},
																					val:        "Integer/clamp",
																					ignoreCase: false,
																					want:       "\"Integer/clamp\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 232, col: 5, offset: 6164},
																				run: (*parser).callonExpression366,
																				expr: &litMatcher{
																					pos:        position{line: 232, col: 5, offset: 6164},
																					val:        "Integer/negate",
																					ignoreCase: false,
																					want:       "\"Integer/negate\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 233, col: 5, offset: 6215},
																				run: (*parser).callonExpression368,
																				expr: &litMatcher{
																					pos:        position{line: 233, col: 5, offset: 6215},
																					val:        "Integer/toDouble",
																					ignoreCase: false,
																					want:       "\"Integer/toDouble\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 234, col: 5, offset: 6270},
																				run: (*parser).callonExpression370,
																				expr: &litMatcher{
																					pos:        position{line: 234, col: 5, offset: 6270},
																					val:        "Integer/show",
																					ignoreCase: false,
																					want:       "\"Integer/show\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 235, col: 5, offset: 6317},
																				run: (*parser).callonExpression372,
																				expr: &litMatcher{
																					pos:        position{line: 235, col: 5, offset: 6317},
																					val:        "Double/show",
																					ignoreCase: false,
																					want:       "\"Double/show\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 236, col: 5, offset: 6362},
																				run: (*parser).callonExpression374,
																				expr: &litMatcher{
																					pos:        position{line: 236, col: 5, offset: 6362},
																					val:        "List/build",
																					ignoreCase: false,
																					want:       "\"List/build\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 237, col: 5, offset: 6405},
																				run: (*parser).callonExpression376,
																				expr: &litMatcher{
																					pos:        position{line: 237, col: 5, offset: 6405},
																					val:        "List/fold",
																					ignoreCase: false,
																					want:       "\"List/fold\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 238, col: 5, offset: 6446},
																				run: (*parser).callonExpression378,
																				expr: &litMatcher{
																					pos:        position{line: 238, col: 5, offset: 6446},
																					val:        "List/length",
																					ignoreCase: false,
																					want:       "\"List/length\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 239, col: 5, offset: 6491},
																				run: (*parser).callonExpression380,
																				expr: &litMatcher{
																					pos:        position{line: 239, col: 5, offset: 6491},
																					val:        "List/head",
																					ignoreCase: false,
																					want:       "\"List/head\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 240, col: 5, offset: 6532},
																				run: (*parser).callonExpression382,
																				expr: &litMatcher{
																					pos:        position{line: 240, col: 5, offset: 6532},
																					val:        "List/last",
																					ignoreCase: false,
																					want:       "\"List/last\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 241, col: 5, offset: 6573},
																				run: (*parser).callonExpression384,
																				expr: &litMatcher{
																					pos:        position{line: 241, col: 5, offset: 6573},
																					val:        "List/indexed",
																					ignoreCase: false,
																					want:       "\"List/indexed\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 242, col: 5, offset: 6620},
																				run: (*parser).callonExpression386,
																				expr: &litMatcher{
																					pos:        position{line: 242, col: 5, offset: 6620},
																					val:        "List/reverse",
																					ignoreCase: false,
																					want:       "\"List/reverse\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 243, col: 5, offset: 6667},
																				run: (*parser).callonExpression388,
																				expr: &litMatcher{
																					pos:        position{line: 243, col: 5, offset: 6667},
																					val:        "Optional/build",
																					ignoreCase: false,
																					want:       "\"Optional/build\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 244, col: 5, offset: 6718},
																				run: (*parser).callonExpression390,
																				expr: &litMatcher{
																					pos:        position{line: 244, col: 5, offset: 6718},
																					val:        "Optional/fold",
																					ignoreCase: false,
																					want:       "\"Optional/fold\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 245, col: 5, offset: 6767},
																				run: (*parser).callonExpression392,
																				expr: &litMatcher{
																					pos:        position{line: 245, col: 5, offset: 6767},
																					val:        "Text/show",
																					ignoreCase: false,
																					want:       "\"Text/show\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 246, col: 5, offset: 6808},
																				run: (*parser).callonExpression394,
																				expr: &litMatcher{
																					pos:        position{line: 246, col: 5, offset: 6808},
																					val:        "Bool",
																					ignoreCase: false,
																					want:       "\"Bool\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 247, col: 5, offset: 6840},
																				run: (*parser).callonExpression396,
																				expr: &litMatcher{
																					pos:        position{line: 247, col: 5, offset: 6840},
																					val:        "True",
																					ignoreCase: false,
																					want:       "\"True\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 248, col: 5, offset: 6872},
																				run: (*parser).callonExpression398,
																				expr: &litMatcher{
																					pos:        position{line: 248, col: 5, offset: 6872},
																					val:        "False",
																					ignoreCase: false,
																					want:       "\"False\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 249, col: 5, offset: 6906},
																				run: (*parser).callonExpression400,
																				expr: &litMatcher{
																					pos:        position{line: 249, col: 5, offset: 6906},
																					val:        "Optional",
																					ignoreCase: false,
																					want:       "\"Optional\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 250, col: 5, offset: 6946},
																				run: (*parser).callonExpression402,
																				expr: &litMatcher{
																					pos:        position{line: 250, col: 5, offset: 6946},
																					val:        "Natural",
																					ignoreCase: false,
																					want:       "\"Natural\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 251, col: 5, offset: 6984},
																				run: (*parser).callonExpression404,
																				expr: &litMatcher{
																					pos:        position{line: 251, col: 5, offset: 6984},
																					val:        "Integer",
																					ignoreCase: false,
																					want:       "\"Integer\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 252, col: 5, offset: 7022},
																				run: (*parser).callonExpression406,
																				expr: &litMatcher{
																					pos:        position{line: 252, col: 5, offset: 7022},
																					val:        "Double",
																					ignoreCase: false,
																					want:       "\"Double\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 253, col: 5, offset: 7058},
																				run: (*parser).callonExpression408,
																				expr: &litMatcher{
																					pos:        position{line: 253, col: 5, offset: 7058},
																					val:        "Text",
																					ignoreCase: false,
																					want:       "\"Text\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 254, col: 5, offset: 7090},
																				run: (*parser).callonExpression410,
																				expr: &litMatcher{
																					pos:        position{line: 254, col: 5, offset: 7090},
																					val:        "List",
																					ignoreCase: false,
																					want:       "\"List\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 255, col: 5, offset: 7122},
																				run: (*parser).callonExpression412,
																				expr: &litMatcher{
																					pos:        position{line: 255, col: 5, offset: 7122},
																					val:        "None",
																					ignoreCase: false,
																					want:       "\"None\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 256, col: 5, offset: 7154},
																				run: (*parser).callonExpression414,
																				expr: &litMatcher{
																					pos:        position{line: 256, col: 5, offset: 7154},
																					val:        "Type",
																					ignoreCase: false,
																					want:       "\"Type\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 257, col: 5, offset: 7186},
																				run: (*parser).callonExpression416,
																				expr: &litMatcher{
																					pos:        position{line: 257, col: 5, offset: 7186},
																					val:        "Kind",
																					ignoreCase: false,
																					want:       "\"Kind\"",
																				},
																			},
																			&actionExpr{
																				pos: position{line: 258, col: 5, offset: 7218},
																				run: (*parser).callonExpression418,
																				expr: &litMatcher{
																					pos:        position{line: 258, col: 5, offset: 7218},
																					val:        "Sort",
																					ignoreCase: false,
																					want:       "\"Sort\"",
																				},
																			},
																		},
																	},
																	&charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 124, col: 52, offset: 2953},
															label: "label",
															expr: &choiceExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 121, col: 9, offset: 2803},
																		run: (*parser).callonExpression423,
																		expr: &seqExpr{
																			pos: position{line: 121, col: 9, offset: 2803},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 121, col: 9, offset: 2803},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 121, col: 13, offset: 2807},
																					label: "label",
																					expr: &actionExpr{
																						pos: position{line: 119, col: 15, offset: 2744},
																						run: (*parser).callonExpression427,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 119, col: 15, offset: 2744},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 19, offset: 2707},
																								val:        "[ -_a-~]",
																								ranges:     []rune{' ', '_', 'a', '~'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 121, col: 31, offset: 2825},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 122, col: 9, offset: 2859},
																		run: (*parser).callonExpression431,
																		expr: &labeledExpr{
																			pos:   position{line: 122, col: 9, offset: 2859},
																			label: "label",
																			expr: &choiceExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 112, col: 15, offset: 2500},
																						run: (*parser).callonExpression434,
																						expr: &seqExpr{
																							pos: position{line: 112, col: 15, offset: 2500},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 278, col: 5, offset: 7577},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 260, col: 6, offset: 7254},
																											val:        "if",
																											ignoreCase: false,
																											want:       "\"if\"",
																										},
																										&litMatcher{
																											pos:        position{line: 261, col: 8, offset: 7268},
																											val:        "then",
																											ignoreCase: false,
																											want:       "\"then\"",
																										},
																										&litMatcher{
																											pos:        position{line: 262, col: 8, offset: 7284},
																											val:        "else",
																											ignoreCase: false,
																											want:       "\"else\"",
																										},
																										&litMatcher{
																											pos:        position{line: 263, col: 7, offset: 7299},
																											val:        "let",
																											ignoreCase: false,
																											want:       "\"let\"",
																										},
																										&litMatcher{
																											pos:        position{line: 264, col: 6, offset: 7312},
																											val:        "in",
																											ignoreCase: false,
																											want:       "\"in\"",
																										},
																										&litMatcher{
																											pos:        position{line: 266, col: 9, offset: 7339},
																											val:        "using",
																											ignoreCase: false,
																											want:       "\"using\"",
																										},
																										&actionExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											run: (*parser).callonExpression443,
																											expr: &seqExpr{
																												pos: position{line: 268, col: 11, offset: 7377},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 268, col: 11, offset: 7377},
																														val:        "missing",
																														ignoreCase: false,
																														want:       "\"missing\"",
																													},
																													&notExpr{
																														pos: position{line: 268, col: 21, offset: 7387},
																														expr: &charClassMatcher{
																															pos:        position{line: 111, col: 23, offset: 2469},
																															val:        "[_/-A-Za-z0-9]",
																															chars:      []rune{'_', '/', '-'},
																															ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 275, col: 10, offset: 7551},
																											val:        "assert",
																											ignoreCase: false,
																											want:       "\"assert\"",
																										},
																										&litMatcher{
																											pos:        position{line: 265, col: 6, offset: 7324},
																											val:        "as",
																											ignoreCase: false,
																											want:       "\"as\"",
																										},
																										&litMatcher{
																											pos:        position{line: 271, col: 12, offset: 7481},
																											val:        "Infinity",
																											ignoreCase: false,
																											want:       "\"Infinity\"",
																										},
																										&litMatcher{
																											pos:        position{line: 272, col: 7, offset: 7500},
																											val:        "NaN",
																											ignoreCase: false,
																											want:       "\"NaN\"",
																										},
																										&litMatcher{
																											pos:        position{line: 267, col: 9, offset: 7357},
																											val:        "merge",
																											ignoreCase: false,
																											want:       "\"merge\"",
																										},
																										&litMatcher{
																											pos:        position{line: 273, col: 8, offset: 7515},
																											val:        "Some",
																											ignoreCase: false,
																											want:       "\"Some\"",
																										},
																										&litMatcher{
																											pos:        position{line: 274, col: 9, offset: 7532},
																											val:        "toMap",
																											ignoreCase: false,
																											want:       "\"toMap\"",
																										},
																										&litMatcher{
																											pos:        position{line: 296, col: 10, offset: 7927},
																											val:        "forall",
																											ignoreCase: false,
																											want:       "\"forall\"",
																										},
																										&litMatcher{
																											pos:        position{line: 296, col: 21, offset: 7938},
																											val:        "‚àÄ",
																											ignoreCase: false,
																											want:       "\"‚àÄ\"",
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 112, col: 23, offset: 2508},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 113, col: 13, offset: 2572},
																						run: (*parser).callonExpression459,
																						expr: &seqExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 113, col: 13, offset: 2572},
																									expr: &choiceExpr{
																										pos: position{line: 278, col: 5, offset: 7577},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 260, col: 6, offset: 7254},
																												val:        "if",
																												ignoreCase: false,
																												want:       "\"if\"",
																											},
																											&litMatcher{
																												pos:        position{line: 261, col: 8, offset: 7268},
																												val:        "then",
																												ignoreCase: false,
																												want:       "\"then\"",
																											},
																											&litMatcher{
																												pos:        position{line: 262, col: 8, offset: 7284},
																												val:        "else",
																												ignoreCase: false,
																												want:       "\"else\"",
																											},
																											&litMatcher{
																												pos:        position{line: 263, col: 7, offset: 7299},
																												val:        "let",
																												ignoreCase: false,
																												want:       "\"let\"",
																											},
																											&litMatcher{
																												pos:        position{line: 264, col: 6, offset: 7312},
																												val:        "in",
																												ignoreCase: false,
																												want:       "\"in\"",
																											},
																											&litMatcher{
																												pos:        position{line: 266, col: 9, offset: 7339},
																												val:        "using",
																												ignoreCase: false,
																												want:       "\"using\"",
																											},
																											&actionExpr{
																												pos: position{line: 268, col: 11, offset: 7377},
																												run: (*parser).callonExpression469,
																												expr: &seqExpr{
																													pos: position{line: 268, col: 11, offset: 7377},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 268, col: 11, offset: 7377},
																															val:        "missing",
																															ignoreCase: false,
																															want:       "\"missing\"",
																														},
																														&notExpr{
																															pos: position{line: 268, col: 21, offset: 7387},
																															expr: &charClassMatcher{
																																pos:        position{line: 111, col: 23, offset: 2469},
																																val:        "[_/-A-Za-z0-9]",
																																chars:      []rune{'_', '/', '-'},
																																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 275, col: 10, offset: 7551},
																												val:        "assert",
																												ignoreCase: false,
																												want:       "\"assert\"",
																											},
																											&litMatcher{
																												pos:        position{line: 265, col: 6, offset: 7324},
																												val:        "as",
																												ignoreCase: false,
																												want:       "\"as\"",
																											},
																											&litMatcher{
																												pos:        position{line: 271, col: 12, offset: 7481},
																												val:        "Infinity",
																												ignoreCase: false,
																												want:       "\"Infinity\"",
																											},
																											&litMatcher{
																												pos:        position{line: 272, col: 7, offset: 7500},
																												val:        "NaN",
																												ignoreCase: false,
																												want:       "\"NaN\"",
																											},
																											&litMatcher{
																												pos:        position{line: 267, col: 9, offset: 7357},
																												val:        "merge",
																												ignoreCase: false,
																												want:       "\"merge\"",
																											},
																											&litMatcher{
																												pos:        position{line: 273, col: 8, offset: 7515},
																												val:        "Some",
																												ignoreCase: false,
																												want:       "\"Some\"",
																											},
																											&litMatcher{
																												pos:        position{line: 274, col: 9, offset: 7532},
																												val:        "toMap",
																												ignoreCase: false,
																												want:       "\"toMap\"",
																											},
																											&litMatcher{
																												pos:        position{line: 296, col: 10, offset: 7927},
																												val:        "forall",
																												ignoreCase: false,
																												want:       "\"forall\"",
																											},
																											&litMatcher{
																												pos:        position{line: 296, col: 21, offset: 7938},
																												val:        "‚àÄ",
																												ignoreCase: false,
																												want:       "\"‚àÄ\"",
																											},
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 110, col: 24, offset: 2435},
																									val:        "[_A-Za-z]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 113, col: 43, offset: 2602},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 125, col: 19, offset: 3005},
												run: (*parser).callonExpression486,
												expr: &seqExpr{
													pos: position{line: 125, col: 19, offset: 3005},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 125, col: 19, offset: 3005},
															expr: &choiceExpr{
																pos: position{line: 223, col: 5, offset: 5717},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 223, col: 5, offset: 5717},
																		run: (*parser).callonExpression490,
																		expr: &litMatcher{
																			pos:        position{line: 223, col: 5, offset: 5717},
																			val:        "Natural/build",
																			ignoreCase: false,
																			want:       "\"Natural/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 224, col: 5, offset: 5766},
																		run: (*parser).callonExpression492,
																		expr: &litMatcher{
																			pos:        position{line: 224, col: 5, offset: 5766},
																			val:        "Natural/fold",
																			ignoreCase: false,
																			want:       "\"Natural/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 225, col: 5, offset: 5813},
																		run: (*parser).callonExpression494,
																		expr: &litMatcher{
																			pos:        position{line: 225, col: 5, offset: 5813},
																			val:        "Natural/isZero",
																			ignoreCase: false,
																			want:       "\"Natural/isZero\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 226, col: 5, offset: 5864},
																		run: (*parser).callonExpression496,
																		expr: &litMatcher{
																			pos:        position{line: 226, col: 5, offset: 5864},
																			val:        "Natural/even",
																			ignoreCase: false,
																			want:       "\"Natural/even\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 227, col: 5, offset: 5911},
																		run: (*parser).callonExpression498,
																		expr: &litMatcher{
																			pos:        position{line: 227, col: 5, offset: 5911},
																			val:        "Natural/odd",
																			ignoreCase: false,
																			want:       "\"Natural/odd\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 228, col: 5, offset: 5956},
																		run: (*parser).callonExpression500,
																		expr: &litMatcher{
																			pos:        position{line: 228, col: 5, offset: 5956},
																			val:        "Natural/toInteger",
																			ignoreCase: false,
																			want:       "\"Natural/toInteger\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 229, col: 5, offset: 6013},
																		run: (*parser).callonExpression502,
																		expr: &litMatcher{
																			pos:        position{line: 229, col: 5, offset: 6013},
																			val:        "Natural/show",
																			ignoreCase: false,
																			want:       "\"Natural/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 230, col: 5, offset: 6060},
																		run: (*parser).callonExpression504,
																		expr: &litMatcher{
																			pos:        position{line: 230, col: 5, offset: 6060},
																			val:        "Natural/subtract",
																			ignoreCase: false,
																			want:       "\"Natural/subtract\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 231, col: 5, offset: 6115},
																		run: (*parser).callonExpression506,
																		expr: &litMatcher{
																			pos:        position{line: 231, col: 5, offset: 6115},
																			val:        "Integer/clamp",
																			ignoreCase: false,
																			want:       "\"Integer/clamp\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 232, col: 5, offset: 6164},
																		run: (*parser).callonExpression508,
																		expr: &litMatcher{
																			pos:        position{line: 232, col: 5, offset: 6164},
																			val:        "Integer/negate",
																			ignoreCase: false,
																			want:       "\"Integer/negate\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 233, col: 5, offset: 6215},
																		run: (*parser).callonExpression510,
																		expr: &litMatcher{
																			pos:        position{line: 233, col: 5, offset: 6215},
																			val:        "Integer/toDouble",
																			ignoreCase: false,
																			want:       "\"Integer/toDouble\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 234, col: 5, offset: 6270},
																		run: (*parser).callonExpression512,
																		expr: &litMatcher{
																			pos:        position{line: 234, col: 5, offset: 6270},
																			val:        "Integer/show",
																			ignoreCase: false,
																			want:       "\"Integer/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 235, col: 5, offset: 6317},
																		run: (*parser).callonExpression514,
																		expr: &litMatcher{
																			pos:        position{line: 235, col: 5, offset: 6317},
																			val:        "Double/show",
																			ignoreCase: false,
																			want:       "\"Double/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 236, col: 5, offset: 6362},
																		run: (*parser).callonExpression516,
																		expr: &litMatcher{
																			pos:        position{line: 236, col: 5, offset: 6362},
																			val:        "List/build",
																			ignoreCase: false,
																			want:       "\"List/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 237, col: 5, offset: 6405},
																		run: (*parser).callonExpression518,
																		expr: &litMatcher{
																			pos:        position{line: 237, col: 5, offset: 6405},
																			val:        "List/fold",
																			ignoreCase: false,
																			want:       "\"List/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 238, col: 5, offset: 6446},
																		run: (*parser).callonExpression520,
																		expr: &litMatcher{
																			pos:        position{line: 238, col: 5, offset: 6446},
																			val:        "List/length",
																			ignoreCase: false,
																			want:       "\"List/length\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 239, col: 5, offset: 6491},
																		run: (*parser).callonExpression522,
																		expr: &litMatcher{
																			pos:        position{line: 239, col: 5, offset: 6491},
																			val:        "List/head",
																			ignoreCase: false,
																			want:       "\"List/head\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 240, col: 5, offset: 6532},
																		run: (*parser).callonExpression524,
																		expr: &litMatcher{
																			pos:        position{line: 240, col: 5, offset: 6532},
																			val:        "List/last",
																			ignoreCase: false,
																			want:       "\"List/last\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 241, col: 5, offset: 6573},
																		run: (*parser).callonExpression526,
																		expr: &litMatcher{
																			pos:        position{line: 241, col: 5, offset: 6573},
																			val:        "List/indexed",
																			ignoreCase: false,
																			want:       "\"List/indexed\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 242, col: 5, offset: 6620},
																		run: (*parser).callonExpression528,
																		expr: &litMatcher{
																			pos:        position{line: 242, col: 5, offset: 6620},
																			val:        "List/reverse",
																			ignoreCase: false,
																			want:       "\"List/reverse\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 243, col: 5, offset: 6667},
																		run: (*parser).callonExpression530,
																		expr: &litMatcher{
																			pos:        position{line: 243, col: 5, offset: 6667},
																			val:        "Optional/build",
																			ignoreCase: false,
																			want:       "\"Optional/build\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 244, col: 5, offset: 6718},
																		run: (*parser).callonExpression532,
																		expr: &litMatcher{
																			pos:        position{line: 244, col: 5, offset: 6718},
																			val:        "Optional/fold",
																			ignoreCase: false,
																			want:       "\"Optional/fold\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 245, col: 5, offset: 6767},
																		run: (*parser).callonExpression534,
																		expr: &litMatcher{
																			pos:        position{line: 245, col: 5, offset: 6767},
																			val:        "Text/show",
																			ignoreCase: false,
																			want:       "\"Text/show\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 246, col: 5, offset: 6808},
																		run: (*parser).callonExpression536,
																		expr: &litMatcher{
																			pos:        position{line: 246, col: 5, offset: 6808},
																			val:        "Bool",
																			ignoreCase: false,
																			want:       "\"Bool\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 247, col: 5, offset: 6840},
																		run: (*parser).callonExpression538,
																		expr: &litMatcher{
																			pos:        position{line: 247, col: 5, offset: 6840},
																			val:        "True",
																			ignoreCase: false,
																			want:       "\"True\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 248, col: 5, offset: 6872},
																		run: (*parser).callonExpression540,
																		expr: &litMatcher{
																			pos:        position{line: 248, col: 5, offset: 6872},
																			val:        "False",
																			ignoreCase: false,
																			want:       "\"False\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 249, col: 5, offset: 6906},
																		run: (*parser).callonExpression542,
																		expr: &litMatcher{
																			pos:        position{line: 249, col: 5, offset: 6906},
																			val:        "Optional",
																			ignoreCase: false,
																			want:       "\"Optional\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 250, col: 5, offset: 6946},
																		run: (*parser).callonExpression544,
																		expr: &litMatcher{
																			pos:        position{line: 250, col: 5, offset: 6946},
																			val:        "Natural",
																			ignoreCase: false,
																			want:       "\"Natural\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 251, col: 5, offset: 6984},
																		run: (*parser).callonExpression546,
																		expr: &litMatcher{
																			pos:        position{line: 251, col: 5, offset: 6984},
																			val:        "Integer",
																			ignoreCase: false,
																			want:       "\"Integer\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 252, col: 5, offset: 7022},
																		run: (*parser).callonExpression548,
																		expr: &litMatcher{
																			pos:        position{line: 252, col: 5, offset: 7022},
																			val:        "Double",
																			ignoreCase: false,
																			want:       "\"Double\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 253, col: 5, offset: 7058},
																		run: (*parser).callonExpression550,
																		expr: &litMatcher{
																			pos:        position{line: 253, col: 5, offset: 7058},
																			val:        "Text",
																			ignoreCase: false,
																			want:       "\"Text\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 254, col: 5, offset: 7090},
																		run: (*parser).callonExpression552,
																		expr: &litMatcher{
																			pos:        position{line: 254, col: 5, offset: 7090},
																			val:        "List",
																			ignoreCase: false,
																			want:       "\"List\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 255, col: 5, offset: 7122},
																		run: (*parser).callonExpression554,
																		expr: &litMatcher{
																			pos:        position{line: 255, col: 5, offset: 7122},
																			val:        "None",
																			ignoreCase: false,
																			want:       "\"None\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 256, col: 5, offset: 7154},
																		run: (*parser).callonExpression556,
																		expr: &litMatcher{
																			pos:        position{line: 256, col: 5, offset: 7154},
																			val:        "Type",
																			ignoreCase: false,
																			want:       "\"Type\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 257, col: 5, offset: 7186},
																		run: (*parser).callonExpression558,
																		expr: &litMatcher{
																			pos:        position{line: 257, col: 5, offset: 7186},
																			val:        "Kind",
																			ignoreCase: false,
																			want:       "\"Kind\"",
																		},
																	},
																	&actionExpr{
																		pos: position{line: 258, col: 5, offset: 7218},
																		run: (*parser).callonExpression560,
																		expr: &litMatcher{
																			pos:        position{line: 258, col: 5, offset: 7218},
																			val:        "Sort",
																			ignoreCase: false,
																			want:       "\"Sort\"",
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 125, col: 29, offset: 3015},
															label: "label",
															expr: &choiceExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 121, col: 9, offset: 2803},
																		run: (*parser).callonExpression564,
																		expr: &seqExpr{
																			pos: position{line: 121, col: 9, offset: 2803},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 121, col: 9, offset: 2803},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 121, col: 13, offset: 2807},
																					label: "label",
																					expr: &actionExpr{
																						pos: position{line: 119, col: 15, offset: 2744},
																						run: (*parser).callonExpression568,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 119, col: 15, offset: 2744},
																							expr: &charClassMatcher{
																								pos:        position{line: 118, col: 19, offset: 2707},
																								val:        "[ -_a-~]",
																								ranges:     []rune{' ', '_', 'a', '~'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 121, col: 31, offset: 2825},
																					val:        "`",
																					ignoreCase: false,
																					want:       "\"`\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 122, col: 9, offset: 2859},
																		run: (*parser).callonExpression572,
																		expr: &labeledExpr{
																			pos:   position{line: 122, col: 9, offset: 2859},
																			label: "label",
																			expr: &choiceExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 112, col: 15, offset: 2500},
																						run: (*parser).callonExpression575,
																						expr: &seqExpr{
																							pos: position{line: 112, col: 15, offset: 2500},
																							exprs: []interface{}{
																								&choiceExpr{
																									pos: position{line: 278, col: 5, offset: 7577},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 260, col: 6, offset: 7254},
																											val:        "if",
																											ignoreCase: false,
																											want:       "\"if\"",
																										},
																										&litMatcher{
																											pos:        position{line: 261, col: 8, offset: 7268},
																											val:        "then",
																											ignoreCase: false,
																											want:       "\"then\"",
																										},
																										&litMatcher{
																											pos:        position{line: 262, col: 8, offset: 7284},
																											val:        "else",
																											ignoreCase: false,
																											want:       "\"else\"",
																										},
																										&litMatcher{
																											pos:        position{line: 263, col: 7, offset: 7299},
																											val:        "let",
																											ignoreCase: false,
																											want:       "\"let\"",
																										},
																										&litMatcher{
																											pos:        position{line: 264, col: 6, offset: 7312},
																											val:        "in",
																											ignoreCase: false,
																											want:       "\"in\"",
																										},
																										&litMatcher{
																											pos:        position{line: 266, col: 9, offset: 7339},
																											val:        "using",
																											ignoreCase: false,
																											want:       "\"using\"",
																										},
																										&actionExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											run: (*parser).callonExpression584,
																											expr: &seqExpr{
																												pos: position{line: 268, col: 11, offset: 7377},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 268, col: 11, offset: 7377},
																														val:        "missing",
																														ignoreCase: false,
																														want:       "\"missing\"",
																													},
																													&notExpr{
																														pos: position{line: 268, col: 21, offset: 7387},
																														expr: &charClassMatcher{
																															pos:        position{line: 111, col: 23, offset: 2469},
																															val:        "[_/-A-Za-z0-9]",
																															chars:      []rune{'_', '/', '-'},
																															ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 275, col: 10, offset: 7551},
																											val:        "assert",
																											ignoreCase: false,
																											want:       "\"assert\"",
																										},
																										&litMatcher{
																											pos:        position{line: 265, col: 6, offset: 7324},
																											val:        "as",
																											ignoreCase: false,
																											want:       "\"as\"",
																										},
																										&litMatcher{
																											pos:        position{line: 271, col: 12, offset: 7481},
																											val:        "Infinity",
																											ignoreCase: false,
																											want:       "\"Infinity\"",
																										},
																										&litMatcher{
																											pos:        position{line: 272, col: 7, offset: 7500},
																											val:        "NaN",
																											ignoreCase: false,
																											want:       "\"NaN\"",
																										},
																										&litMatcher{
																											pos:        position{line: 267, col: 9, offset: 7357},
																											val:        "merge",
																											ignoreCase: false,
																											want:       "\"merge\"",
																										},
																										&litMatcher{
																											pos:        position{line: 273, col: 8, offset: 7515},
																											val:        "Some",
																											ignoreCase: false,
																											want:       "\"Some\"",
																										},
																										&litMatcher{
																											pos:        position{line: 274, col: 9, offset: 7532},
																											val:        "toMap",
																											ignoreCase: false,
																											want:       "\"toMap\"",
																										},
																										&litMatcher{
																											pos:        position{line: 296, col: 10, offset: 7927},
																											val:        "forall",
																											ignoreCase: false,
																											want:       "\"forall\"",
																										},
																										&litMatcher{
																											pos:        position{line: 296, col: 21, offset: 7938},
																											val:        "‚àÄ",
																											ignoreCase: false,
																											want:       "\"‚àÄ\"",
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 112, col: 23, offset: 2508},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 113, col: 13, offset: 2572},
																						run: (*parser).callonExpression600,
																						expr: &seqExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 113, col: 13, offset: 2572},
																									expr: &choiceExpr{
																										pos: position{line: 278, col: 5, offset: 7577},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 260, col: 6, offset: 7254},
																												val:        "if",
																												ignoreCase: false,
																												want:       "\"if\"",
																											},
																											&litMatcher{
																												pos:        position{line: 261, col: 8, offset: 7268},
																												val:        "then",
																												ignoreCase: false,
																												want:       "\"then\"",
																											},
																											&litMatcher{
																												pos:        position{line: 262, col: 8, offset: 7284},
																												val:        "else",
																												ignoreCase: false,
																												want:       "\"else\"",
																											},
																											&litMatcher{
																												pos:        position{line: 263, col: 7, offset: 7299},
																												val:        "let",
																												ignoreCase: false,
																												want:       "\"let\"",
																											},
																											&litMatcher{
																												pos:        position{line: 264, col: 6, offset: 7312},
																												val:        "in",
																												ignoreCase: false,
																												want:       "\"in\"",
																											},
																											&litMatcher{
																												pos:        position{line: 266, col: 9, offset: 7339},
																												val:        "using",
																												ignoreCase: false,
																												want:       "\"using\"",
																											},
																											&actionExpr{
																												pos: position{line: 268, col: 11, offset: 7377},
																												run: (*parser).callonExpression610,
																												expr: &seqExpr{
																													pos: position{line: 268, col: 11, offset: 7377},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 268, col: 11, offset: 7377},
																															val:        "missing",
																															ignoreCase: false,
																															want:       "\"missing\"",
																														},
																														&notExpr{
																															pos: position{line: 268, col: 21, offset: 7387},
																															expr: &charClassMatcher{
																																pos:        position{line: 111, col: 23, offset: 2469},
																																val:        "[_/-A-Za-z0-9]",
																																chars:      []rune{'_', '/', '-'},
																																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 275, col: 10, offset: 7551},
																												val:        "assert",
																												ignoreCase: false,
																												want:       "\"assert\"",
																											},
																											&litMatcher{
																												pos:        position{line: 265, col: 6, offset: 7324},
																												val:        "as",
																												ignoreCase: false,
																												want:       "\"as\"",
																											},
																											&litMatcher{
																												pos:        position{line: 271, col: 12, offset: 7481},
																												val:        "Infinity",
																												ignoreCase: false,
																												want:       "\"Infinity\"",
																											},
																											&litMatcher{
																												pos:        position{line: 272, col: 7, offset: 7500},
																												val:        "NaN",
																												ignoreCase: false,
																												want:       "\"NaN\"",
																											},
																											&litMatcher{
																												pos:        position{line: 267, col: 9, offset: 7357},
																												val:        "merge",
																												ignoreCase: false,
																												want:       "\"merge\"",
																											},
																											&litMatcher{
																												pos:        position{line: 273, col: 8, offset: 7515},
																												val:        "Some",
																												ignoreCase: false,
																												want:       "\"Some\"",
																											},
																											&litMatcher{
																												pos:        position{line: 274, col: 9, offset: 7532},
																												val:        "toMap",
																												ignoreCase: false,
																												want:       "\"toMap\"",
																											},
																											&litMatcher{
																												pos:        position{line: 296, col: 10, offset: 7927},
																												val:        "forall",
																												ignoreCase: false,
																												want:       "\"forall\"",
																											},
																											&litMatcher{
																												pos:        position{line: 296, col: 21, offset: 7938},
																												val:        "‚àÄ",
																												ignoreCase: false,
																												want:       "\"‚àÄ\"",
																											},
																										},
																									},
																								},
																								&charClassMatcher{
																									pos:        position{line: 110, col: 24, offset: 2435},
																									val:        "[_A-Za-z]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 113, col: 43, offset: 2602},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 45, offset: 15005},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 519, col: 47, offset: 15007},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 51, offset: 15011},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 519, col: 54, offset: 15014},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 519, col: 56, offset: 15016},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 67, offset: 15027},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 519, col: 69, offset: 15029},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 73, offset: 15033},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 297, col: 9, offset: 7954},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 297, col: 9, offset: 7954},
											val:        "->",
											ignoreCase: false,
											want:       "\"->\"",
										},
										&litMatcher{
											pos:        position{line: 297, col: 16, offset: 7961},
											val:        "‚Üí",
											ignoreCase: false,
											want:       "\"‚Üí\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 81, offset: 15041},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 519, col: 83, offset: 15043},
									label: "body",
									expr: &ruleRefExpr{
										pos:  position{line: 519, col: 88, offset: 15048},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 522, col: 7, offset: 15156},
						run: (*parser).callonExpression641,
						expr: &seqExpr{
							pos: position{line: 522, col: 7, offset: 15156},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 522, col: 7, offset: 15156},
									label: "o",
									expr: &ruleRefExpr{
										pos:  position{line: 522, col: 9, offset: 15158},
										name: "OperatorExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 522, col: 28, offset: 15177},
									name: "_",
								},
								&choiceExpr{
									pos: position{line: 297, col: 9, offset: 7954},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 297, col: 9, offset: 7954},
											val:        "->",
											ignoreCase: false,
											want:       "\"->\"",
										},
										&litMatcher{
											pos:        position{line: 297, col: 16, offset: 7961},
											val:        "‚Üí",
											ignoreCase: false,
											want:       "\"‚Üí\"",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 522, col: 36, offset: 15185},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 522, col: 38, offset: 15187},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 522, col: 40, offset: 15189},
										name: "Expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 523, col: 7, offset: 15251},
						run: (*parser).callonExpression652,
						expr: &seqExpr{
							pos: position{line: 523, col: 7, offset: 15251},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 267, col: 9, offset: 7357},
									val:        "merge",
									ignoreCase: false,
									want:       "\"merge\"",
								},
								&ruleRefExpr{
									pos:  position{line: 523, col: 13, offset: 15257},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 523, col: 16, offset: 15260},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 523, col: 18, offset: 15262},
										name: "ImportExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 523, col: 35, offset: 15279},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 523, col: 38, offset: 15282},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 523, col: 40, offset: 15284},
										name: "ImportExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 523, col: 57, offset: 15301},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 523, col: 59, offset: 15303},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 523, col: 63, offset: 15307},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 523, col: 66, offset: 15310},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 523, col: 68, offset: 15312},
										name: "ApplicationExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 526, col: 7, offset: 15433},
						name: "EmptyList",
					},
					&actionExpr{
						pos: position{line: 527, col: 7, offset: 15449},
						run: (*parser).callonExpression667,
						expr: &seqExpr{
							pos: position{line: 527, col: 7, offset: 15449},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 274, col: 9, offset: 7532},
									val:        "toMap",
									ignoreCase: false,
									want:       "\"toMap\"",
								},
								&ruleRefExpr{
									pos:  position{line: 527, col: 13, offset: 15455},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 527, col: 16, offset: 15458},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 527, col: 18, offset: 15460},
										name: "ImportExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 527, col: 35, offset: 15477},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 527, col: 37, offset: 15479},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 527, col: 41, offset: 15483},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 527, col: 44, offset: 15486},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 527, col: 46, offset: 15488},
										name: "ApplicationExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 528, col: 7, offset: 15558},
						run: (*parser).callonExpression678,
						expr: &seqExpr{
							pos: position{line: 528, col: 7, offset: 15558},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 275, col: 10, offset: 7551},
									val:        "assert",
									ignoreCase: false,
									want:       "\"assert\"",
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 14, offset: 15565},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 528, col: 16, offset: 15567},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 528, col: 20, offset: 15571},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 528, col: 23, offset: 15574},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 528, col: 25, offset: 15576},
										name: "Expression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 529, col: 7, offset: 15638},
						name: "AnnotatedExpression",
					},
				},
			},
		},
		{
			name: "Annotation",
			pos:  position{line: 531, col: 1, offset: 15659},
			expr: &actionExpr{
				pos: position{line: 531, col: 14, offset: 15674},
				run: (*parser).callonAnnotation1,
				expr: &seqExpr{
					pos: position{line: 531, col: 14, offset: 15674},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 531, col: 14, offset: 15674},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 531, col: 18, offset: 15678},
							name: "_1",
						},
						&labeledExpr{
							pos:   position{line: 531, col: 21, offset: 15681},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 23, offset: 15683},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "AnnotatedExpression",
			pos:  position{line: 533, col: 1, offset: 15713},
			expr: &actionExpr{
				pos: position{line: 534, col: 1, offset: 15737},
				run: (*parser).callonAnnotatedExpression1,
				expr: &seqExpr{
					pos: position{line: 534, col: 1, offset: 15737},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 534, col: 1, offset: 15737},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 3, offset: 15739},
								name: "OperatorExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 534, col: 22, offset: 15758},
							label: "a",
							expr: &zeroOrOneExpr{
								pos: position{line: 534, col: 24, offset: 15760},
								expr: &seqExpr{
									pos: position{line: 534, col: 25, offset: 15761},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 534, col: 25, offset: 15761},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 534, col: 27, offset: 15763},
											name: "Annotation",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EmptyList",
			pos:  position{line: 539, col: 1, offset: 15888},
			expr: &actionExpr{
				pos: position{line: 539, col: 13, offset: 15902},
				run: (*parser).callonEmptyList1,
				expr: &seqExpr{
					pos: position{line: 539, col: 13, offset: 15902},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 539, col: 13, offset: 15902},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 17, offset: 15906},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 539, col: 19, offset: 15908},
							expr: &seqExpr{
								pos: position{line: 539, col: 20, offset: 15909},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 539, col: 20, offset: 15909},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 24, offset: 15913},
										name: "_",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 539, col: 28, offset: 15917},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 32, offset: 15921},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 539, col: 34, offset: 15923},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 539, col: 38, offset: 15927},
							name: "_1",
						},
						&labeledExpr{
							pos:   position{line: 539, col: 41, offset: 15930},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 539, col: 43, offset: 15932},
								name: "ApplicationExpression",
							},
						},
					},
				},
			},
		},
		{
			name: "OperatorExpression",
			pos:  position{line: 543, col: 1, offset: 16000},
			expr: &ruleRefExpr{
				pos:  position{line: 543, col: 22, offset: 16023},
				name: "ImportAltExpression",
			},
		},
		{
			name: "ImportAltExpression",
			pos:  position{line: 545, col: 1, offset: 16044},
			expr: &actionExpr{
				pos: position{line: 545, col: 26, offset: 16071},
				run: (*parser).callonImportAltExpression1,
				expr: &seqExpr{
					pos: position{line: 545, col: 26, offset: 16071},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 26, offset: 16071},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 32, offset: 16077},
								name: "OrExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 55, offset: 16100},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 545, col: 60, offset: 16105},
								expr: &seqExpr{
									pos: position{line: 545, col: 61, offset: 16106},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 545, col: 61, offset: 16106},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 545, col: 63, offset: 16108},
											val:        "?",
											ignoreCase: false,
											want:       "\"?\"",
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 67, offset: 16112},
											name: "_1",
										},
										&ruleRefExpr{
											pos:  position{line: 545, col: 70, offset: 16115},
											name: "OrExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrExpression",
			pos:  position{line: 547, col: 1, offset: 16186},
			expr: &actionExpr{
				pos: position{line: 547, col: 26, offset: 16213},
				run: (*parser).callonOrExpression1,
				expr: &seqExpr{
					pos: position{line: 547, col: 26, offset: 16213},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 26, offset: 16213},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 32, offset: 16219},
								name: "PlusExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 55, offset: 16242},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 547, col: 60, offset: 16247},
								expr: &seqExpr{
									pos: position{line: 547, col: 61, offset: 16248},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 547, col: 61, offset: 16248},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 547, col: 63, offset: 16250},
											val:        "||",
											ignoreCase: false,
											want:       "\"||\"",
										},
										&ruleRefExpr{
											pos:  position{line: 547, col: 68, offset: 16255},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 547, col: 70, offset: 16257},
											name: "PlusExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PlusExpression",
			pos:  position{line: 549, col: 1, offset: 16323},
			expr: &actionExpr{
				pos: position{line: 549, col: 26, offset: 16350},
				run: (*parser).callonPlusExpression1,
				expr: &seqExpr{
					pos: position{line: 549, col: 26, offset: 16350},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 549, col: 26, offset: 16350},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 32, offset: 16356},
								name: "TextAppendExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 549, col: 55, offset: 16379},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 549, col: 60, offset: 16384},
								expr: &seqExpr{
									pos: position{line: 549, col: 61, offset: 16385},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 549, col: 61, offset: 16385},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 549, col: 63, offset: 16387},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&ruleRefExpr{
											pos:  position{line: 549, col: 67, offset: 16391},
											name: "_1",
										},
										&labeledExpr{
											pos:   position{line: 549, col: 70, offset: 16394},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 549, col: 72, offset: 16396},
												name: "TextAppendExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAppendExpression",
			pos:  position{line: 551, col: 1, offset: 16470},
			expr: &actionExpr{
				pos: position{line: 551, col: 26, offset: 16497},
				run: (*parser).callonTextAppendExpression1,
				expr: &seqExpr{
					pos: position{line: 551, col: 26, offset: 16497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 551, col: 26, offset: 16497},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 32, offset: 16503},
								name: "ListAppendExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 551, col: 55, offset: 16526},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 551, col: 60, offset: 16531},
								expr: &seqExpr{
									pos: position{line: 551, col: 61, offset: 16532},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 551, col: 61, offset: 16532},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 551, col: 63, offset: 16534},
											val:        "++",
											ignoreCase: false,
											want:       "\"++\"",
										},
										&ruleRefExpr{
											pos:  position{line: 551, col: 68, offset: 16539},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 551, col: 70, offset: 16541},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 551, col: 72, offset: 16543},
												name: "ListAppendExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListAppendExpression",
			pos:  position{line: 553, col: 1, offset: 16623},
			expr: &actionExpr{
				pos: position{line: 553, col: 26, offset: 16650},
				run: (*parser).callonListAppendExpression1,
				expr: &seqExpr{
					pos: position{line: 553, col: 26, offset: 16650},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 553, col: 26, offset: 16650},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 32, offset: 16656},
								name: "AndExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 553, col: 55, offset: 16679},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 553, col: 60, offset: 16684},
								expr: &seqExpr{
									pos: position{line: 553, col: 61, offset: 16685},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 553, col: 61, offset: 16685},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 553, col: 63, offset: 16687},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&ruleRefExpr{
											pos:  position{line: 553, col: 67, offset: 16691},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 553, col: 69, offset: 16693},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 553, col: 71, offset: 16695},
												name: "AndExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndExpression",
			pos:  position{line: 555, col: 1, offset: 16768},
			expr: &actionExpr{
				pos: position{line: 555, col: 26, offset: 16795},
				run: (*parser).callonAndExpression1,
				expr: &seqExpr{
					pos: position{line: 555, col: 26, offset: 16795},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 555, col: 26, offset: 16795},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 32, offset: 16801},
								name: "CombineExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 55, offset: 16824},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 60, offset: 16829},
								expr: &seqExpr{
									pos: position{line: 555, col: 61, offset: 16830},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 555, col: 61, offset: 16830},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 555, col: 63, offset: 16832},
											val:        "&&",
											ignoreCase: false,
											want:       "\"&&\"",
										},
										&ruleRefExpr{
											pos:  position{line: 555, col: 68, offset: 16837},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 555, col: 70, offset: 16839},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 555, col: 72, offset: 16841},
												name: "CombineExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CombineExpression",
			pos:  position{line: 557, col: 1, offset: 16911},
			expr: &actionExpr{
				pos: position{line: 557, col: 26, offset: 16938},
				run: (*parser).callonCombineExpression1,
				expr: &seqExpr{
					pos: position{line: 557, col: 26, offset: 16938},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 26, offset: 16938},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 32, offset: 16944},
								name: "PreferExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 557, col: 55, offset: 16967},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 557, col: 60, offset: 16972},
								expr: &seqExpr{
									pos: position{line: 557, col: 61, offset: 16973},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 557, col: 61, offset: 16973},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 291, col: 11, offset: 7792},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 291, col: 11, offset: 7792},
													val:        "/\\",
													ignoreCase: false,
													want:       "\"/\\\\\"",
												},
												&litMatcher{
													pos:        position{line: 291, col: 19, offset: 7800},
													val:        "‚àß",
													ignoreCase: false,
													want:       "\"‚àß\"",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 557, col: 71, offset: 16983},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 557, col: 73, offset: 16985},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 557, col: 75, offset: 16987},
												name: "PreferExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PreferExpression",
			pos:  position{line: 559, col: 1, offset: 17064},
			expr: &actionExpr{
				pos: position{line: 559, col: 26, offset: 17091},
				run: (*parser).callonPreferExpression1,
				expr: &seqExpr{
					pos: position{line: 559, col: 26, offset: 17091},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 559, col: 26, offset: 17091},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 32, offset: 17097},
								name: "CombineTypesExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 55, offset: 17120},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 559, col: 60, offset: 17125},
								expr: &seqExpr{
									pos: position{line: 559, col: 61, offset: 17126},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 559, col: 61, offset: 17126},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 294, col: 10, offset: 7880},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 294, col: 10, offset: 7880},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&litMatcher{
													pos:        position{line: 294, col: 17, offset: 7887},
													val:        "‚´Ω",
													ignoreCase: false,
													want:       "\"‚´Ω\"",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 559, col: 70, offset: 17135},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 559, col: 72, offset: 17137},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 559, col: 74, offset: 17139},
												name: "CombineTypesExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CombineTypesExpression",
			pos:  position{line: 561, col: 1, offset: 17233},
			expr: &actionExpr{
				pos: position{line: 561, col: 26, offset: 17260},
				run: (*parser).callonCombineTypesExpression1,
				expr: &seqExpr{
					pos: position{line: 561, col: 26, offset: 17260},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 561, col: 26, offset: 17260},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 32, offset: 17266},
								name: "TimesExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 55, offset: 17289},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 561, col: 60, offset: 17294},
								expr: &seqExpr{
									pos: position{line: 561, col: 61, offset: 17295},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 561, col: 61, offset: 17295},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 292, col: 16, offset: 7823},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 292, col: 16, offset: 7823},
													val:        "//\\\\",
													ignoreCase: false,
													want:       "\"//\\\\\\\\\"",
												},
												&litMatcher{
													pos:        position{line: 292, col: 27, offset: 7834},
													val:        "‚©ì",
													ignoreCase: false,
													want:       "\"‚©ì\"",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 561, col: 76, offset: 17310},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 561, col: 78, offset: 17312},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 561, col: 80, offset: 17314},
												name: "TimesExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TimesExpression",
			pos:  position{line: 563, col: 1, offset: 17394},
			expr: &actionExpr{
				pos: position{line: 563, col: 26, offset: 17421},
				run: (*parser).callonTimesExpression1,
				expr: &seqExpr{
					pos: position{line: 563, col: 26, offset: 17421},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 563, col: 26, offset: 17421},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 32, offset: 17427},
								name: "EqualExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 563, col: 55, offset: 17450},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 563, col: 60, offset: 17455},
								expr: &seqExpr{
									pos: position{line: 563, col: 61, offset: 17456},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 563, col: 61, offset: 17456},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 563, col: 63, offset: 17458},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&ruleRefExpr{
											pos:  position{line: 563, col: 67, offset: 17462},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 563, col: 69, offset: 17464},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 563, col: 71, offset: 17466},
												name: "EqualExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualExpression",
			pos:  position{line: 565, col: 1, offset: 17536},
			expr: &actionExpr{
				pos: position{line: 565, col: 26, offset: 17563},
				run: (*parser).callonEqualExpression1,
				expr: &seqExpr{
					pos: position{line: 565, col: 26, offset: 17563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 565, col: 26, offset: 17563},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 32, offset: 17569},
								name: "NotEqualExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 565, col: 55, offset: 17592},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 565, col: 60, offset: 17597},
								expr: &seqExpr{
									pos: position{line: 565, col: 61, offset: 17598},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 565, col: 61, offset: 17598},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 565, col: 63, offset: 17600},
											val:        "==",
											ignoreCase: false,
											want:       "\"==\"",
										},
										&ruleRefExpr{
											pos:  position{line: 565, col: 68, offset: 17605},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 565, col: 70, offset: 17607},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 565, col: 72, offset: 17609},
												name: "NotEqualExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NotEqualExpression",
			pos:  position{line: 567, col: 1, offset: 17679},
			expr: &actionExpr{
				pos: position{line: 567, col: 26, offset: 17706},
				run: (*parser).callonNotEqualExpression1,
				expr: &seqExpr{
					pos: position{line: 567, col: 26, offset: 17706},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 567, col: 26, offset: 17706},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 32, offset: 17712},
								name: "EquivalentExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 567, col: 54, offset: 17734},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 567, col: 59, offset: 17739},
								expr: &seqExpr{
									pos: position{line: 567, col: 60, offset: 17740},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 567, col: 60, offset: 17740},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 567, col: 62, offset: 17742},
											val:        "!=",
											ignoreCase: false,
											want:       "\"!=\"",
										},
										&ruleRefExpr{
											pos:  position{line: 567, col: 67, offset: 17747},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 567, col: 69, offset: 17749},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 567, col: 71, offset: 17751},
												name: "EquivalentExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EquivalentExpression",
			pos:  position{line: 569, col: 1, offset: 17823},
			expr: &actionExpr{
				pos: position{line: 569, col: 28, offset: 17852},
				run: (*parser).callonEquivalentExpression1,
				expr: &seqExpr{
					pos: position{line: 569, col: 28, offset: 17852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 569, col: 28, offset: 17852},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 34, offset: 17858},
								name: "ApplicationExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 569, col: 57, offset: 17881},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 569, col: 62, offset: 17886},
								expr: &seqExpr{
									pos: position{line: 569, col: 63, offset: 17887},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 569, col: 63, offset: 17887},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 293, col: 14, offset: 7855},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 293, col: 14, offset: 7855},
													val:        "===",
													ignoreCase: false,
													want:       "\"===\"",
												},
												&litMatcher{
													pos:        position{line: 293, col: 22, offset: 7863},
													val:        "‚â°",
													ignoreCase: false,
													want:       "\"‚â°\"",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 569, col: 76, offset: 17900},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 569, col: 78, offset: 17902},
											label: "e",
											expr: &ruleRefExpr{
												pos:  position{line: 569, col: 80, offset: 17904},
												name: "ApplicationExpression",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ApplicationExpression",
			pos:  position{line: 572, col: 1, offset: 17981},
			expr: &actionExpr{
				pos: position{line: 572, col: 25, offset: 18007},
				run: (*parser).callonApplicationExpression1,
				expr: &seqExpr{
					pos: position{line: 572, col: 25, offset: 18007},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 572, col: 25, offset: 18007},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 572, col: 27, offset: 18009},
								name: "FirstApplicationExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 54, offset: 18036},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 572, col: 59, offset: 18041},
								expr: &seqExpr{
									pos: position{line: 572, col: 60, offset: 18042},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 572, col: 60, offset: 18042},
											name: "_1",
										},
										&ruleRefExpr{
											pos:  position{line: 572, col: 63, offset: 18045},
											name: "ImportExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstApplicationExpression",
			pos:  position{line: 581, col: 1, offset: 18288},
			expr: &choiceExpr{
				pos: position{line: 582, col: 8, offset: 18326},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 582, col: 8, offset: 18326},
						run: (*parser).callonFirstApplicationExpression2,
						expr: &seqExpr{
							pos: position{line: 582, col: 8, offset: 18326},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 267, col: 9, offset: 7357},
									val:        "merge",
									ignoreCase: false,
									want:       "\"merge\"",
								},
								&ruleRefExpr{
									pos:  position{line: 582, col: 14, offset: 18332},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 582, col: 17, offset: 18335},
									label: "h",
									expr: &ruleRefExpr{
										pos:  position{line: 582, col: 19, offset: 18337},
										name: "ImportExpression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 582, col: 36, offset: 18354},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 582, col: 39, offset: 18357},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 582, col: 41, offset: 18359},
										name: "ImportExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 8, offset: 18462},
						run: (*parser).callonFirstApplicationExpression11,
						expr: &seqExpr{
							pos: position{line: 585, col: 8, offset: 18462},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 273, col: 8, offset: 7515},
									val:        "Some",
									ignoreCase: false,
									want:       "\"Some\"",
								},
								&ruleRefExpr{
									pos:  position{line: 585, col: 13, offset: 18467},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 585, col: 16, offset: 18470},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 585, col: 18, offset: 18472},
										name: "ImportExpression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 586, col: 8, offset: 18527},
						run: (*parser).callonFirstApplicationExpression17,
						expr: &seqExpr{
							pos: position{line: 586, col: 8, offset: 18527},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 274, col: 9, offset: 7532},
									val:        "toMap",
									ignoreCase: false,
									want:       "\"toMap\"",
								},
								&ruleRefExpr{
									pos:  position{line: 586, col: 14, offset: 18533},
									name: "_1",
								},
								&labeledExpr{
									pos:   position{line: 586, col: 17, offset: 18536},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 586, col: 19, offset: 18538},
										name: "ImportExpression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 587, col: 8, offset: 18602},
						name: "ImportExpression",
					},
				},
			},
		},
		{
			name: "ImportExpression",
			pos:  position{line: 589, col: 1, offset: 18620},
			expr: &choiceExpr{
				pos: position{line: 589, col: 20, offset: 18641},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 589, col: 20, offset: 18641},
						name: "Import",
					},
					&ruleRefExpr{
						pos:  position{line: 589, col: 29, offset: 18650},
						name: "CompletionExpression",
					},
				},
			},
		},
		{
			name: "CompletionExpression",
			pos:  position{line: 591, col: 1, offset: 18672},
			expr: &actionExpr{
				pos: position{line: 591, col: 24, offset: 18697},
				run: (*parser).callonCompletionExpression1,
				expr: &seqExpr{
					pos: position{line: 591, col: 24, offset: 18697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 591, col: 24, offset: 18697},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 26, offset: 18699},
								name: "SelectorExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 45, offset: 18718},
							label: "b",
							expr: &zeroOrOneExpr{
								pos: position{line: 591, col: 47, offset: 18720},
								expr: &seqExpr{
									pos: position{line: 591, col: 48, offset: 18721},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 591, col: 48, offset: 18721},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 298, col: 12, offset: 7980},
											val:        "::",
											ignoreCase: false,
											want:       "\"::\"",
										},
										&ruleRefExpr{
											pos:  position{line: 591, col: 59, offset: 18732},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 591, col: 61, offset: 18734},
											name: "SelectorExpression",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SelectorExpression",
			pos:  position{line: 598, col: 1, offset: 18885},
			expr: &actionExpr{
				pos: position{line: 598, col: 22, offset: 18908},
				run: (*parser).callonSelectorExpression1,
				expr: &seqExpr{
					pos: position{line: 598, col: 22, offset: 18908},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 598, col: 22, offset: 18908},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 24, offset: 18910},
								name: "PrimitiveExpression",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 44, offset: 18930},
							label: "ls",
							expr: &zeroOrMoreExpr{
								pos: position{line: 598, col: 47, offset: 18933},
								expr: &seqExpr{
									pos: position{line: 598, col: 48, offset: 18934},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 598, col: 48, offset: 18934},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 598, col: 50, offset: 18936},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&ruleRefExpr{
											pos:  position{line: 598, col: 54, offset: 18940},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 598, col: 56, offset: 18942},
											name: "Selector",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Selector",
			pos:  position{line: 617, col: 1, offset: 19495},
			expr: &choiceExpr{
				pos: position{line: 617, col: 12, offset: 19508},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 121, col: 9, offset: 2803},
						run: (*parser).callonSelector2,
						expr: &seqExpr{
							pos: position{line: 121, col: 9, offset: 2803},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 121, col: 9, offset: 2803},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 121, col: 13, offset: 2807},
									label: "label",
									expr: &actionExpr{
										pos: position{line: 119, col: 15, offset: 2744},
										run: (*parser).callonSelector6,
										expr: &oneOrMoreExpr{
											pos: position{line: 119, col: 15, offset: 2744},
											expr: &charClassMatcher{
												pos:        position{line: 118, col: 19, offset: 2707},
												val:        "[ -_a-~]",
												ranges:     []rune{' ', '_', 'a', '~'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 121, col: 31, offset: 2825},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 122, col: 9, offset: 2859},
						run: (*parser).callonSelector10,
						expr: &labeledExpr{
							pos:   position{line: 122, col: 9, offset: 2859},
							label: "label",
							expr: &choiceExpr{
								pos: position{line: 112, col: 15, offset: 2500},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 112, col: 15, offset: 2500},
										run: (*parser).callonSelector13,
										expr: &seqExpr{
											pos: position{line: 112, col: 15, offset: 2500},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 278, col: 5, offset: 7577},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 260, col: 6, offset: 7254},
															val:        "if",
															ignoreCase: false,
															want:       "\"if\"",
														},
														&litMatcher{
															pos:        position{line: 261, col: 8, offset: 7268},
															val:        "then",
															ignoreCase: false,
															want:       "\"then\"",
														},
														&litMatcher{
															pos:        position{line: 262, col: 8, offset: 7284},
															val:        "else",
															ignoreCase: false,
															want:       "\"else\"",
														},
														&litMatcher{
															pos:        position{line: 263, col: 7, offset: 7299},
															val:        "let",
															ignoreCase: false,
															want:       "\"let\"",
														},
														&litMatcher{
															pos:        position{line: 264, col: 6, offset: 7312},
															val:        "in",
															ignoreCase: false,
															want:       "\"in\"",
														},
														&litMatcher{
															pos:        position{line: 266, col: 9, offset: 7339},
															val:        "using",
															ignoreCase: false,
															want:       "\"using\"",
														},
														&actionExpr{
															pos: position{line: 268, col: 11, offset: 7377},
															run: (*parser).callonSelector22,
															expr: &seqExpr{
																pos: position{line: 268, col: 11, offset: 7377},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 268, col: 11, offset: 7377},
																		val:        "missing",
																		ignoreCase: false,
																		want:       "\"missing\"",
																	},
																	&notExpr{
																		pos: position{line: 268, col: 21, offset: 7387},
																		expr: &charClassMatcher{
																			pos:        position{line: 111, col: 23, offset: 2469},
																			val:        "[_/-A-Za-z0-9]",
																			chars:      []rune{'_', '/', '-'},
																			ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 275, col: 10, offset: 7551},
															val:        "assert",
															ignoreCase: false,
															want:       "\"assert\"",
														},
														&litMatcher{
															pos:        position{line: 265, col: 6, offset: 7324},
															val:        "as",
															ignoreCase: false,
															want:       "\"as\"",
														},
														&litMatcher{
															pos:        position{line: 271, col: 12, offset: 7481},
															val:        "Infinity",
															ignoreCase: false,
															want:       "\"Infinity\"",
														},
														&litMatcher{
															pos:        position{line: 272, col: 7, offset: 7500},
															val:        "NaN",
															ignoreCase: false,
															want:       "\"NaN\"",
														},
														&litMatcher{
															pos:        position{line: 267, col: 9, offset: 7357},
															val:        "merge",
															ignoreCase: false,
															want:       "\"merge\"",
														},
														&litMatcher{
															pos:        position{line: 273, col: 8, offset: 7515},
															val:        "Some",
															ignoreCase: false,
															want:       "\"Some\"",
														},
														&litMatcher{
															pos:        position{line: 274, col: 9, offset: 7532},
															val:        "toMap",
															ignoreCase: false,
															want:       "\"toMap\"",
														},
														&litMatcher{
															pos:        position{line: 296, col: 10, offset: 7927},
															val:        "forall",
															ignoreCase: false,
															want:       "\"forall\"",
														},
														&litMatcher{
															pos:        position{line: 296, col: 21, offset: 7938},
															val:        "‚àÄ",
															ignoreCase: false,
															want:       "\"‚àÄ\"",
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 112, col: 23, offset: 2508},
													expr: &charClassMatcher{
														pos:        position{line: 111, col: 23, offset: 2469},
														val:        "[_/-A-Za-z0-9]",
														chars:      []rune{'_', '/', '-'},
														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 113, col: 13, offset: 2572},
										run: (*parser).callonSelector38,
										expr: &seqExpr{
											pos: position{line: 113, col: 13, offset: 2572},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 113, col: 13, offset: 2572},
													expr: &choiceExpr{
														pos: position{line: 278, col: 5, offset: 7577},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 260, col: 6, offset: 7254},
																val:        "if",
																ignoreCase: false,
																want:       "\"if\"",
															},
															&litMatcher{
																pos:        position{line: 261, col: 8, offset: 7268},
																val:        "then",
																ignoreCase: false,
																want:       "\"then\"",
															},
															&litMatcher{
																pos:        position{line: 262, col: 8, offset: 7284},
																val:        "else",
																ignoreCase: false,
																want:       "\"else\"",
															},
															&litMatcher{
																pos:        position{line: 263, col: 7, offset: 7299},
																val:        "let",
																ignoreCase: false,
																want:       "\"let\"",
															},
															&litMatcher{
																pos:        position{line: 264, col: 6, offset: 7312},
																val:        "in",
																ignoreCase: false,
																want:       "\"in\"",
															},
															&litMatcher{
																pos:        position{line: 266, col: 9, offset: 7339},
																val:        "using",
																ignoreCase: false,
																want:       "\"using\"",
															},
															&actionExpr{
																pos: position{line: 268, col: 11, offset: 7377},
																run: (*parser).callonSelector48,
																expr: &seqExpr{
																	pos: position{line: 268, col: 11, offset: 7377},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 268, col: 11, offset: 7377},
																			val:        "missing",
																			ignoreCase: false,
																			want:       "\"missing\"",
																		},
																		&notExpr{
																			pos: position{line: 268, col: 21, offset: 7387},
																			expr: &charClassMatcher{
																				pos:        position{line: 111, col: 23, offset: 2469},
																				val:        "[_/-A-Za-z0-9]",
																				chars:      []rune{'_', '/', '-'},
																				ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 275, col: 10, offset: 7551},
																val:        "assert",
																ignoreCase: false,
																want:       "\"assert\"",
															},
															&litMatcher{
																pos:        position{line: 265, col: 6, offset: 7324},
																val:        "as",
																ignoreCase: false,
																want:       "\"as\"",
															},
															&litMatcher{
																pos:        position{line: 271, col: 12, offset: 7481},
																val:        "Infinity",
																ignoreCase: false,
																want:       "\"Infinity\"",
															},
															&litMatcher{
																pos:        position{line: 272, col: 7, offset: 7500},
																val:        "NaN",
																ignoreCase: false,
																want:       "\"NaN\"",
															},
															&litMatcher{
																pos:        position{line: 267, col: 9, offset: 7357},
																val:        "merge",
																ignoreCase: false,
																want:       "\"merge\"",
															},
															&litMatcher{
																pos:        position{line: 273, col: 8, offset: 7515},
																val:        "Some",
																ignoreCase: false,
																want:       "\"Some\"",
															},
															&litMatcher{
																pos:        position{line: 274, col: 9, offset: 7532},
																val:        "toMap",
																ignoreCase: false,
																want:       "\"toMap\"",
															},
															&litMatcher{
																pos:        position{line: 296, col: 10, offset: 7927},
																val:        "forall",
																ignoreCase: false,
																want:       "\"forall\"",
															},
															&litMatcher{
																pos:        position{line: 296, col: 21, offset: 7938},
																val:        "‚àÄ",
																ignoreCase: false,
																want:       "\"‚àÄ\"",
															},
														},
													},
												},
												&charClassMatcher{
													pos:        position{line: 110, col: 24, offset: 2435},
													val:        "[_A-Za-z]",
													chars:      []rune{'_'},
													ranges:     []rune{'A', 'Z', 'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&zeroOrMoreExpr{
													pos: position{line: 113, col: 43, offset: 2602},
													expr: &charClassMatcher{
														pos:        position{line: 111, col: 23, offset: 2469},
														val:        "[_/-A-Za-z0-9]",
														chars:      []rune{'_', '/', '-'},
														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 23, offset: 19519},
						name: "Labels",
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 32, offset: 19528},
						name: "TypeSelector",
					},
				},
			},
		},
		{
			name: "Labels",
			pos:  position{line: 619, col: 1, offset: 19542},
			expr: &actionExpr{
				pos: position{line: 619, col: 10, offset: 19553},
				run: (*parser).callonLabels1,
				expr: &seqExpr{
					pos: position{line: 619, col: 10, offset: 19553},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 619, col: 10, offset: 19553},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 14, offset: 19557},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 619, col: 16, offset: 19559},
							label: "optclauses",
							expr: &zeroOrOneExpr{
								pos: position{line: 619, col: 27, offset: 19570},
								expr: &seqExpr{
									pos: position{line: 619, col: 29, offset: 19572},
									exprs: []interface{}{
										&choiceExpr{
											pos: position{line: 129, col: 18, offset: 3089},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 121, col: 9, offset: 2803},
													run: (*parser).callonLabels9,
													expr: &seqExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 121, col: 9, offset: 2803},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
															&labeledExpr{
																pos:   position{line: 121, col: 13, offset: 2807},
																label: "label",
																expr: &actionExpr{
																	pos: position{line: 119, col: 15, offset: 2744},
																	run: (*parser).callonLabels13,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 119, col: 15, offset: 2744},
																		expr: &charClassMatcher{
																			pos:        position{line: 118, col: 19, offset: 2707},
																			val:        "[ -_a-~]",
																			ranges:     []rune{' ', '_', 'a', '~'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 121, col: 31, offset: 2825},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 122, col: 9, offset: 2859},
													run: (*parser).callonLabels17,
													expr: &labeledExpr{
														pos:   position{line: 122, col: 9, offset: 2859},
														label: "label",
														expr: &choiceExpr{
															pos: position{line: 112, col: 15, offset: 2500},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 112, col: 15, offset: 2500},
																	run: (*parser).callonLabels20,
																	expr: &seqExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		exprs: []interface{}{
																			&choiceExpr{
																				pos: position{line: 278, col: 5, offset: 7577},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 260, col: 6, offset: 7254},
																						val:        "if",
																						ignoreCase: false,
																						want:       "\"if\"",
																					},
																					&litMatcher{
																						pos:        position{line: 261, col: 8, offset: 7268},
																						val:        "then",
																						ignoreCase: false,
																						want:       "\"then\"",
																					},
																					&litMatcher{
																						pos:        position{line: 262, col: 8, offset: 7284},
																						val:        "else",
																						ignoreCase: false,
																						want:       "\"else\"",
																					},
																					&litMatcher{
																						pos:        position{line: 263, col: 7, offset: 7299},
																						val:        "let",
																						ignoreCase: false,
																						want:       "\"let\"",
																					},
																					&litMatcher{
																						pos:        position{line: 264, col: 6, offset: 7312},
																						val:        "in",
																						ignoreCase: false,
																						want:       "\"in\"",
																					},
																					&litMatcher{
																						pos:        position{line: 266, col: 9, offset: 7339},
																						val:        "using",
																						ignoreCase: false,
																						want:       "\"using\"",
																					},
																					&actionExpr{
																						pos: position{line: 268, col: 11, offset: 7377},
																						run: (*parser).callonLabels29,
																						expr: &seqExpr{
																							pos: position{line: 268, col: 11, offset: 7377},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 268, col: 11, offset: 7377},
																									val:        "missing",
																									ignoreCase: false,
																									want:       "\"missing\"",
																								},
																								&notExpr{
																									pos: position{line: 268, col: 21, offset: 7387},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 275, col: 10, offset: 7551},
																						val:        "assert",
																						ignoreCase: false,
																						want:       "\"assert\"",
																					},
																					&litMatcher{
																						pos:        position{line: 265, col: 6, offset: 7324},
																						val:        "as",
																						ignoreCase: false,
																						want:       "\"as\"",
																					},
																					&litMatcher{
																						pos:        position{line: 271, col: 12, offset: 7481},
																						val:        "Infinity",
																						ignoreCase: false,
																						want:       "\"Infinity\"",
																					},
																					&litMatcher{
																						pos:        position{line: 272, col: 7, offset: 7500},
																						val:        "NaN",
																						ignoreCase: false,
																						want:       "\"NaN\"",
																					},
																					&litMatcher{
																						pos:        position{line: 267, col: 9, offset: 7357},
																						val:        "merge",
																						ignoreCase: false,
																						want:       "\"merge\"",
																					},
																					&litMatcher{
																						pos:        position{line: 273, col: 8, offset: 7515},
																						val:        "Some",
																						ignoreCase: false,
																						want:       "\"Some\"",
																					},
																					&litMatcher{
																						pos:        position{line: 274, col: 9, offset: 7532},
																						val:        "toMap",
																						ignoreCase: false,
																						want:       "\"toMap\"",
																					},
																					&litMatcher{
																						pos:        position{line: 296, col: 10, offset: 7927},
																						val:        "forall",
																						ignoreCase: false,
																						want:       "\"forall\"",
																					},
																					&litMatcher{
																						pos:        position{line: 296, col: 21, offset: 7938},
																						val:        "‚àÄ",
																						ignoreCase: false,
																						want:       "\"‚àÄ\"",
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 112, col: 23, offset: 2508},
																				expr: &charClassMatcher{
																					pos:        position{line: 111, col: 23, offset: 2469},
																					val:        "[_/-A-Za-z0-9]",
																					chars:      []rune{'_', '/', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 113, col: 13, offset: 2572},
																	run: (*parser).callonLabels45,
																	expr: &seqExpr{
																		pos: position{line: 113, col: 13, offset: 2572},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				expr: &choiceExpr{
																					pos: position{line: 278, col: 5, offset: 7577},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 260, col: 6, offset: 7254},
																							val:        "if",
																							ignoreCase: false,
																							want:       "\"if\"",
																						},
																						&litMatcher{
																							pos:        position{line: 261, col: 8, offset: 7268},
																							val:        "then",
																							ignoreCase: false,
																							want:       "\"then\"",
																						},
																						&litMatcher{
																							pos:        position{line: 262, col: 8, offset: 7284},
																							val:        "else",
																							ignoreCase: false,
																							want:       "\"else\"",
																						},
																						&litMatcher{
																							pos:        position{line: 263, col: 7, offset: 7299},
																							val:        "let",
																							ignoreCase: false,
																							want:       "\"let\"",
																						},
																						&litMatcher{
																							pos:        position{line: 264, col: 6, offset: 7312},
																							val:        "in",
																							ignoreCase: false,
																							want:       "\"in\"",
																						},
																						&litMatcher{
																							pos:        position{line: 266, col: 9, offset: 7339},
																							val:        "using",
																							ignoreCase: false,
																							want:       "\"using\"",
																						},
																						&actionExpr{
																							pos: position{line: 268, col: 11, offset: 7377},
																							run: (*parser).callonLabels55,
																							expr: &seqExpr{
																								pos: position{line: 268, col: 11, offset: 7377},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 268, col: 11, offset: 7377},
																										val:        "missing",
																										ignoreCase: false,
																										want:       "\"missing\"",
																									},
																									&notExpr{
																										pos: position{line: 268, col: 21, offset: 7387},
																										expr: &charClassMatcher{
																											pos:        position{line: 111, col: 23, offset: 2469},
																											val:        "[_/-A-Za-z0-9]",
																											chars:      []rune{'_', '/', '-'},
																											ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 275, col: 10, offset: 7551},
																							val:        "assert",
																							ignoreCase: false,
																							want:       "\"assert\"",
																						},
																						&litMatcher{
																							pos:        position{line: 265, col: 6, offset: 7324},
																							val:        "as",
																							ignoreCase: false,
																							want:       "\"as\"",
																						},
																						&litMatcher{
																							pos:        position{line: 271, col: 12, offset: 7481},
																							val:        "Infinity",
																							ignoreCase: false,
																							want:       "\"Infinity\"",
																						},
																						&litMatcher{
																							pos:        position{line: 272, col: 7, offset: 7500},
																							val:        "NaN",
																							ignoreCase: false,
																							want:       "\"NaN\"",
																						},
																						&litMatcher{
																							pos:        position{line: 267, col: 9, offset: 7357},
																							val:        "merge",
																							ignoreCase: false,
																							want:       "\"merge\"",
																						},
																						&litMatcher{
																							pos:        position{line: 273, col: 8, offset: 7515},
																							val:        "Some",
																							ignoreCase: false,
																							want:       "\"Some\"",
																						},
																						&litMatcher{
																							pos:        position{line: 274, col: 9, offset: 7532},
																							val:        "toMap",
																							ignoreCase: false,
																							want:       "\"toMap\"",
																						},
																						&litMatcher{
																							pos:        position{line: 296, col: 10, offset: 7927},
																							val:        "forall",
																							ignoreCase: false,
																							want:       "\"forall\"",
																						},
																						&litMatcher{
																							pos:        position{line: 296, col: 21, offset: 7938},
																							val:        "‚àÄ",
																							ignoreCase: false,
																							want:       "\"‚àÄ\"",
																						},
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 110, col: 24, offset: 2435},
																				val:        "[_A-Za-z]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 113, col: 43, offset: 2602},
																				expr: &charClassMatcher{
																					pos:        position{line: 111, col: 23, offset: 2469},
																					val:        "[_/-A-Za-z0-9]",
																					chars:      []rune{'_', '/', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 129, col: 29, offset: 3100},
													run: (*parser).callonLabels72,
													expr: &litMatcher{
														pos:        position{line: 273, col: 8, offset: 7515},
														val:        "Some",
														ignoreCase: false,
														want:       "\"Some\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 619, col: 44, offset: 19587},
											name: "_",
										},
										&zeroOrMoreExpr{
											pos: position{line: 619, col: 46, offset: 19589},
											expr: &seqExpr{
												pos: position{line: 619, col: 47, offset: 19590},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 619, col: 47, offset: 19590},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&ruleRefExpr{
														pos:  position{line: 619, col: 51, offset: 19594},
														name: "_",
													},
													&choiceExpr{
														pos: position{line: 129, col: 18, offset: 3089},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 121, col: 9, offset: 2803},
																run: (*parser).callonLabels80,
																expr: &seqExpr{
																	pos: position{line: 121, col: 9, offset: 2803},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 121, col: 9, offset: 2803},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 121, col: 13, offset: 2807},
																			label: "label",
																			expr: &actionExpr{
																				pos: position{line: 119, col: 15, offset: 2744},
																				run: (*parser).callonLabels84,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 119, col: 15, offset: 2744},
																					expr: &charClassMatcher{
																						pos:        position{line: 118, col: 19, offset: 2707},
																						val:        "[ -_a-~]",
																						ranges:     []rune{' ', '_', 'a', '~'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 121, col: 31, offset: 2825},
																			val:        "`",
																			ignoreCase: false,
																			want:       "\"`\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 122, col: 9, offset: 2859},
																run: (*parser).callonLabels88,
																expr: &labeledExpr{
																	pos:   position{line: 122, col: 9, offset: 2859},
																	label: "label",
																	expr: &choiceExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 112, col: 15, offset: 2500},
																				run: (*parser).callonLabels91,
																				expr: &seqExpr{
																					pos: position{line: 112, col: 15, offset: 2500},
																					exprs: []interface{}{
																						&choiceExpr{
																							pos: position{line: 278, col: 5, offset: 7577},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 260, col: 6, offset: 7254},
																									val:        "if",
																									ignoreCase: false,
																									want:       "\"if\"",
																								},
																								&litMatcher{
																									pos:        position{line: 261, col: 8, offset: 7268},
																									val:        "then",
																									ignoreCase: false,
																									want:       "\"then\"",
																								},
																								&litMatcher{
																									pos:        position{line: 262, col: 8, offset: 7284},
																									val:        "else",
																									ignoreCase: false,
																									want:       "\"else\"",
																								},
																								&litMatcher{
																									pos:        position{line: 263, col: 7, offset: 7299},
																									val:        "let",
																									ignoreCase: false,
																									want:       "\"let\"",
																								},
																								&litMatcher{
																									pos:        position{line: 264, col: 6, offset: 7312},
																									val:        "in",
																									ignoreCase: false,
																									want:       "\"in\"",
																								},
																								&litMatcher{
																									pos:        position{line: 266, col: 9, offset: 7339},
																									val:        "using",
																									ignoreCase: false,
																									want:       "\"using\"",
																								},
																								&actionExpr{
																									pos: position{line: 268, col: 11, offset: 7377},
																									run: (*parser).callonLabels100,
																									expr: &seqExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 268, col: 11, offset: 7377},
																												val:        "missing",
																												ignoreCase: false,
																												want:       "\"missing\"",
																											},
																											&notExpr{
																												pos: position{line: 268, col: 21, offset: 7387},
																												expr: &charClassMatcher{
																													pos:        position{line: 111, col: 23, offset: 2469},
																													val:        "[_/-A-Za-z0-9]",
																													chars:      []rune{'_', '/', '-'},
																													ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 275, col: 10, offset: 7551},
																									val:        "assert",
																									ignoreCase: false,
																									want:       "\"assert\"",
																								},
																								&litMatcher{
																									pos:        position{line: 265, col: 6, offset: 7324},
																									val:        "as",
																									ignoreCase: false,
																									want:       "\"as\"",
																								},
																								&litMatcher{
																									pos:        position{line: 271, col: 12, offset: 7481},
																									val:        "Infinity",
																									ignoreCase: false,
																									want:       "\"Infinity\"",
																								},
																								&litMatcher{
																									pos:        position{line: 272, col: 7, offset: 7500},
																									val:        "NaN",
																									ignoreCase: false,
																									want:       "\"NaN\"",
																								},
																								&litMatcher{
																									pos:        position{line: 267, col: 9, offset: 7357},
																									val:        "merge",
																									ignoreCase: false,
																									want:       "\"merge\"",
																								},
																								&litMatcher{
																									pos:        position{line: 273, col: 8, offset: 7515},
																									val:        "Some",
																									ignoreCase: false,
																									want:       "\"Some\"",
																								},
																								&litMatcher{
																									pos:        position{line: 274, col: 9, offset: 7532},
																									val:        "toMap",
																									ignoreCase: false,
																									want:       "\"toMap\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 10, offset: 7927},
																									val:        "forall",
																									ignoreCase: false,
																									want:       "\"forall\"",
																								},
																								&litMatcher{
																									pos:        position{line: 296, col: 21, offset: 7938},
																									val:        "‚àÄ",
																									ignoreCase: false,
																									want:       "\"‚àÄ\"",
																								},
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 112, col: 23, offset: 2508},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				run: (*parser).callonLabels116,
																				expr: &seqExpr{
																					pos: position{line: 113, col: 13, offset: 2572},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 113, col: 13, offset: 2572},
																							expr: &choiceExpr{
																								pos: position{line: 278, col: 5, offset: 7577},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 260, col: 6, offset: 7254},
																										val:        "if",
																										ignoreCase: false,
																										want:       "\"if\"",
																									},
																									&litMatcher{
																										pos:        position{line: 261, col: 8, offset: 7268},
																										val:        "then",
																										ignoreCase: false,
																										want:       "\"then\"",
																									},
																									&litMatcher{
																										pos:        position{line: 262, col: 8, offset: 7284},
																										val:        "else",
																										ignoreCase: false,
																										want:       "\"else\"",
																									},
																									&litMatcher{
																										pos:        position{line: 263, col: 7, offset: 7299},
																										val:        "let",
																										ignoreCase: false,
																										want:       "\"let\"",
																									},
																									&litMatcher{
																										pos:        position{line: 264, col: 6, offset: 7312},
																										val:        "in",
																										ignoreCase: false,
																										want:       "\"in\"",
																									},
																									&litMatcher{
																										pos:        position{line: 266, col: 9, offset: 7339},
																										val:        "using",
																										ignoreCase: false,
																										want:       "\"using\"",
																									},
																									&actionExpr{
																										pos: position{line: 268, col: 11, offset: 7377},
																										run: (*parser).callonLabels126,
																										expr: &seqExpr{
																											pos: position{line: 268, col: 11, offset: 7377},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 268, col: 11, offset: 7377},
																													val:        "missing",
																													ignoreCase: false,
																													want:       "\"missing\"",
																												},
																												&notExpr{
																													pos: position{line: 268, col: 21, offset: 7387},
																													expr: &charClassMatcher{
																														pos:        position{line: 111, col: 23, offset: 2469},
																														val:        "[_/-A-Za-z0-9]",
																														chars:      []rune{'_', '/', '-'},
																														ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 275, col: 10, offset: 7551},
																										val:        "assert",
																										ignoreCase: false,
																										want:       "\"assert\"",
																									},
																									&litMatcher{
																										pos:        position{line: 265, col: 6, offset: 7324},
																										val:        "as",
																										ignoreCase: false,
																										want:       "\"as\"",
																									},
																									&litMatcher{
																										pos:        position{line: 271, col: 12, offset: 7481},
																										val:        "Infinity",
																										ignoreCase: false,
																										want:       "\"Infinity\"",
																									},
																									&litMatcher{
																										pos:        position{line: 272, col: 7, offset: 7500},
																										val:        "NaN",
																										ignoreCase: false,
																										want:       "\"NaN\"",
																									},
																									&litMatcher{
																										pos:        position{line: 267, col: 9, offset: 7357},
																										val:        "merge",
																										ignoreCase: false,
																										want:       "\"merge\"",
																									},
																									&litMatcher{
																										pos:        position{line: 273, col: 8, offset: 7515},
																										val:        "Some",
																										ignoreCase: false,
																										want:       "\"Some\"",
																									},
																									&litMatcher{
																										pos:        position{line: 274, col: 9, offset: 7532},
																										val:        "toMap",
																										ignoreCase: false,
																										want:       "\"toMap\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 10, offset: 7927},
																										val:        "forall",
																										ignoreCase: false,
																										want:       "\"forall\"",
																									},
																									&litMatcher{
																										pos:        position{line: 296, col: 21, offset: 7938},
																										val:        "‚àÄ",
																										ignoreCase: false,
																										want:       "\"‚àÄ\"",
																									},
																								},
																							},
																						},
																						&charClassMatcher{
																							pos:        position{line: 110, col: 24, offset: 2435},
																							val:        "[_A-Za-z]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'A', 'Z', 'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 113, col: 43, offset: 2602},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 129, col: 29, offset: 3100},
																run: (*parser).callonLabels143,
																expr: &litMatcher{
																	pos:        position{line: 273, col: 8, offset: 7515},
																	val:        "Some",
																	ignoreCase: false,
																	want:       "\"Some\"",
																},
															},
														},
													},
													&ruleRefExpr{
														pos:  position{line: 619, col: 68, offset: 19611},
														name: "_",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 619, col: 76, offset: 19619},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "TypeSelector",
			pos:  position{line: 629, col: 1, offset: 19915},
			expr: &actionExpr{
				pos: position{line: 629, col: 16, offset: 19932},
				run: (*parser).callonTypeSelector1,
				expr: &seqExpr{
					pos: position{line: 629, col: 16, offset: 19932},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 629, col: 16, offset: 19932},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 20, offset: 19936},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 629, col: 22, offset: 19938},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 24, offset: 19940},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 629, col: 35, offset: 19951},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 629, col: 37, offset: 19953},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "PrimitiveExpression",
			pos:  position{line: 631, col: 1, offset: 19976},
			expr: &choiceExpr{
				pos: position{line: 632, col: 7, offset: 20006},
				alternatives: []interface{}{
					&labeledExpr{
						pos:   position{line: 310, col: 17, offset: 8255},
						label: "d",
						expr: &actionExpr{
							pos: position{line: 302, col: 24, offset: 8043},
							run: (*parser).callonPrimitiveExpression3,
							expr: &seqExpr{
								pos: position{line: 302, col: 24, offset: 8043},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 302, col: 24, offset: 8043},
										expr: &charClassMatcher{
											pos:        position{line: 302, col: 24, offset: 8043},
											val:        "[+-]",
											chars:      []rune{'+', '-'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 302, col: 30, offset: 8049},
										expr: &charClassMatcher{
											pos:        position{line: 106, col: 9, offset: 2376},
											val:        "[0-9]",
											ranges:     []rune{'0', '9'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&choiceExpr{
										pos: position{line: 302, col: 39, offset: 8058},
										alternatives: []interface{}{
											&seqExpr{
												pos: position{line: 302, col: 39, offset: 8058},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 302, col: 39, offset: 8058},
														val:        ".",
														ignoreCase: false,
														want:       "\".\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 302, col: 43, offset: 8062},
														expr: &charClassMatcher{
															pos:        position{line: 106, col: 9, offset: 2376},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 302, col: 50, offset: 8069},
														expr: &seqExpr{
															pos: position{line: 300, col: 12, offset: 7999},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 300, col: 12, offset: 7999},
																	val:        "e",
																	ignoreCase: true,
																	want:       "\"e\"i",
																},
																&zeroOrOneExpr{
																	pos: position{line: 300, col: 17, offset: 8004},
																	expr: &charClassMatcher{
																		pos:        position{line: 300, col: 17, offset: 8004},
																		val:        "[+-]",
																		chars:      []rune{'+', '-'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 300, col: 23, offset: 8010},
																	expr: &charClassMatcher{
																		pos:        position{line: 106, col: 9, offset: 2376},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&seqExpr{
												pos: position{line: 300, col: 12, offset: 7999},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 300, col: 12, offset: 7999},
														val:        "e",
														ignoreCase: true,
														want:       "\"e\"i",
													},
													&zeroOrOneExpr{
														pos: position{line: 300, col: 17, offset: 8004},
														expr: &charClassMatcher{
															pos:        position{line: 300, col: 17, offset: 8004},
															val:        "[+-]",
															chars:      []rune{'+', '-'},
															ignoreCase: false,
															inverted:   false,
														},
													},
													&oneOrMoreExpr{
														pos: position{line: 300, col: 23, offset: 8010},
														expr: &charClassMatcher{
															pos:        position{line: 106, col: 9, offset: 2376},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 311, col: 5, offset: 8282},
						run: (*parser).callonPrimitiveExpression27,
						expr: &litMatcher{
							pos:        position{line: 271, col: 12, offset: 7481},
							val:        "Infinity",
							ignoreCase: false,
							want:       "\"Infinity\"",
						},
					},
					&actionExpr{
						pos: position{line: 312, col: 5, offset: 8334},
						run: (*parser).callonPrimitiveExpression29,
						expr: &litMatcher{
							pos:        position{line: 312, col: 5, offset: 8334},
							val:        "-Infinity",
							ignoreCase: false,
							want:       "\"-Infinity\"",
						},
					},
					&actionExpr{
						pos: position{line: 313, col: 5, offset: 8391},
						run: (*parser).callonPrimitiveExpression31,
						expr: &litMatcher{
							pos:        position{line: 272, col: 7, offset: 7500},
							val:        "NaN",
							ignoreCase: false,
							want:       "\"NaN\"",
						},
					},
					&actionExpr{
						pos: position{line: 317, col: 3, offset: 8492},
						run: (*parser).callonPrimitiveExpression33,
						expr: &choiceExpr{
							pos: position{line: 317, col: 4, offset: 8493},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 317, col: 4, offset: 8493},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 317, col: 4, offset: 8493},
											val:        "0x",
											ignoreCase: false,
											want:       "\"0x\"",
										},
										&oneOrMoreExpr{
											pos: position{line: 317, col: 9, offset: 8498},
											expr: &choiceExpr{
												pos: position{line: 108, col: 10, offset: 2394},
												alternatives: []interface{}{
													&charClassMatcher{
														pos:        position{line: 106, col: 9, offset: 2376},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
													&charClassMatcher{
														pos:        position{line: 108, col: 18, offset: 2402},
														val:        "[a-f]i",
														ranges:     []rune{'a', 'f'},
														ignoreCase: true,
														inverted:   false,
													},
												},
											},
										},
									},
								},
								&seqExpr{
									pos: position{line: 317, col: 19, offset: 8508},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 317, col: 19, offset: 8508},
											val:        "[1-9]",
											ranges:     []rune{'1', '9'},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 317, col: 25, offset: 8514},
											expr: &charClassMatcher{
												pos:        position{line: 106, col: 9, offset: 2376},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 322, col: 5, offset: 8650},
						run: (*parser).callonPrimitiveExpression45,
						expr: &seqExpr{
							pos: position{line: 322, col: 5, offset: 8650},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 322, col: 5, offset: 8650},
									val:        "0",
									ignoreCase: false,
									want:       "\"0\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 322, col: 9, offset: 8654},
									expr: &charClassMatcher{
										pos:        position{line: 106, col: 9, offset: 2376},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 323, col: 5, offset: 8739},
						run: (*parser).callonPrimitiveExpression50,
						expr: &litMatcher{
							pos:        position{line: 323, col: 5, offset: 8739},
							val:        "0",
							ignoreCase: false,
							want:       "\"0\"",
						},
					},
					&actionExpr{
						pos: position{line: 326, col: 5, offset: 8797},
						run: (*parser).callonPrimitiveExpression52,
						expr: &seqExpr{
							pos: position{line: 326, col: 5, offset: 8797},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 326, col: 5, offset: 8797},
									val:        "+",
									ignoreCase: false,
									want:       "\"+\"",
								},
								&labeledExpr{
									pos:   position{line: 326, col: 9, offset: 8801},
									label: "n",
									expr: &choiceExpr{
										pos: position{line: 317, col: 3, offset: 8492},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 317, col: 3, offset: 8492},
												run: (*parser).callonPrimitiveExpression57,
												expr: &choiceExpr{
													pos: position{line: 317, col: 4, offset: 8493},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 317, col: 4, offset: 8493},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 317, col: 4, offset: 8493},
																	val:        "0x",
																	ignoreCase: false,
																	want:       "\"0x\"",
																},
																&oneOrMoreExpr{
																	pos: position{line: 317, col: 9, offset: 8498},
																	expr: &choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 317, col: 19, offset: 8508},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 317, col: 19, offset: 8508},
																	val:        "[1-9]",
																	ranges:     []rune{'1', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 317, col: 25, offset: 8514},
																	expr: &charClassMatcher{
																		pos:        position{line: 106, col: 9, offset: 2376},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 322, col: 5, offset: 8650},
												run: (*parser).callonPrimitiveExpression69,
												expr: &seqExpr{
													pos: position{line: 322, col: 5, offset: 8650},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 322, col: 5, offset: 8650},
															val:        "0",
															ignoreCase: false,
															want:       "\"0\"",
														},
														&oneOrMoreExpr{
															pos: position{line: 322, col: 9, offset: 8654},
															expr: &charClassMatcher{
																pos:        position{line: 106, col: 9, offset: 2376},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 323, col: 5, offset: 8739},
												run: (*parser).callonPrimitiveExpression74,
												expr: &litMatcher{
													pos:        position{line: 323, col: 5, offset: 8739},
													val:        "0",
													ignoreCase: false,
													want:       "\"0\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 8865},
						run: (*parser).callonPrimitiveExpression76,
						expr: &seqExpr{
							pos: position{line: 327, col: 5, offset: 8865},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 327, col: 5, offset: 8865},
									val:        "-",
									ignoreCase: false,
									want:       "\"-\"",
								},
								&labeledExpr{
									pos:   position{line: 327, col: 9, offset: 8869},
									label: "n",
									expr: &choiceExpr{
										pos: position{line: 317, col: 3, offset: 8492},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 317, col: 3, offset: 8492},
												run: (*parser).callonPrimitiveExpression81,
												expr: &choiceExpr{
													pos: position{line: 317, col: 4, offset: 8493},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 317, col: 4, offset: 8493},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 317, col: 4, offset: 8493},
																	val:        "0x",
																	ignoreCase: false,
																	want:       "\"0x\"",
																},
																&oneOrMoreExpr{
																	pos: position{line: 317, col: 9, offset: 8498},
																	expr: &choiceExpr{
																		pos: position{line: 108, col: 10, offset: 2394},
																		alternatives: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 106, col: 9, offset: 2376},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&charClassMatcher{
																				pos:        position{line: 108, col: 18, offset: 2402},
																				val:        "[a-f]i",
																				ranges:     []rune{'a', 'f'},
																				ignoreCase: true,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&seqExpr{
															pos: position{line: 317, col: 19, offset: 8508},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 317, col: 19, offset: 8508},
																	val:        "[1-9]",
																	ranges:     []rune{'1', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 317, col: 25, offset: 8514},
																	expr: &charClassMatcher{
																		pos:        position{line: 106, col: 9, offset: 2376},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 322, col: 5, offset: 8650},
												run: (*parser).callonPrimitiveExpression93,
												expr: &seqExpr{
													pos: position{line: 322, col: 5, offset: 8650},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 322, col: 5, offset: 8650},
															val:        "0",
															ignoreCase: false,
															want:       "\"0\"",
														},
														&oneOrMoreExpr{
															pos: position{line: 322, col: 9, offset: 8654},
															expr: &charClassMatcher{
																pos:        position{line: 106, col: 9, offset: 2376},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 323, col: 5, offset: 8739},
												run: (*parser).callonPrimitiveExpression98,
												expr: &litMatcher{
													pos:        position{line: 323, col: 5, offset: 8739},
													val:        "0",
													ignoreCase: false,
													want:       "\"0\"",
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 635, col: 7, offset: 20068},
						name: "TextLiteral",
					},
					&actionExpr{
						pos: position{line: 636, col: 7, offset: 20086},
						run: (*parser).callonPrimitiveExpression101,
						expr: &seqExpr{
							pos: position{line: 636, col: 7, offset: 20086},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 636, col: 7, offset: 20086},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&ruleRefExpr{
									pos:  position{line: 636, col: 11, offset: 20090},
									name: "_",
								},
								&zeroOrOneExpr{
									pos: position{line: 636, col: 13, offset: 20092},
									expr: &seqExpr{
										pos: position{line: 636, col: 14, offset: 20093},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 636, col: 14, offset: 20093},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&ruleRefExpr{
												pos:  position{line: 636, col: 18, offset: 20097},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 636, col: 22, offset: 20101},
									label: "r",
									expr: &ruleRefExpr{
										pos:  position{line: 636, col: 24, offset: 20103},
										name: "RecordTypeOrLiteral",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 636, col: 44, offset: 20123},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 636, col: 46, offset: 20125},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 637, col: 7, offset: 20153},
						run: (*parser).callonPrimitiveExpression113,
						expr: &seqExpr{
							pos: position{line: 637, col: 7, offset: 20153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 637, col: 7, offset: 20153},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&ruleRefExpr{
									pos:  position{line: 637, col: 11, offset: 20157},
									name: "_",
								},
								&zeroOrOneExpr{
									pos: position{line: 637, col: 13, offset: 20159},
									expr: &seqExpr{
										pos: position{line: 637, col: 14, offset: 20160},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 637, col: 14, offset: 20160},
												val:        "|",
												ignoreCase: false,
												want:       "\"|\"",
											},
											&ruleRefExpr{
												pos:  position{line: 637, col: 18, offset: 20164},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 637, col: 22, offset: 20168},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 637, col: 24, offset: 20170},
										name: "UnionType",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 637, col: 34, offset: 20180},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 637, col: 36, offset: 20182},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 638, col: 7, offset: 20210},
						name: "NonEmptyListLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 639, col: 7, offset: 20236},
						name: "Identifier",
					},
					&actionExpr{
						pos: position{line: 640, col: 7, offset: 20253},
						run: (*parser).callonPrimitiveExpression127,
						expr: &seqExpr{
							pos: position{line: 640, col: 7, offset: 20253},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 640, col: 7, offset: 20253},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 11, offset: 20257},
									name: "_",
								},
								&zeroOrOneExpr{
									pos: position{line: 640, col: 13, offset: 20259},
									expr: &seqExpr{
										pos: position{line: 640, col: 14, offset: 20260},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 640, col: 14, offset: 20260},
												val:        "|",
												ignoreCase: false,
												want:       "\"|\"",
											},
											&ruleRefExpr{
												pos:  position{line: 640, col: 18, offset: 20264},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 640, col: 22, offset: 20268},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 640, col: 24, offset: 20270},
										name: "Expression",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 640, col: 35, offset: 20281},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 640, col: 37, offset: 20283},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RecordTypeOrLiteral",
			pos:  position{line: 642, col: 1, offset: 20306},
			expr: &choiceExpr{
				pos: position{line: 643, col: 7, offset: 20336},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 643, col: 7, offset: 20336},
						run: (*parser).callonRecordTypeOrLiteral2,
						expr: &litMatcher{
							pos:        position{line: 643, col: 7, offset: 20336},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 644, col: 7, offset: 20374},
						name: "NonEmptyRecordType",
					},
					&ruleRefExpr{
						pos:  position{line: 645, col: 7, offset: 20399},
						name: "NonEmptyRecordLiteral",
					},
					&actionExpr{
						pos: position{line: 646, col: 7, offset: 20427},
						run: (*parser).callonRecordTypeOrLiteral6,
						expr: &litMatcher{
							pos:        position{line: 646, col: 7, offset: 20427},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
		},
		{
			name: "MoreRecordType",
			pos:  position{line: 648, col: 1, offset: 20460},
			expr: &actionExpr{
				pos: position{line: 648, col: 18, offset: 20479},
				run: (*parser).callonMoreRecordType1,
				expr: &seqExpr{
					pos: position{line: 648, col: 18, offset: 20479},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 648, col: 18, offset: 20479},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 648, col: 20, offset: 20481},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 24, offset: 20485},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 26, offset: 20487},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 28, offset: 20489},
								name: "RecordTypeEntry",
							},
						},
					},
				},
			},
		},
		{
			name: "NonEmptyRecordType",
			pos:  position{line: 649, col: 1, offset: 20521},
			expr: &actionExpr{
				pos: position{line: 650, col: 7, offset: 20550},
				run: (*parser).callonNonEmptyRecordType1,
				expr: &seqExpr{
					pos: position{line: 650, col: 7, offset: 20550},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 7, offset: 20550},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 13, offset: 20556},
								name: "RecordTypeEntry",
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 29, offset: 20572},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 650, col: 34, offset: 20577},
								expr: &ruleRefExpr{
									pos:  position{line: 650, col: 34, offset: 20577},
									name: "MoreRecordType",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RecordTypeEntry",
			pos:  position{line: 664, col: 1, offset: 21017},
			expr: &actionExpr{
				pos: position{line: 664, col: 19, offset: 21037},
				run: (*parser).callonRecordTypeEntry1,
				expr: &seqExpr{
					pos: position{line: 664, col: 19, offset: 21037},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 664, col: 19, offset: 21037},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 129, col: 18, offset: 3089},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 121, col: 9, offset: 2803},
										run: (*parser).callonRecordTypeEntry5,
										expr: &seqExpr{
											pos: position{line: 121, col: 9, offset: 2803},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 121, col: 9, offset: 2803},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&labeledExpr{
													pos:   position{line: 121, col: 13, offset: 2807},
													label: "label",
													expr: &actionExpr{
														pos: position{line: 119, col: 15, offset: 2744},
														run: (*parser).callonRecordTypeEntry9,
														expr: &oneOrMoreExpr{
															pos: position{line: 119, col: 15, offset: 2744},
															expr: &charClassMatcher{
																pos:        position{line: 118, col: 19, offset: 2707},
																val:        "[ -_a-~]",
																ranges:     []rune{' ', '_', 'a', '~'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 121, col: 31, offset: 2825},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 122, col: 9, offset: 2859},
										run: (*parser).callonRecordTypeEntry13,
										expr: &labeledExpr{
											pos:   position{line: 122, col: 9, offset: 2859},
											label: "label",
											expr: &choiceExpr{
												pos: position{line: 112, col: 15, offset: 2500},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 112, col: 15, offset: 2500},
														run: (*parser).callonRecordTypeEntry16,
														expr: &seqExpr{
															pos: position{line: 112, col: 15, offset: 2500},
															exprs: []interface{}{
																&choiceExpr{
																	pos: position{line: 278, col: 5, offset: 7577},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 260, col: 6, offset: 7254},
																			val:        "if",
																			ignoreCase: false,
																			want:       "\"if\"",
																		},
																		&litMatcher{
																			pos:        position{line: 261, col: 8, offset: 7268},
																			val:        "then",
																			ignoreCase: false,
																			want:       "\"then\"",
																		},
																		&litMatcher{
																			pos:        position{line: 262, col: 8, offset: 7284},
																			val:        "else",
																			ignoreCase: false,
																			want:       "\"else\"",
																		},
																		&litMatcher{
																			pos:        position{line: 263, col: 7, offset: 7299},
																			val:        "let",
																			ignoreCase: false,
																			want:       "\"let\"",
																		},
																		&litMatcher{
																			pos:        position{line: 264, col: 6, offset: 7312},
																			val:        "in",
																			ignoreCase: false,
																			want:       "\"in\"",
																		},
																		&litMatcher{
																			pos:        position{line: 266, col: 9, offset: 7339},
																			val:        "using",
																			ignoreCase: false,
																			want:       "\"using\"",
																		},
																		&actionExpr{
																			pos: position{line: 268, col: 11, offset: 7377},
																			run: (*parser).callonRecordTypeEntry25,
																			expr: &seqExpr{
																				pos: position{line: 268, col: 11, offset: 7377},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 268, col: 11, offset: 7377},
																						val:        "missing",
																						ignoreCase: false,
																						want:       "\"missing\"",
																					},
																					&notExpr{
																						pos: position{line: 268, col: 21, offset: 7387},
																						expr: &charClassMatcher{
																							pos:        position{line: 111, col: 23, offset: 2469},
																							val:        "[_/-A-Za-z0-9]",
																							chars:      []rune{'_', '/', '-'},
																							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 275, col: 10, offset: 7551},
																			val:        "assert",
																			ignoreCase: false,
																			want:       "\"assert\"",
																		},
																		&litMatcher{
																			pos:        position{line: 265, col: 6, offset: 7324},
																			val:        "as",
																			ignoreCase: false,
																			want:       "\"as\"",
																		},
																		&litMatcher{
																			pos:        position{line: 271, col: 12, offset: 7481},
																			val:        "Infinity",
																			ignoreCase: false,
																			want:       "\"Infinity\"",
																		},
																		&litMatcher{
																			pos:        position{line: 272, col: 7, offset: 7500},
																			val:        "NaN",
																			ignoreCase: false,
																			want:       "\"NaN\"",
																		},
																		&litMatcher{
																			pos:        position{line: 267, col: 9, offset: 7357},
																			val:        "merge",
																			ignoreCase: false,
																			want:       "\"merge\"",
																		},
																		&litMatcher{
																			pos:        position{line: 273, col: 8, offset: 7515},
																			val:        "Some",
																			ignoreCase: false,
																			want:       "\"Some\"",
																		},
																		&litMatcher{
																			pos:        position{line: 274, col: 9, offset: 7532},
																			val:        "toMap",
																			ignoreCase: false,
																			want:       "\"toMap\"",
																		},
																		&litMatcher{
																			pos:        position{line: 296, col: 10, offset: 7927},
																			val:        "forall",
																			ignoreCase: false,
																			want:       "\"forall\"",
																		},
																		&litMatcher{
																			pos:        position{line: 296, col: 21, offset: 7938},
																			val:        "‚àÄ",
																			ignoreCase: false,
																			want:       "\"‚àÄ\"",
																		},
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 112, col: 23, offset: 2508},
																	expr: &charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 113, col: 13, offset: 2572},
														run: (*parser).callonRecordTypeEntry41,
														expr: &seqExpr{
															pos: position{line: 113, col: 13, offset: 2572},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 113, col: 13, offset: 2572},
																	expr: &choiceExpr{
																		pos: position{line: 278, col: 5, offset: 7577},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 260, col: 6, offset: 7254},
																				val:        "if",
																				ignoreCase: false,
																				want:       "\"if\"",
																			},
																			&litMatcher{
																				pos:        position{line: 261, col: 8, offset: 7268},
																				val:        "then",
																				ignoreCase: false,
																				want:       "\"then\"",
																			},
																			&litMatcher{
																				pos:        position{line: 262, col: 8, offset: 7284},
																				val:        "else",
																				ignoreCase: false,
																				want:       "\"else\"",
																			},
																			&litMatcher{
																				pos:        position{line: 263, col: 7, offset: 7299},
																				val:        "let",
																				ignoreCase: false,
																				want:       "\"let\"",
																			},
																			&litMatcher{
																				pos:        position{line: 264, col: 6, offset: 7312},
																				val:        "in",
																				ignoreCase: false,
																				want:       "\"in\"",
																			},
																			&litMatcher{
																				pos:        position{line: 266, col: 9, offset: 7339},
																				val:        "using",
																				ignoreCase: false,
																				want:       "\"using\"",
																			},
																			&actionExpr{
																				pos: position{line: 268, col: 11, offset: 7377},
																				run: (*parser).callonRecordTypeEntry51,
																				expr: &seqExpr{
																					pos: position{line: 268, col: 11, offset: 7377},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 268, col: 11, offset: 7377},
																							val:        "missing",
																							ignoreCase: false,
																							want:       "\"missing\"",
																						},
																						&notExpr{
																							pos: position{line: 268, col: 21, offset: 7387},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 275, col: 10, offset: 7551},
																				val:        "assert",
																				ignoreCase: false,
																				want:       "\"assert\"",
																			},
																			&litMatcher{
																				pos:        position{line: 265, col: 6, offset: 7324},
																				val:        "as",
																				ignoreCase: false,
																				want:       "\"as\"",
																			},
																			&litMatcher{
																				pos:        position{line: 271, col: 12, offset: 7481},
																				val:        "Infinity",
																				ignoreCase: false,
																				want:       "\"Infinity\"",
																			},
																			&litMatcher{
																				pos:        position{line: 272, col: 7, offset: 7500},
																				val:        "NaN",
																				ignoreCase: false,
																				want:       "\"NaN\"",
																			},
																			&litMatcher{
																				pos:        position{line: 267, col: 9, offset: 7357},
																				val:        "merge",
																				ignoreCase: false,
																				want:       "\"merge\"",
																			},
																			&litMatcher{
																				pos:        position{line: 273, col: 8, offset: 7515},
																				val:        "Some",
																				ignoreCase: false,
																				want:       "\"Some\"",
																			},
																			&litMatcher{
																				pos:        position{line: 274, col: 9, offset: 7532},
																				val:        "toMap",
																				ignoreCase: false,
																				want:       "\"toMap\"",
																			},
																			&litMatcher{
																				pos:        position{line: 296, col: 10, offset: 7927},
																				val:        "forall",
																				ignoreCase: false,
																				want:       "\"forall\"",
																			},
																			&litMatcher{
																				pos:        position{line: 296, col: 21, offset: 7938},
																				val:        "‚àÄ",
																				ignoreCase: false,
																				want:       "\"‚àÄ\"",
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 110, col: 24, offset: 2435},
																	val:        "[_A-Za-z]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 113, col: 43, offset: 2602},
																	expr: &charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 129, col: 29, offset: 3100},
										run: (*parser).callonRecordTypeEntry68,
										expr: &litMatcher{
											pos:        position{line: 273, col: 8, offset: 7515},
											val:        "Some",
											ignoreCase: false,
											want:       "\"Some\"",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 664, col: 39, offset: 21057},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 664, col: 41, offset: 21059},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 664, col: 45, offset: 21063},
							name: "_1",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 48, offset: 21066},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 53, offset: 21071},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "MoreRecordLiteral",
			pos:  position{line: 668, col: 1, offset: 21142},
			expr: &actionExpr{
				pos: position{line: 668, col: 21, offset: 21164},
				run: (*parser).callonMoreRecordLiteral1,
				expr: &seqExpr{
					pos: position{line: 668, col: 21, offset: 21164},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 668, col: 21, offset: 21164},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 668, col: 23, offset: 21166},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 668, col: 27, offset: 21170},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 29, offset: 21172},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 31, offset: 21174},
								name: "RecordLiteralEntry",
							},
						},
					},
				},
			},
		},
		{
			name: "NonEmptyRecordLiteral",
			pos:  position{line: 669, col: 1, offset: 21209},
			expr: &actionExpr{
				pos: position{line: 670, col: 7, offset: 21241},
				run: (*parser).callonNonEmptyRecordLiteral1,
				expr: &seqExpr{
					pos: position{line: 670, col: 7, offset: 21241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 670, col: 7, offset: 21241},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 670, col: 13, offset: 21247},
								name: "RecordLiteralEntry",
							},
						},
						&labeledExpr{
							pos:   position{line: 670, col: 32, offset: 21266},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 670, col: 37, offset: 21271},
								expr: &ruleRefExpr{
									pos:  position{line: 670, col: 37, offset: 21271},
									name: "MoreRecordLiteral",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RecordLiteralEntry",
			pos:  position{line: 689, col: 1, offset: 21848},
			expr: &actionExpr{
				pos: position{line: 689, col: 22, offset: 21871},
				run: (*parser).callonRecordLiteralEntry1,
				expr: &seqExpr{
					pos: position{line: 689, col: 22, offset: 21871},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 689, col: 22, offset: 21871},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 129, col: 18, offset: 3089},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 121, col: 9, offset: 2803},
										run: (*parser).callonRecordLiteralEntry5,
										expr: &seqExpr{
											pos: position{line: 121, col: 9, offset: 2803},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 121, col: 9, offset: 2803},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&labeledExpr{
													pos:   position{line: 121, col: 13, offset: 2807},
													label: "label",
													expr: &actionExpr{
														pos: position{line: 119, col: 15, offset: 2744},
														run: (*parser).callonRecordLiteralEntry9,
														expr: &oneOrMoreExpr{
															pos: position{line: 119, col: 15, offset: 2744},
															expr: &charClassMatcher{
																pos:        position{line: 118, col: 19, offset: 2707},
																val:        "[ -_a-~]",
																ranges:     []rune{' ', '_', 'a', '~'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 121, col: 31, offset: 2825},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 122, col: 9, offset: 2859},
										run: (*parser).callonRecordLiteralEntry13,
										expr: &labeledExpr{
											pos:   position{line: 122, col: 9, offset: 2859},
											label: "label",
											expr: &choiceExpr{
												pos: position{line: 112, col: 15, offset: 2500},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 112, col: 15, offset: 2500},
														run: (*parser).callonRecordLiteralEntry16,
														expr: &seqExpr{
															pos: position{line: 112, col: 15, offset: 2500},
															exprs: []interface{}{
																&choiceExpr{
																	pos: position{line: 278, col: 5, offset: 7577},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 260, col: 6, offset: 7254},
																			val:        "if",
																			ignoreCase: false,
																			want:       "\"if\"",
																		},
																		&litMatcher{
																			pos:        position{line: 261, col: 8, offset: 7268},
																			val:        "then",
																			ignoreCase: false,
																			want:       "\"then\"",
																		},
																		&litMatcher{
																			pos:        position{line: 262, col: 8, offset: 7284},
																			val:        "else",
																			ignoreCase: false,
																			want:       "\"else\"",
																		},
																		&litMatcher{
																			pos:        position{line: 263, col: 7, offset: 7299},
																			val:        "let",
																			ignoreCase: false,
																			want:       "\"let\"",
																		},
																		&litMatcher{
																			pos:        position{line: 264, col: 6, offset: 7312},
																			val:        "in",
																			ignoreCase: false,
																			want:       "\"in\"",
																		},
																		&litMatcher{
																			pos:        position{line: 266, col: 9, offset: 7339},
																			val:        "using",
																			ignoreCase: false,
																			want:       "\"using\"",
																		},
																		&actionExpr{
																			pos: position{line: 268, col: 11, offset: 7377},
																			run: (*parser).callonRecordLiteralEntry25,
																			expr: &seqExpr{
																				pos: position{line: 268, col: 11, offset: 7377},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 268, col: 11, offset: 7377},
																						val:        "missing",
																						ignoreCase: false,
																						want:       "\"missing\"",
																					},
																					&notExpr{
																						pos: position{line: 268, col: 21, offset: 7387},
																						expr: &charClassMatcher{
																							pos:        position{line: 111, col: 23, offset: 2469},
																							val:        "[_/-A-Za-z0-9]",
																							chars:      []rune{'_', '/', '-'},
																							ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 275, col: 10, offset: 7551},
																			val:        "assert",
																			ignoreCase: false,
																			want:       "\"assert\"",
																		},
																		&litMatcher{
																			pos:        position{line: 265, col: 6, offset: 7324},
																			val:        "as",
																			ignoreCase: false,
																			want:       "\"as\"",
																		},
																		&litMatcher{
																			pos:        position{line: 271, col: 12, offset: 7481},
																			val:        "Infinity",
																			ignoreCase: false,
																			want:       "\"Infinity\"",
																		},
																		&litMatcher{
																			pos:        position{line: 272, col: 7, offset: 7500},
																			val:        "NaN",
																			ignoreCase: false,
																			want:       "\"NaN\"",
																		},
																		&litMatcher{
																			pos:        position{line: 267, col: 9, offset: 7357},
																			val:        "merge",
																			ignoreCase: false,
																			want:       "\"merge\"",
																		},
																		&litMatcher{
																			pos:        position{line: 273, col: 8, offset: 7515},
																			val:        "Some",
																			ignoreCase: false,
																			want:       "\"Some\"",
																		},
																		&litMatcher{
																			pos:        position{line: 274, col: 9, offset: 7532},
																			val:        "toMap",
																			ignoreCase: false,
																			want:       "\"toMap\"",
																		},
																		&litMatcher{
																			pos:        position{line: 296, col: 10, offset: 7927},
																			val:        "forall",
																			ignoreCase: false,
																			want:       "\"forall\"",
																		},
																		&litMatcher{
																			pos:        position{line: 296, col: 21, offset: 7938},
																			val:        "‚àÄ",
																			ignoreCase: false,
																			want:       "\"‚àÄ\"",
																		},
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 112, col: 23, offset: 2508},
																	expr: &charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 113, col: 13, offset: 2572},
														run: (*parser).callonRecordLiteralEntry41,
														expr: &seqExpr{
															pos: position{line: 113, col: 13, offset: 2572},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 113, col: 13, offset: 2572},
																	expr: &choiceExpr{
																		pos: position{line: 278, col: 5, offset: 7577},
																		alternatives: []interface{}{
																			&litMatcher{
																				pos:        position{line: 260, col: 6, offset: 7254},
																				val:        "if",
																				ignoreCase: false,
																				want:       "\"if\"",
																			},
																			&litMatcher{
																				pos:        position{line: 261, col: 8, offset: 7268},
																				val:        "then",
																				ignoreCase: false,
																				want:       "\"then\"",
																			},
																			&litMatcher{
																				pos:        position{line: 262, col: 8, offset: 7284},
																				val:        "else",
																				ignoreCase: false,
																				want:       "\"else\"",
																			},
																			&litMatcher{
																				pos:        position{line: 263, col: 7, offset: 7299},
																				val:        "let",
																				ignoreCase: false,
																				want:       "\"let\"",
																			},
																			&litMatcher{
																				pos:        position{line: 264, col: 6, offset: 7312},
																				val:        "in",
																				ignoreCase: false,
																				want:       "\"in\"",
																			},
																			&litMatcher{
																				pos:        position{line: 266, col: 9, offset: 7339},
																				val:        "using",
																				ignoreCase: false,
																				want:       "\"using\"",
																			},
																			&actionExpr{
																				pos: position{line: 268, col: 11, offset: 7377},
																				run: (*parser).callonRecordLiteralEntry51,
																				expr: &seqExpr{
																					pos: position{line: 268, col: 11, offset: 7377},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 268, col: 11, offset: 7377},
																							val:        "missing",
																							ignoreCase: false,
																							want:       "\"missing\"",
																						},
																						&notExpr{
																							pos: position{line: 268, col: 21, offset: 7387},
																							expr: &charClassMatcher{
																								pos:        position{line: 111, col: 23, offset: 2469},
																								val:        "[_/-A-Za-z0-9]",
																								chars:      []rune{'_', '/', '-'},
																								ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 275, col: 10, offset: 7551},
																				val:        "assert",
																				ignoreCase: false,
																				want:       "\"assert\"",
																			},
																			&litMatcher{
																				pos:        position{line: 265, col: 6, offset: 7324},
																				val:        "as",
																				ignoreCase: false,
																				want:       "\"as\"",
																			},
																			&litMatcher{
																				pos:        position{line: 271, col: 12, offset: 7481},
																				val:        "Infinity",
																				ignoreCase: false,
																				want:       "\"Infinity\"",
																			},
																			&litMatcher{
																				pos:        position{line: 272, col: 7, offset: 7500},
																				val:        "NaN",
																				ignoreCase: false,
																				want:       "\"NaN\"",
																			},
																			&litMatcher{
																				pos:        position{line: 267, col: 9, offset: 7357},
																				val:        "merge",
																				ignoreCase: false,
																				want:       "\"merge\"",
																			},
																			&litMatcher{
																				pos:        position{line: 273, col: 8, offset: 7515},
																				val:        "Some",
																				ignoreCase: false,
																				want:       "\"Some\"",
																			},
																			&litMatcher{
																				pos:        position{line: 274, col: 9, offset: 7532},
																				val:        "toMap",
																				ignoreCase: false,
																				want:       "\"toMap\"",
																			},
																			&litMatcher{
																				pos:        position{line: 296, col: 10, offset: 7927},
																				val:        "forall",
																				ignoreCase: false,
																				want:       "\"forall\"",
																			},
																			&litMatcher{
																				pos:        position{line: 296, col: 21, offset: 7938},
																				val:        "‚àÄ",
																				ignoreCase: false,
																				want:       "\"‚àÄ\"",
																			},
																		},
																	},
																},
																&charClassMatcher{
																	pos:        position{line: 110, col: 24, offset: 2435},
																	val:        "[_A-Za-z]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 113, col: 43, offset: 2602},
																	expr: &charClassMatcher{
																		pos:        position{line: 111, col: 23, offset: 2469},
																		val:        "[_/-A-Za-z0-9]",
																		chars:      []rune{'_', '/', '-'},
																		ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 129, col: 29, offset: 3100},
										run: (*parser).callonRecordLiteralEntry68,
										expr: &litMatcher{
											pos:        position{line: 273, col: 8, offset: 7515},
											val:        "Some",
											ignoreCase: false,
											want:       "\"Some\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 689, col: 42, offset: 21891},
							label: "children",
							expr: &zeroOrMoreExpr{
								pos: position{line: 689, col: 51, offset: 21900},
								expr: &seqExpr{
									pos: position{line: 689, col: 52, offset: 21901},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 689, col: 52, offset: 21901},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 689, col: 54, offset: 21903},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&ruleRefExpr{
											pos:  position{line: 689, col: 58, offset: 21907},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 129, col: 18, offset: 3089},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 121, col: 9, offset: 2803},
													run: (*parser).callonRecordLiteralEntry77,
													expr: &seqExpr{
														pos: position{line: 121, col: 9, offset: 2803},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 121, col: 9, offset: 2803},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
															&labeledExpr{
																pos:   position{line: 121, col: 13, offset: 2807},
																label: "label",
																expr: &actionExpr{
																	pos: position{line: 119, col: 15, offset: 2744},
																	run: (*parser).callonRecordLiteralEntry81,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 119, col: 15, offset: 2744},
																		expr: &charClassMatcher{
																			pos:        position{line: 118, col: 19, offset: 2707},
																			val:        "[ -_a-~]",
																			ranges:     []rune{' ', '_', 'a', '~'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 121, col: 31, offset: 2825},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 122, col: 9, offset: 2859},
													run: (*parser).callonRecordLiteralEntry85,
													expr: &labeledExpr{
														pos:   position{line: 122, col: 9, offset: 2859},
														label: "label",
														expr: &choiceExpr{
															pos: position{line: 112, col: 15, offset: 2500},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 112, col: 15, offset: 2500},
																	run: (*parser).callonRecordLiteralEntry88,
																	expr: &seqExpr{
																		pos: position{line: 112, col: 15, offset: 2500},
																		exprs: []interface{}{
																			&choiceExpr{
																				pos: position{line: 278, col: 5, offset: 7577},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 260, col: 6, offset: 7254},
																						val:        "if",
																						ignoreCase: false,
																						want:       "\"if\"",
																					},
																					&litMatcher{
																						pos:        position{line: 261, col: 8, offset: 7268},
																						val:        "then",
																						ignoreCase: false,
																						want:       "\"then\"",
																					},
																					&litMatcher{
																						pos:        position{line: 262, col: 8, offset: 7284},
																						val:        "else",
																						ignoreCase: false,
																						want:       "\"else\"",
																					},
																					&litMatcher{
																						pos:        position{line: 263, col: 7, offset: 7299},
																						val:        "let",
																						ignoreCase: false,
																						want:       "\"let\"",
																					},
																					&litMatcher{
																						pos:        position{line: 264, col: 6, offset: 7312},
																						val:        "in",
																						ignoreCase: false,
																						want:       "\"in\"",
																					},
																					&litMatcher{
																						pos:        position{line: 266, col: 9, offset: 7339},
																						val:        "using",
																						ignoreCase: false,
																						want:       "\"using\"",
																					},
																					&actionExpr{
																						pos: position{line: 268, col: 11, offset: 7377},
																						run: (*parser).callonRecordLiteralEntry97,
																						expr: &seqExpr{
																							pos: position{line: 268, col: 11, offset: 7377},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 268, col: 11, offset: 7377},
																									val:        "missing",
																									ignoreCase: false,
																									want:       "\"missing\"",
																								},
																								&notExpr{
																									pos: position{line: 268, col: 21, offset: 7387},
																									expr: &charClassMatcher{
																										pos:        position{line: 111, col: 23, offset: 2469},
																										val:        "[_/-A-Za-z0-9]",
																										chars:      []rune{'_', '/', '-'},
																										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 275, col: 10, offset: 7551},
																						val:        "assert",
																						ignoreCase: false,
																						want:       "\"assert\"",
																					},
																					&litMatcher{
																						pos:        position{line: 265, col: 6, offset: 7324},
																						val:        "as",
																						ignoreCase: false,
																						want:       "\"as\"",
																					},
																					&litMatcher{
																						pos:        position{line: 271, col: 12, offset: 7481},
																						val:        "Infinity",
																						ignoreCase: false,
																						want:       "\"Infinity\"",
																					},
																					&litMatcher{
																						pos:        position{line: 272, col: 7, offset: 7500},
																						val:        "NaN",
																						ignoreCase: false,
																						want:       "\"NaN\"",
																					},
																					&litMatcher{
																						pos:        position{line: 267, col: 9, offset: 7357},
																						val:        "merge",
																						ignoreCase: false,
																						want:       "\"merge\"",
																					},
																					&litMatcher{
																						pos:        position{line: 273, col: 8, offset: 7515},
																						val:        "Some",
																						ignoreCase: false,
																						want:       "\"Some\"",
																					},
																					&litMatcher{
																						pos:        position{line: 274, col: 9, offset: 7532},
																						val:        "toMap",
																						ignoreCase: false,
																						want:       "\"toMap\"",
																					},
																					&litMatcher{
																						pos:        position{line: 296, col: 10, offset: 7927},
																						val:        "forall",
																						ignoreCase: false,
																						want:       "\"forall\"",
																					},
																					&litMatcher{
																						pos:        position{line: 296, col: 21, offset: 7938},
																						val:        "‚àÄ",
																						ignoreCase: false,
																						want:       "\"‚àÄ\"",
																					},
																				},
																			},
																			&oneOrMoreExpr{
																				pos: position{line: 112, col: 23, offset: 2508},
																				expr: &charClassMatcher{
																					pos:        position{line: 111, col: 23, offset: 2469},
																					val:        "[_/-A-Za-z0-9]",
																					chars:      []rune{'_', '/', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 113, col: 13, offset: 2572},
																	run: (*parser).callonRecordLiteralEntry113,
																	expr: &seqExpr{
																		pos: position{line: 113, col: 13, offset: 2572},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 113, col: 13, offset: 2572},
																				expr: &choiceExpr{
																					pos: position{line: 278, col: 5, offset: 7577},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 260, col: 6, offset: 7254},
																							val:        "if",
																							ignoreCase: false,
																							want:       "\"if\"",
																						},
																						&litMatcher{
																							pos:        position{line: 261, col: 8, offset: 7268},
																							val:        "then",
																							ignoreCase: false,
																							want:       "\"then\"",
																						},
																						&litMatcher{
																							pos:        position{line: 262, col: 8, offset: 7284},
																							val:        "else",
																							ignoreCase: false,
																							want:       "\"else\"",
																						},
																						&litMatcher{
																							pos:        position{line: 263, col: 7, offset: 7299},
																							val:        "let",
																							ignoreCase: false,
																							want:       "\"let\"",
																						},
																						&litMatcher{
																							pos:        position{line: 264, col: 6, offset: 7312},
																							val:        "in",
																							ignoreCase: false,
																							want:       "\"in\"",
																						},
																						&litMatcher{
																							pos:        position{line: 266, col: 9, offset: 7339},
																							val:        "using",
																							ignoreCase: false,
																							want:       "\"using\"",
																						},
																						&actionExpr{
																							pos: position{line: 268, col: 11, offset: 7377},
																							run: (*parser).callonRecordLiteralEntry123,
																							expr: &seqExpr{
																								pos: position{line: 268, col: 11, offset: 7377},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 268, col: 11, offset: 7377},
																										val:        "missing",
																										ignoreCase: false,
																										want:       "\"missing\"",
																									},
																									&notExpr{
																										pos: position{line: 268, col: 21, offset: 7387},
																										expr: &charClassMatcher{
																											pos:        position{line: 111, col: 23, offset: 2469},
																											val:        "[_/-A-Za-z0-9]",
																											chars:      []rune{'_', '/', '-'},
																											ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 275, col: 10, offset: 7551},
																							val:        "assert",
																							ignoreCase: false,
																							want:       "\"assert\"",
																						},
																						&litMatcher{
																							pos:        position{line: 265, col: 6, offset: 7324},
																							val:        "as",
																							ignoreCase: false,
																							want:       "\"as\"",
																						},
																						&litMatcher{
																							pos:        position{line: 271, col: 12, offset: 7481},
																							val:        "Infinity",
																							ignoreCase: false,
																							want:       "\"Infinity\"",
																						},
																						&litMatcher{
																							pos:        position{line: 272, col: 7, offset: 7500},
																							val:        "NaN",
																							ignoreCase: false,
																							want:       "\"NaN\"",
																						},
																						&litMatcher{
																							pos:        position{line: 267, col: 9, offset: 7357},
																							val:        "merge",
																							ignoreCase: false,
																							want:       "\"merge\"",
																						},
																						&litMatcher{
																							pos:        position{line: 273, col: 8, offset: 7515},
																							val:        "Some",
																							ignoreCase: false,
																							want:       "\"Some\"",
																						},
																						&litMatcher{
																							pos:        position{line: 274, col: 9, offset: 7532},
																							val:        "toMap",
																							ignoreCase: false,
																							want:       "\"toMap\"",
																						},
																						&litMatcher{
																							pos:        position{line: 296, col: 10, offset: 7927},
																							val:        "forall",
																							ignoreCase: false,
																							want:       "\"forall\"",
																						},
																						&litMatcher{
																							pos:        position{line: 296, col: 21, offset: 7938},
																							val:        "‚àÄ",
																							ignoreCase: false,
																							want:       "\"‚àÄ\"",
																						},
																					},
																				},
																			},
																			&charClassMatcher{
																				pos:        position{line: 110, col: 24, offset: 2435},
																				val:        "[_A-Za-z]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'A', 'Z', 'a', 'z'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 113, col: 43, offset: 2602},
																				expr: &charClassMatcher{
																					pos:        position{line: 111, col: 23, offset: 2469},
																					val:        "[_/-A-Za-z0-9]",
																					chars:      []rune{'_', '/', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 129, col: 29, offset: 3100},
													run: (*parser).callonRecordLiteralEntry140,
													expr: &litMatcher{
														pos:        position{line: 273, col: 8, offset: 7515},
														val:        "Some",
														ignoreCase: false,
														want:       "\"Some\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 77, offset: 21926},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 689, col: 79, offset: 21928},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 689, col: 83, offset: 21932},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 689, col: 85, offset: 21934},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 689, col: 90, offset: 21939},
								name: "Expression",
							},
						},
					},
				},
			},
		},
		{
			name: "UnionType",
			pos:  position{line: 698, col: 1, offset: 22201},
			expr: &choiceExpr{
				pos: position{line: 698, col: 13, offset: 22215},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 698, col: 13, offset: 22215},
						name: "NonEmptyUnionType",
					},
					&actionExpr{
						pos: position{line: 700, col: 18, offset: 22270},
						run: (*parser).callonUnionType3,
						expr: &litMatcher{
							pos:        position{line: 700, col: 18, offset: 22270},
							val:        "",
							ignoreCase: false,
							want:       "\"\"",
						},
					},
				},
			},
		},
		{
			name: "NonEmptyUnionType",
			pos:  position{line: 702, col: 1, offset: 22302},
			expr: &actionExpr{
				pos: position{line: 702, col: 21, offset: 22324},
				run: (*parser).callonNonEmptyUnionType1,
				expr: &seqExpr{
					pos: position{line: 702, col: 21, offset: 22324},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 702, col: 21, offset: 22324},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 702, col: 27, offset: 22330},
								name: "UnionTypeEntry",
							},
						},
						&labeledExpr{
							pos:   position{line: 702, col: 42, offset: 22345},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 702, col: 47, offset: 22350},
								expr: &seqExpr{
									pos: position{line: 702, col: 48, offset: 22351},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 702, col: 48, offset: 22351},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 702, col: 50, offset: 22353},
											val:        "|",
											ignoreCase: false,
											want:       "\"|\"",
										},
										&ruleRefExpr{
											pos:  position{line: 702, col: 54, offset: 22357},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 702, col: 56, offset: 22359},
											name: "UnionTypeEntry",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnionTypeEntry",
			pos:  position{line: 727, col: 1, offset: 23202},
			expr: &seqExpr{
				pos: position{line: 727, col: 18, offset: 23221},
				exprs: []interface{}{
					&choiceExpr{
						pos: position{line: 129, col: 18, offset: 3089},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 121, col: 9, offset: 2803},
								run: (*parser).callonUnionTypeEntry3,
								expr: &seqExpr{
									pos: position{line: 121, col: 9, offset: 2803},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 121, col: 9, offset: 2803},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&labeledExpr{
											pos:   position{line: 121, col: 13, offset: 2807},
											label: "label",
											expr: &actionExpr{
												pos: position{line: 119, col: 15, offset: 2744},
												run: (*parser).callonUnionTypeEntry7,
												expr: &oneOrMoreExpr{
													pos: position{line: 119, col: 15, offset: 2744},
													expr: &charClassMatcher{
														pos:        position{line: 118, col: 19, offset: 2707},
														val:        "[ -_a-~]",
														ranges:     []rune{' ', '_', 'a', '~'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 121, col: 31, offset: 2825},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 122, col: 9, offset: 2859},
								run: (*parser).callonUnionTypeEntry11,
								expr: &labeledExpr{
									pos:   position{line: 122, col: 9, offset: 2859},
									label: "label",
									expr: &choiceExpr{
										pos: position{line: 112, col: 15, offset: 2500},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 112, col: 15, offset: 2500},
												run: (*parser).callonUnionTypeEntry14,
												expr: &seqExpr{
													pos: position{line: 112, col: 15, offset: 2500},
													exprs: []interface{}{
														&choiceExpr{
															pos: position{line: 278, col: 5, offset: 7577},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 260, col: 6, offset: 7254},
																	val:        "if",
																	ignoreCase: false,
																	want:       "\"if\"",
																},
																&litMatcher{
																	pos:        position{line: 261, col: 8, offset: 7268},
																	val:        "then",
																	ignoreCase: false,
																	want:       "\"then\"",
																},
																&litMatcher{
																	pos:        position{line: 262, col: 8, offset: 7284},
																	val:        "else",
																	ignoreCase: false,
																	want:       "\"else\"",
																},
																&litMatcher{
																	pos:        position{line: 263, col: 7, offset: 7299},
																	val:        "let",
																	ignoreCase: false,
																	want:       "\"let\"",
																},
																&litMatcher{
																	pos:        position{line: 264, col: 6, offset: 7312},
																	val:        "in",
																	ignoreCase: false,
																	want:       "\"in\"",
																},
																&litMatcher{
																	pos:        position{line: 266, col: 9, offset: 7339},
																	val:        "using",
																	ignoreCase: false,
																	want:       "\"using\"",
																},
																&actionExpr{
																	pos: position{line: 268, col: 11, offset: 7377},
																	run: (*parser).callonUnionTypeEntry23,
																	expr: &seqExpr{
																		pos: position{line: 268, col: 11, offset: 7377},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 268, col: 11, offset: 7377},
																				val:        "missing",
																				ignoreCase: false,
																				want:       "\"missing\"",
																			},
																			&notExpr{
																				pos: position{line: 268, col: 21, offset: 7387},
																				expr: &charClassMatcher{
																					pos:        position{line: 111, col: 23, offset: 2469},
																					val:        "[_/-A-Za-z0-9]",
																					chars:      []rune{'_', '/', '-'},
																					ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 275, col: 10, offset: 7551},
																	val:        "assert",
																	ignoreCase: false,
																	want:       "\"assert\"",
																},
																&litMatcher{
																	pos:        position{line: 265, col: 6, offset: 7324},
																	val:        "as",
																	ignoreCase: false,
																	want:       "\"as\"",
																},
																&litMatcher{
																	pos:        position{line: 271, col: 12, offset: 7481},
																	val:        "Infinity",
																	ignoreCase: false,
																	want:       "\"Infinity\"",
																},
																&litMatcher{
																	pos:        position{line: 272, col: 7, offset: 7500},
																	val:        "NaN",
																	ignoreCase: false,
																	want:       "\"NaN\"",
																},
																&litMatcher{
																	pos:        position{line: 267, col: 9, offset: 7357},
																	val:        "merge",
																	ignoreCase: false,
																	want:       "\"merge\"",
																},
																&litMatcher{
																	pos:        position{line: 273, col: 8, offset: 7515},
																	val:        "Some",
																	ignoreCase: false,
																	want:       "\"Some\"",
																},
																&litMatcher{
																	pos:        position{line: 274, col: 9, offset: 7532},
																	val:        "toMap",
																	ignoreCase: false,
																	want:       "\"toMap\"",
																},
																&litMatcher{
																	pos:        position{line: 296, col: 10, offset: 7927},
																	val:        "forall",
																	ignoreCase: false,
																	want:       "\"forall\"",
																},
																&litMatcher{
																	pos:        position{line: 296, col: 21, offset: 7938},
																	val:        "‚àÄ",
																	ignoreCase: false,
																	want:       "\"‚àÄ\"",
																},
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 112, col: 23, offset: 2508},
															expr: &charClassMatcher{
																pos:        position{line: 111, col: 23, offset: 2469},
																val:        "[_/-A-Za-z0-9]",
																chars:      []rune{'_', '/', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 113, col: 13, offset: 2572},
												run: (*parser).callonUnionTypeEntry39,
												expr: &seqExpr{
													pos: position{line: 113, col: 13, offset: 2572},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 113, col: 13, offset: 2572},
															expr: &choiceExpr{
																pos: position{line: 278, col: 5, offset: 7577},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 260, col: 6, offset: 7254},
																		val:        "if",
																		ignoreCase: false,
																		want:       "\"if\"",
																	},
																	&litMatcher{
																		pos:        position{line: 261, col: 8, offset: 7268},
																		val:        "then",
																		ignoreCase: false,
																		want:       "\"then\"",
																	},
																	&litMatcher{
																		pos:        position{line: 262, col: 8, offset: 7284},
																		val:        "else",
																		ignoreCase: false,
																		want:       "\"else\"",
																	},
																	&litMatcher{
																		pos:        position{line: 263, col: 7, offset: 7299},
																		val:        "let",
																		ignoreCase: false,
																		want:       "\"let\"",
																	},
																	&litMatcher{
																		pos:        position{line: 264, col: 6, offset: 7312},
																		val:        "in",
																		ignoreCase: false,
																		want:       "\"in\"",
																	},
																	&litMatcher{
																		pos:        position{line: 266, col: 9, offset: 7339},
																		val:        "using",
																		ignoreCase: false,
																		want:       "\"using\"",
																	},
																	&actionExpr{
																		pos: position{line: 268, col: 11, offset: 7377},
																		run: (*parser).callonUnionTypeEntry49,
																		expr: &seqExpr{
																			pos: position{line: 268, col: 11, offset: 7377},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 268, col: 11, offset: 7377},
																					val:        "missing",
																					ignoreCase: false,
																					want:       "\"missing\"",
																				},
																				&notExpr{
																					pos: position{line: 268, col: 21, offset: 7387},
																					expr: &charClassMatcher{
																						pos:        position{line: 111, col: 23, offset: 2469},
																						val:        "[_/-A-Za-z0-9]",
																						chars:      []rune{'_', '/', '-'},
																						ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 275, col: 10, offset: 7551},
																		val:        "assert",
																		ignoreCase: false,
																		want:       "\"assert\"",
																	},
																	&litMatcher{
																		pos:        position{line: 265, col: 6, offset: 7324},
																		val:        "as",
																		ignoreCase: false,
																		want:       "\"as\"",
																	},
																	&litMatcher{
																		pos:        position{line: 271, col: 12, offset: 7481},
																		val:        "Infinity",
																		ignoreCase: false,
																		want:       "\"Infinity\"",
																	},
																	&litMatcher{
																		pos:        position{line: 272, col: 7, offset: 7500},
																		val:        "NaN",
																		ignoreCase: false,
																		want:       "\"NaN\"",
																	},
																	&litMatcher{
																		pos:        position{line: 267, col: 9, offset: 7357},
																		val:        "merge",
																		ignoreCase: false,
																		want:       "\"merge\"",
																	},
																	&litMatcher{
																		pos:        position{line: 273, col: 8, offset: 7515},
																		val:        "Some",
																		ignoreCase: false,
																		want:       "\"Some\"",
																	},
																	&litMatcher{
																		pos:        position{line: 274, col: 9, offset: 7532},
																		val:        "toMap",
																		ignoreCase: false,
																		want:       "\"toMap\"",
																	},
																	&litMatcher{
																		pos:        position{line: 296, col: 10, offset: 7927},
																		val:        "forall",
																		ignoreCase: false,
																		want:       "\"forall\"",
																	},
																	&litMatcher{
																		pos:        position{line: 296, col: 21, offset: 7938},
																		val:        "‚àÄ",
																		ignoreCase: false,
																		want:       "\"‚àÄ\"",
																	},
																},
															},
														},
														&charClassMatcher{
															pos:        position{line: 110, col: 24, offset: 2435},
															val:        "[_A-Za-z]",
															chars:      []rune{'_'},
															ranges:     []rune{'A', 'Z', 'a', 'z'},
															ignoreCase: false,
															inverted:   false,
														},
														&zeroOrMoreExpr{
															pos: position{line: 113, col: 43, offset: 2602},
															expr: &charClassMatcher{
																pos:        position{line: 111, col: 23, offset: 2469},
																val:        "[_/-A-Za-z0-9]",
																chars:      []rune{'_', '/', '-'},
																ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 129, col: 29, offset: 3100},
								run: (*parser).callonUnionTypeEntry66,
								expr: &litMatcher{
									pos:        position{line: 273, col: 8, offset: 7515},
									val:        "Some",
									ignoreCase: false,
									want:       "\"Some\"",
								},
							},
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 727, col: 33, offset: 23236},
						expr: &seqExpr{
							pos: position{line: 727, col: 34, offset: 23237},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 727, col: 34, offset: 23237},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 727, col: 36, offset: 23239},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 40, offset: 23243},
									name: "_1",
								},
								&ruleRefExpr{
									pos:  position{line: 727, col: 43, offset: 23246},
									name: "Expression",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MoreList",
			pos:  position{line: 729, col: 1, offset: 23260},
			expr: &actionExpr{
				pos: position{line: 729, col: 12, offset: 23273},
				run: (*parser).callonMoreList1,
				expr: &seqExpr{
					pos: position{line: 729, col: 12, offset: 23273},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 729, col: 12, offset: 23273},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 16, offset: 23277},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 18, offset: 23279},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 20, offset: 23281},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 31, offset: 23292},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "NonEmptyListLiteral",
			pos:  position{line: 731, col: 1, offset: 23311},
			expr: &actionExpr{
				pos: position{line: 732, col: 7, offset: 23341},
				run: (*parser).callonNonEmptyListLiteral1,
				expr: &seqExpr{
					pos: position{line: 732, col: 7, offset: 23341},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 732, col: 7, offset: 23341},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 11, offset: 23345},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 732, col: 13, offset: 23347},
							expr: &seqExpr{
								pos: position{line: 732, col: 14, offset: 23348},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 732, col: 14, offset: 23348},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 18, offset: 23352},
										name: "_",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 732, col: 22, offset: 23356},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 28, offset: 23362},
								name: "Expression",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 39, offset: 23373},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 732, col: 41, offset: 23375},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 732, col: 46, offset: 23380},
								expr: &ruleRefExpr{
									pos:  position{line: 732, col: 46, offset: 23380},
									name: "MoreList",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 732, col: 56, offset: 23390},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
	},
}

func (c *current) onDhallFile1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDhallFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDhallFile1(stack["e"])
}

func (c *current) onCompleteExpression1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonCompleteExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCompleteExpression1(stack["e"])
}

func (c *current) onBlockCommentContinue9() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonBlockCommentContinue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockCommentContinue9()
}

func (c *current) onWhitespaceChunk3() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonWhitespaceChunk3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhitespaceChunk3()
}

func (c *current) onWhitespaceChunk9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWhitespaceChunk9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhitespaceChunk9()
}

func (c *current) onWhitespaceChunk14() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonWhitespaceChunk14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhitespaceChunk14()
}

func (c *current) onWhitespaceChunk5(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonWhitespaceChunk5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhitespaceChunk5(stack["content"])
}

func (c *current) onDoubleQuoteChunk9() (interface{}, error) {
	return []byte("\b"), nil
}

func (p *parser) callonDoubleQuoteChunk9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk9()
}

func (c *current) onDoubleQuoteChunk11() (interface{}, error) {
	return []byte("\f"), nil
}

func (p *parser) callonDoubleQuoteChunk11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk11()
}

func (c *current) onDoubleQuoteChunk13() (interface{}, error) {
	return []byte("\n"), nil
}

func (p *parser) callonDoubleQuoteChunk13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk13()
}

func (c *current) onDoubleQuoteChunk15() (interface{}, error) {
	return []byte("\r"), nil
}

func (p *parser) callonDoubleQuoteChunk15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk15()
}

func (c *current) onDoubleQuoteChunk17() (interface{}, error) {
	return []byte("\t"), nil
}

func (p *parser) callonDoubleQuoteChunk17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk17()
}

func (c *current) onDoubleQuoteChunk24() (interface{}, error) {
	return parseCodepoint(string(c.text))

}

func (p *parser) callonDoubleQuoteChunk24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk24()
}

func (c *current) onDoubleQuoteChunk38() (interface{}, error) {
	return parseCodepoint(string(c.text[1 : len(c.text)-1]))

}

func (p *parser) callonDoubleQuoteChunk38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk38()
}

func (c *current) onDoubleQuoteChunk19(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonDoubleQuoteChunk19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk19(stack["u"])
}

func (c *current) onDoubleQuoteChunk3(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonDoubleQuoteChunk3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteChunk3(stack["e"])
}

func (c *current) onDoubleQuoteLiteral1(chunks interface{}) (interface{}, error) {
	var str strings.Builder
	var outChunks Chunks
	for _, chunk := range chunks.([]interface{}) {
		switch e := chunk.(type) {
		case []byte:
			str.Write(e)
		case Term:
			outChunks = append(outChunks, Chunk{str.String(), e})
			str.Reset()
		default:
			return nil, errors.New("can't happen")
		}
	}
	return TextLit{Chunks: outChunks, Suffix: str.String()}, nil
}

func (p *parser) callonDoubleQuoteLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteLiteral1(stack["chunks"])
}

func (c *current) onSingleQuoteContinue6() (interface{}, error) {
	return []byte("''"), nil
}

func (p *parser) callonSingleQuoteContinue6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContinue6()
}

func (c *current) onSingleQuoteContinue10() (interface{}, error) {
	return []byte("$\u007b"), nil
}

func (p *parser) callonSingleQuoteContinue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContinue10()
}

func (c *current) onSingleQuoteContinue17() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonSingleQuoteContinue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteContinue17()
}

func (c *current) onSingleQuoteLiteral6() (interface{}, error) {
	return []byte{'\n'}, nil
}

func (p *parser) callonSingleQuoteLiteral6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteLiteral6()
}

func (c *current) onSingleQuoteLiteral1(content interface{}) (interface{}, error) {
	var str strings.Builder
	var outChunks Chunks
	chunk, ok := content.([]interface{})
	for ; ok; chunk, ok = chunk[1].([]interface{}) {
		switch e := chunk[0].(type) {
		case []byte:
			str.Write(e)
		case Term:
			outChunks = append(outChunks, Chunk{str.String(), e})
			str.Reset()
		default:
			return nil, errors.New("unimplemented")
		}
	}
	return removeLeadingCommonIndent(TextLit{Chunks: outChunks, Suffix: str.String()}), nil
}

func (p *parser) callonSingleQuoteLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteLiteral1(stack["content"])
}

func (c *current) onInterpolation1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonInterpolation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterpolation1(stack["e"])
}

func (c *current) onDeBruijn8() (interface{}, error) {
	i, err := strconv.ParseInt(string(c.text), 0, 0)
	return NaturalLit(i), err

}

func (p *parser) callonDeBruijn8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeBruijn8()
}

func (c *current) onDeBruijn20() (interface{}, error) {
	return nil, errors.New("Natural literals cannot have leading zeros")
}

func (p *parser) callonDeBruijn20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeBruijn20()
}

func (c *current) onDeBruijn25() (interface{}, error) {
	return NaturalLit(0), nil
}

func (p *parser) callonDeBruijn25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeBruijn25()
}

func (c *current) onDeBruijn1(index interface{}) (interface{}, error) {
	return int(index.(NaturalLit)), nil
}

func (p *parser) callonDeBruijn1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeBruijn1(stack["index"])
}

func (c *current) onVariable10() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonVariable10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable10()
}

func (c *current) onVariable12() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonVariable12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable12()
}

func (c *current) onVariable14() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonVariable14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable14()
}

func (c *current) onVariable16() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonVariable16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable16()
}

func (c *current) onVariable18() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonVariable18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable18()
}

func (c *current) onVariable20() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonVariable20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable20()
}

func (c *current) onVariable22() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonVariable22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable22()
}

func (c *current) onVariable24() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonVariable24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable24()
}

func (c *current) onVariable26() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonVariable26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable26()
}

func (c *current) onVariable28() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonVariable28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable28()
}

func (c *current) onVariable30() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonVariable30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable30()
}

func (c *current) onVariable32() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonVariable32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable32()
}

func (c *current) onVariable34() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonVariable34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable34()
}

func (c *current) onVariable36() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonVariable36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable36()
}

func (c *current) onVariable38() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonVariable38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable38()
}

func (c *current) onVariable40() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonVariable40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable40()
}

func (c *current) onVariable42() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonVariable42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable42()
}

func (c *current) onVariable44() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonVariable44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable44()
}

func (c *current) onVariable46() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonVariable46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable46()
}

func (c *current) onVariable48() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonVariable48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable48()
}

func (c *current) onVariable50() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonVariable50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable50()
}

func (c *current) onVariable52() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonVariable52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable52()
}

func (c *current) onVariable54() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonVariable54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable54()
}

func (c *current) onVariable56() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonVariable56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable56()
}

func (c *current) onVariable58() (interface{}, error) {
	return True, nil
}

func (p *parser) callonVariable58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable58()
}

func (c *current) onVariable60() (interface{}, error) {
	return False, nil
}

func (p *parser) callonVariable60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable60()
}

func (c *current) onVariable62() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonVariable62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable62()
}

func (c *current) onVariable64() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonVariable64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable64()
}

func (c *current) onVariable66() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonVariable66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable66()
}

func (c *current) onVariable68() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonVariable68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable68()
}

func (c *current) onVariable70() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonVariable70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable70()
}

func (c *current) onVariable72() (interface{}, error) {
	return List, nil
}

func (p *parser) callonVariable72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable72()
}

func (c *current) onVariable74() (interface{}, error) {
	return None, nil
}

func (p *parser) callonVariable74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable74()
}

func (c *current) onVariable76() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonVariable76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable76()
}

func (c *current) onVariable78() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonVariable78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable78()
}

func (c *current) onVariable80() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonVariable80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable80()
}

func (c *current) onVariable89() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVariable89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable89()
}

func (c *current) onVariable85(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable85(stack["label"])
}

func (c *current) onVariable105() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonVariable105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable105()
}

func (c *current) onVariable96() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVariable96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable96()
}

func (c *current) onVariable131() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonVariable131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable131()
}

func (c *current) onVariable121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVariable121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable121()
}

func (c *current) onVariable93(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable93(stack["label"])
}

func (c *current) onVariable5(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable5(stack["label"])
}

func (c *current) onVariable152() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonVariable152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable152()
}

func (c *current) onVariable154() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonVariable154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable154()
}

func (c *current) onVariable156() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonVariable156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable156()
}

func (c *current) onVariable158() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonVariable158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable158()
}

func (c *current) onVariable160() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonVariable160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable160()
}

func (c *current) onVariable162() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonVariable162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable162()
}

func (c *current) onVariable164() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonVariable164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable164()
}

func (c *current) onVariable166() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonVariable166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable166()
}

func (c *current) onVariable168() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonVariable168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable168()
}

func (c *current) onVariable170() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonVariable170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable170()
}

func (c *current) onVariable172() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonVariable172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable172()
}

func (c *current) onVariable174() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonVariable174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable174()
}

func (c *current) onVariable176() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonVariable176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable176()
}

func (c *current) onVariable178() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonVariable178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable178()
}

func (c *current) onVariable180() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonVariable180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable180()
}

func (c *current) onVariable182() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonVariable182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable182()
}

func (c *current) onVariable184() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonVariable184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable184()
}

func (c *current) onVariable186() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonVariable186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable186()
}

func (c *current) onVariable188() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonVariable188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable188()
}

func (c *current) onVariable190() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonVariable190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable190()
}

func (c *current) onVariable192() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonVariable192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable192()
}

func (c *current) onVariable194() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonVariable194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable194()
}

func (c *current) onVariable196() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonVariable196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable196()
}

func (c *current) onVariable198() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonVariable198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable198()
}

func (c *current) onVariable200() (interface{}, error) {
	return True, nil
}

func (p *parser) callonVariable200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable200()
}

func (c *current) onVariable202() (interface{}, error) {
	return False, nil
}

func (p *parser) callonVariable202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable202()
}

func (c *current) onVariable204() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonVariable204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable204()
}

func (c *current) onVariable206() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonVariable206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable206()
}

func (c *current) onVariable208() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonVariable208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable208()
}

func (c *current) onVariable210() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonVariable210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable210()
}

func (c *current) onVariable212() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonVariable212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable212()
}

func (c *current) onVariable214() (interface{}, error) {
	return List, nil
}

func (p *parser) callonVariable214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable214()
}

func (c *current) onVariable216() (interface{}, error) {
	return None, nil
}

func (p *parser) callonVariable216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable216()
}

func (c *current) onVariable218() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonVariable218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable218()
}

func (c *current) onVariable220() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonVariable220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable220()
}

func (c *current) onVariable222() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonVariable222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable222()
}

func (c *current) onVariable230() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVariable230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable230()
}

func (c *current) onVariable226(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable226(stack["label"])
}

func (c *current) onVariable246() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonVariable246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable246()
}

func (c *current) onVariable237() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVariable237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable237()
}

func (c *current) onVariable272() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonVariable272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable272()
}

func (c *current) onVariable262() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonVariable262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable262()
}

func (c *current) onVariable234(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable234(stack["label"])
}

func (c *current) onVariable148(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonVariable148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable148(stack["label"])
}

func (c *current) onVariable1(name, index interface{}) (interface{}, error) {
	if index != nil {
		return Var{Name: name.(string), Index: index.(int)}, nil
	} else {
		return Var{Name: name.(string)}, nil
	}
}

func (p *parser) callonVariable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariable1(stack["name"], stack["index"])
}

func (c *current) onIdentifier3() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonIdentifier3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier3()
}

func (c *current) onIdentifier5() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonIdentifier5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier5()
}

func (c *current) onIdentifier7() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonIdentifier7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier7()
}

func (c *current) onIdentifier9() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonIdentifier9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier9()
}

func (c *current) onIdentifier11() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonIdentifier11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier11()
}

func (c *current) onIdentifier13() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonIdentifier13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier13()
}

func (c *current) onIdentifier15() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonIdentifier15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier15()
}

func (c *current) onIdentifier17() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonIdentifier17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier17()
}

func (c *current) onIdentifier19() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonIdentifier19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier19()
}

func (c *current) onIdentifier21() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonIdentifier21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier21()
}

func (c *current) onIdentifier23() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonIdentifier23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier23()
}

func (c *current) onIdentifier25() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonIdentifier25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier25()
}

func (c *current) onIdentifier27() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonIdentifier27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier27()
}

func (c *current) onIdentifier29() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonIdentifier29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier29()
}

func (c *current) onIdentifier31() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonIdentifier31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier31()
}

func (c *current) onIdentifier33() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonIdentifier33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier33()
}

func (c *current) onIdentifier35() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonIdentifier35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier35()
}

func (c *current) onIdentifier37() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonIdentifier37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier37()
}

func (c *current) onIdentifier39() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonIdentifier39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier39()
}

func (c *current) onIdentifier41() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonIdentifier41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier41()
}

func (c *current) onIdentifier43() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonIdentifier43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier43()
}

func (c *current) onIdentifier45() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonIdentifier45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier45()
}

func (c *current) onIdentifier47() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonIdentifier47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier47()
}

func (c *current) onIdentifier49() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonIdentifier49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier49()
}

func (c *current) onIdentifier51() (interface{}, error) {
	return True, nil
}

func (p *parser) callonIdentifier51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier51()
}

func (c *current) onIdentifier53() (interface{}, error) {
	return False, nil
}

func (p *parser) callonIdentifier53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier53()
}

func (c *current) onIdentifier55() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonIdentifier55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier55()
}

func (c *current) onIdentifier57() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonIdentifier57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier57()
}

func (c *current) onIdentifier59() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonIdentifier59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier59()
}

func (c *current) onIdentifier61() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonIdentifier61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier61()
}

func (c *current) onIdentifier63() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonIdentifier63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier63()
}

func (c *current) onIdentifier65() (interface{}, error) {
	return List, nil
}

func (p *parser) callonIdentifier65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier65()
}

func (c *current) onIdentifier67() (interface{}, error) {
	return None, nil
}

func (p *parser) callonIdentifier67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier67()
}

func (c *current) onIdentifier69() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonIdentifier69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier69()
}

func (c *current) onIdentifier71() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonIdentifier71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier71()
}

func (c *current) onIdentifier73() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonIdentifier73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier73()
}

func (c *current) onHttp28() (interface{}, error) {
	addr := net.ParseIP(string(c.text))
	if addr == nil {
		return nil, errors.New("Malformed IPv6 address")
	}
	return string(c.text), nil
}

func (p *parser) callonHttp28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHttp28()
}

func (c *current) onHttp64() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHttp64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHttp64()
}

func (c *current) onHttp60(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonHttp60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHttp60(stack["u"])
}

func (c *current) onHttp71() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHttp71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHttp71()
}

func (c *current) onHttp67(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonHttp67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHttp67(stack["q"])
}

func (c *current) onHttp4() (interface{}, error) {
	return url.ParseRequestURI(string(c.text))
}

func (p *parser) callonHttp4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHttp4()
}

func (c *current) onHttp1(u, usingClause interface{}) (interface{}, error) {
	if usingClause != nil {
		return NewRemoteFile(u.(*url.URL)), errors.New("dhall-golang does not support ‚ù∞using‚ù± clauses")
	}
	return NewRemoteFile(u.(*url.URL)), nil
}

func (p *parser) callonHttp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHttp1(stack["u"], stack["usingClause"])
}

func (c *current) onImportType2() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonImportType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType2()
}

func (c *current) onImportType19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType19()
}

func (c *current) onImportType15(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportType15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType15(stack["u"])
}

func (c *current) onImportType26() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType26()
}

func (c *current) onImportType22(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType22(stack["q"])
}

func (c *current) onImportType11(cs interface{}) (interface{}, error) {
	// urgh, have to convert []interface{} to []string
	components := make([]string, len(cs.([]interface{})))
	for i, component := range cs.([]interface{}) {
		components[i] = component.(string)
	}
	return path.Join(components...), nil
}

func (p *parser) callonImportType11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType11(stack["cs"])
}

func (c *current) onImportType7(p interface{}) (interface{}, error) {
	return LocalFile(path.Join("..", p.(string))), nil
}

func (p *parser) callonImportType7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType7(stack["p"])
}

func (c *current) onImportType42() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportType42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType42()
}

func (c *current) onImportType38(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportType38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType38(stack["u"])
}

func (c *current) onImportType49() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportType49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType49()
}

func (c *current) onImportType45(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportType45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType45(stack["q"])
}

func (c *current) onImportType34(cs interface{}) (interface{}, error) {
	// urgh, have to convert []interface{} to []string
	components := make([]string, len(cs.([]interface{})))
	for i, component := range cs.([]interface{}) {
		components[i] = component.(string)
	}
	return path.Join(components...), nil
}

func (p *parser) callonImportType34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType34(stack["cs"])
}

func (c *current) onImportType30(p interface{}) (interface{}, error) {
	return LocalFile(p.(string)), nil
}

func (p *parser) callonImportType30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType30(stack["p"])
}

func (c *current) onImportType65() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportType65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType65()
}

func (c *current) onImportType61(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportType61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType61(stack["u"])
}

func (c *current) onImportType72() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportType72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType72()
}

func (c *current) onImportType68(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportType68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType68(stack["q"])
}

func (c *current) onImportType57(cs interface{}) (interface{}, error) {
	// urgh, have to convert []interface{} to []string
	components := make([]string, len(cs.([]interface{})))
	for i, component := range cs.([]interface{}) {
		components[i] = component.(string)
	}
	return path.Join(components...), nil
}

func (p *parser) callonImportType57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType57(stack["cs"])
}

func (c *current) onImportType53(p interface{}) (interface{}, error) {
	return LocalFile(path.Join("~", p.(string))), nil
}

func (p *parser) callonImportType53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType53(stack["p"])
}

func (c *current) onImportType86() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportType86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType86()
}

func (c *current) onImportType82(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonImportType82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType82(stack["u"])
}

func (c *current) onImportType93() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImportType93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType93()
}

func (c *current) onImportType89(q interface{}) (interface{}, error) {
	return q, nil
}

func (p *parser) callonImportType89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType89(stack["q"])
}

func (c *current) onImportType78(cs interface{}) (interface{}, error) {
	// urgh, have to convert []interface{} to []string
	components := make([]string, len(cs.([]interface{})))
	for i, component := range cs.([]interface{}) {
		components[i] = component.(string)
	}
	return path.Join(components...), nil
}

func (p *parser) callonImportType78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType78(stack["cs"])
}

func (c *current) onImportType76(p interface{}) (interface{}, error) {
	return LocalFile(path.Join("/", p.(string))), nil
}

func (p *parser) callonImportType76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType76(stack["p"])
}

func (c *current) onImportType103() (interface{}, error) {
	return EnvVar(string(c.text)), nil
}

func (p *parser) callonImportType103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType103()
}

func (c *current) onImportType116() (interface{}, error) {
	return []byte{0x22}, nil
}

func (p *parser) callonImportType116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType116()
}

func (c *current) onImportType118() (interface{}, error) {
	return []byte{0x5c}, nil
}

func (p *parser) callonImportType118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType118()
}

func (c *current) onImportType120() (interface{}, error) {
	return []byte{0x07}, nil
}

func (p *parser) callonImportType120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType120()
}

func (c *current) onImportType122() (interface{}, error) {
	return []byte{0x08}, nil
}

func (p *parser) callonImportType122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType122()
}

func (c *current) onImportType124() (interface{}, error) {
	return []byte{0x0c}, nil
}

func (p *parser) callonImportType124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType124()
}

func (c *current) onImportType126() (interface{}, error) {
	return []byte{0x0a}, nil
}

func (p *parser) callonImportType126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType126()
}

func (c *current) onImportType128() (interface{}, error) {
	return []byte{0x0d}, nil
}

func (p *parser) callonImportType128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType128()
}

func (c *current) onImportType130() (interface{}, error) {
	return []byte{0x09}, nil
}

func (p *parser) callonImportType130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType130()
}

func (c *current) onImportType132() (interface{}, error) {
	return []byte{0x0b}, nil
}

func (p *parser) callonImportType132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType132()
}

func (c *current) onImportType112(v interface{}) (interface{}, error) {
	var b strings.Builder
	for _, c := range v.([]interface{}) {
		_, err := b.Write(c.([]byte))
		if err != nil {
			return nil, err
		}
	}
	return EnvVar(b.String()), nil
}

func (p *parser) callonImportType112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType112(stack["v"])
}

func (c *current) onImportType108(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonImportType108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType108(stack["v"])
}

func (c *current) onImportType98(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonImportType98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportType98(stack["v"])
}

func (c *current) onImportHashed13() (interface{}, error) {
	out := make([]byte, sha256.Size)
	_, err := hex.Decode(out, c.text)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (p *parser) callonImportHashed13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed13()
}

func (c *current) onImportHashed9(val interface{}) (interface{}, error) {
	return append([]byte{0x12, 0x20}, val.([]byte)...), nil
}

func (p *parser) callonImportHashed9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed9(stack["val"])
}

func (c *current) onImportHashed1(i, h interface{}) (interface{}, error) {
	out := ImportHashed{Fetchable: i.(Fetchable)}
	if h != nil {
		out.Hash = h.([]interface{})[1].([]byte)
	}
	return out, nil
}

func (p *parser) callonImportHashed1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportHashed1(stack["i"], stack["h"])
}

func (c *current) onImport2(i interface{}) (interface{}, error) {
	return Import{ImportHashed: i.(ImportHashed), ImportMode: RawText}, nil
}

func (p *parser) callonImport2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport2(stack["i"])
}

func (c *current) onImport10(i interface{}) (interface{}, error) {
	return Import{ImportHashed: i.(ImportHashed), ImportMode: Location}, nil
}

func (p *parser) callonImport10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport10(stack["i"])
}

func (c *current) onImport18(i interface{}) (interface{}, error) {
	return Import{ImportHashed: i.(ImportHashed), ImportMode: Code}, nil
}

func (p *parser) callonImport18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport18(stack["i"])
}

func (c *current) onLetBinding12() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonLetBinding12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding12()
}

func (c *current) onLetBinding14() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonLetBinding14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding14()
}

func (c *current) onLetBinding16() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonLetBinding16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding16()
}

func (c *current) onLetBinding18() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonLetBinding18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding18()
}

func (c *current) onLetBinding20() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonLetBinding20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding20()
}

func (c *current) onLetBinding22() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonLetBinding22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding22()
}

func (c *current) onLetBinding24() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonLetBinding24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding24()
}

func (c *current) onLetBinding26() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonLetBinding26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding26()
}

func (c *current) onLetBinding28() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonLetBinding28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding28()
}

func (c *current) onLetBinding30() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonLetBinding30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding30()
}

func (c *current) onLetBinding32() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonLetBinding32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding32()
}

func (c *current) onLetBinding34() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonLetBinding34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding34()
}

func (c *current) onLetBinding36() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonLetBinding36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding36()
}

func (c *current) onLetBinding38() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonLetBinding38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding38()
}

func (c *current) onLetBinding40() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonLetBinding40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding40()
}

func (c *current) onLetBinding42() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonLetBinding42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding42()
}

func (c *current) onLetBinding44() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonLetBinding44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding44()
}

func (c *current) onLetBinding46() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonLetBinding46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding46()
}

func (c *current) onLetBinding48() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonLetBinding48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding48()
}

func (c *current) onLetBinding50() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonLetBinding50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding50()
}

func (c *current) onLetBinding52() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonLetBinding52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding52()
}

func (c *current) onLetBinding54() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonLetBinding54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding54()
}

func (c *current) onLetBinding56() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonLetBinding56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding56()
}

func (c *current) onLetBinding58() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonLetBinding58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding58()
}

func (c *current) onLetBinding60() (interface{}, error) {
	return True, nil
}

func (p *parser) callonLetBinding60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding60()
}

func (c *current) onLetBinding62() (interface{}, error) {
	return False, nil
}

func (p *parser) callonLetBinding62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding62()
}

func (c *current) onLetBinding64() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonLetBinding64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding64()
}

func (c *current) onLetBinding66() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonLetBinding66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding66()
}

func (c *current) onLetBinding68() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonLetBinding68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding68()
}

func (c *current) onLetBinding70() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonLetBinding70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding70()
}

func (c *current) onLetBinding72() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonLetBinding72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding72()
}

func (c *current) onLetBinding74() (interface{}, error) {
	return List, nil
}

func (p *parser) callonLetBinding74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding74()
}

func (c *current) onLetBinding76() (interface{}, error) {
	return None, nil
}

func (p *parser) callonLetBinding76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding76()
}

func (c *current) onLetBinding78() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonLetBinding78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding78()
}

func (c *current) onLetBinding80() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonLetBinding80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding80()
}

func (c *current) onLetBinding82() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonLetBinding82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding82()
}

func (c *current) onLetBinding91() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLetBinding91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding91()
}

func (c *current) onLetBinding87(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding87(stack["label"])
}

func (c *current) onLetBinding107() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLetBinding107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding107()
}

func (c *current) onLetBinding98() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLetBinding98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding98()
}

func (c *current) onLetBinding133() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLetBinding133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding133()
}

func (c *current) onLetBinding123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLetBinding123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding123()
}

func (c *current) onLetBinding95(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding95(stack["label"])
}

func (c *current) onLetBinding7(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding7(stack["label"])
}

func (c *current) onLetBinding154() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonLetBinding154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding154()
}

func (c *current) onLetBinding156() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonLetBinding156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding156()
}

func (c *current) onLetBinding158() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonLetBinding158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding158()
}

func (c *current) onLetBinding160() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonLetBinding160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding160()
}

func (c *current) onLetBinding162() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonLetBinding162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding162()
}

func (c *current) onLetBinding164() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonLetBinding164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding164()
}

func (c *current) onLetBinding166() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonLetBinding166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding166()
}

func (c *current) onLetBinding168() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonLetBinding168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding168()
}

func (c *current) onLetBinding170() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonLetBinding170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding170()
}

func (c *current) onLetBinding172() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonLetBinding172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding172()
}

func (c *current) onLetBinding174() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonLetBinding174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding174()
}

func (c *current) onLetBinding176() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonLetBinding176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding176()
}

func (c *current) onLetBinding178() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonLetBinding178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding178()
}

func (c *current) onLetBinding180() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonLetBinding180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding180()
}

func (c *current) onLetBinding182() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonLetBinding182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding182()
}

func (c *current) onLetBinding184() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonLetBinding184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding184()
}

func (c *current) onLetBinding186() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonLetBinding186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding186()
}

func (c *current) onLetBinding188() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonLetBinding188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding188()
}

func (c *current) onLetBinding190() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonLetBinding190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding190()
}

func (c *current) onLetBinding192() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonLetBinding192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding192()
}

func (c *current) onLetBinding194() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonLetBinding194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding194()
}

func (c *current) onLetBinding196() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonLetBinding196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding196()
}

func (c *current) onLetBinding198() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonLetBinding198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding198()
}

func (c *current) onLetBinding200() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonLetBinding200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding200()
}

func (c *current) onLetBinding202() (interface{}, error) {
	return True, nil
}

func (p *parser) callonLetBinding202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding202()
}

func (c *current) onLetBinding204() (interface{}, error) {
	return False, nil
}

func (p *parser) callonLetBinding204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding204()
}

func (c *current) onLetBinding206() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonLetBinding206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding206()
}

func (c *current) onLetBinding208() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonLetBinding208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding208()
}

func (c *current) onLetBinding210() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonLetBinding210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding210()
}

func (c *current) onLetBinding212() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonLetBinding212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding212()
}

func (c *current) onLetBinding214() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonLetBinding214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding214()
}

func (c *current) onLetBinding216() (interface{}, error) {
	return List, nil
}

func (p *parser) callonLetBinding216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding216()
}

func (c *current) onLetBinding218() (interface{}, error) {
	return None, nil
}

func (p *parser) callonLetBinding218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding218()
}

func (c *current) onLetBinding220() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonLetBinding220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding220()
}

func (c *current) onLetBinding222() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonLetBinding222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding222()
}

func (c *current) onLetBinding224() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonLetBinding224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding224()
}

func (c *current) onLetBinding232() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLetBinding232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding232()
}

func (c *current) onLetBinding228(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding228(stack["label"])
}

func (c *current) onLetBinding248() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLetBinding248() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding248()
}

func (c *current) onLetBinding239() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLetBinding239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding239()
}

func (c *current) onLetBinding274() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLetBinding274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding274()
}

func (c *current) onLetBinding264() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLetBinding264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding264()
}

func (c *current) onLetBinding236(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding236(stack["label"])
}

func (c *current) onLetBinding150(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLetBinding150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding150(stack["label"])
}

func (c *current) onLetBinding1(label, a, v interface{}) (interface{}, error) {
	if a != nil {
		return Binding{
			Variable:   label.(string),
			Annotation: a.([]interface{})[0].(Term),
			Value:      v.(Term),
		}, nil
	} else {
		return Binding{
			Variable: label.(string),
			Value:    v.(Term),
		}, nil
	}
}

func (p *parser) callonLetBinding1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLetBinding1(stack["label"], stack["a"], stack["v"])
}

func (c *current) onExpression15() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonExpression15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression15()
}

func (c *current) onExpression17() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonExpression17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression17()
}

func (c *current) onExpression19() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonExpression19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression19()
}

func (c *current) onExpression21() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonExpression21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression21()
}

func (c *current) onExpression23() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonExpression23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression23()
}

func (c *current) onExpression25() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonExpression25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression25()
}

func (c *current) onExpression27() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression27()
}

func (c *current) onExpression29() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonExpression29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression29()
}

func (c *current) onExpression31() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression31()
}

func (c *current) onExpression33() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression33()
}

func (c *current) onExpression35() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonExpression35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression35()
}

func (c *current) onExpression37() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonExpression37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression37()
}

func (c *current) onExpression39() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonExpression39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression39()
}

func (c *current) onExpression41() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonExpression41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression41()
}

func (c *current) onExpression43() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonExpression43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression43()
}

func (c *current) onExpression45() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonExpression45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression45()
}

func (c *current) onExpression47() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonExpression47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression47()
}

func (c *current) onExpression49() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonExpression49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression49()
}

func (c *current) onExpression51() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonExpression51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression51()
}

func (c *current) onExpression53() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonExpression53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression53()
}

func (c *current) onExpression55() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonExpression55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression55()
}

func (c *current) onExpression57() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression57()
}

func (c *current) onExpression59() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonExpression59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression59()
}

func (c *current) onExpression61() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonExpression61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression61()
}

func (c *current) onExpression63() (interface{}, error) {
	return True, nil
}

func (p *parser) callonExpression63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression63()
}

func (c *current) onExpression65() (interface{}, error) {
	return False, nil
}

func (p *parser) callonExpression65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression65()
}

func (c *current) onExpression67() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonExpression67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression67()
}

func (c *current) onExpression69() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonExpression69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression69()
}

func (c *current) onExpression71() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonExpression71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression71()
}

func (c *current) onExpression73() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonExpression73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression73()
}

func (c *current) onExpression75() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonExpression75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression75()
}

func (c *current) onExpression77() (interface{}, error) {
	return List, nil
}

func (p *parser) callonExpression77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression77()
}

func (c *current) onExpression79() (interface{}, error) {
	return None, nil
}

func (p *parser) callonExpression79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression79()
}

func (c *current) onExpression81() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonExpression81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression81()
}

func (c *current) onExpression83() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonExpression83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression83()
}

func (c *current) onExpression85() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonExpression85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression85()
}

func (c *current) onExpression94() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression94()
}

func (c *current) onExpression90(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression90(stack["label"])
}

func (c *current) onExpression110() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression110()
}

func (c *current) onExpression101() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression101()
}

func (c *current) onExpression136() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression136()
}

func (c *current) onExpression126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExpression126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression126()
}

func (c *current) onExpression98(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression98(stack["label"])
}

func (c *current) onExpression10(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression10(stack["label"])
}

func (c *current) onExpression157() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonExpression157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression157()
}

func (c *current) onExpression159() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonExpression159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression159()
}

func (c *current) onExpression161() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonExpression161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression161()
}

func (c *current) onExpression163() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonExpression163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression163()
}

func (c *current) onExpression165() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonExpression165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression165()
}

func (c *current) onExpression167() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonExpression167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression167()
}

func (c *current) onExpression169() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonExpression169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression169()
}

func (c *current) onExpression171() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonExpression171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression171()
}

func (c *current) onExpression173() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonExpression173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression173()
}

func (c *current) onExpression175() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonExpression175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression175()
}

func (c *current) onExpression177() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonExpression177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression177()
}

func (c *current) onExpression179() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonExpression179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression179()
}

func (c *current) onExpression181() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonExpression181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression181()
}

func (c *current) onExpression183() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonExpression183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression183()
}

func (c *current) onExpression185() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonExpression185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression185()
}

func (c *current) onExpression187() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonExpression187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression187()
}

func (c *current) onExpression189() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonExpression189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression189()
}

func (c *current) onExpression191() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonExpression191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression191()
}

func (c *current) onExpression193() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonExpression193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression193()
}

func (c *current) onExpression195() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonExpression195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression195()
}

func (c *current) onExpression197() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonExpression197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression197()
}

func (c *current) onExpression199() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonExpression199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression199()
}

func (c *current) onExpression201() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonExpression201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression201()
}

func (c *current) onExpression203() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonExpression203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression203()
}

func (c *current) onExpression205() (interface{}, error) {
	return True, nil
}

func (p *parser) callonExpression205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression205()
}

func (c *current) onExpression207() (interface{}, error) {
	return False, nil
}

func (p *parser) callonExpression207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression207()
}

func (c *current) onExpression209() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonExpression209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression209()
}

func (c *current) onExpression211() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonExpression211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression211()
}

func (c *current) onExpression213() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonExpression213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression213()
}

func (c *current) onExpression215() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonExpression215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression215()
}

func (c *current) onExpression217() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonExpression217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression217()
}

func (c *current) onExpression219() (interface{}, error) {
	return List, nil
}

func (p *parser) callonExpression219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression219()
}

func (c *current) onExpression221() (interface{}, error) {
	return None, nil
}

func (p *parser) callonExpression221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression221()
}

func (c *current) onExpression223() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonExpression223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression223()
}

func (c *current) onExpression225() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonExpression225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression225()
}

func (c *current) onExpression227() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonExpression227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression227()
}

func (c *current) onExpression235() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression235()
}

func (c *current) onExpression231(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression231(stack["label"])
}

func (c *current) onExpression251() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression251()
}

func (c *current) onExpression242() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression242()
}

func (c *current) onExpression277() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression277()
}

func (c *current) onExpression267() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExpression267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression267()
}

func (c *current) onExpression239(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression239(stack["label"])
}

func (c *current) onExpression153(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression153(stack["label"])
}

func (c *current) onExpression2(label, t, body interface{}) (interface{}, error) {
	return Lambda{Label: label.(string), Type: t.(Term), Body: body.(Term)}, nil

}

func (p *parser) callonExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression2(stack["label"], stack["t"], stack["body"])
}

func (c *current) onExpression308(cond, t, f interface{}) (interface{}, error) {
	return If{cond.(Term), t.(Term), f.(Term)}, nil

}

func (p *parser) callonExpression308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression308(stack["cond"], stack["t"], stack["f"])
}

func (c *current) onExpression324(bindings, b interface{}) (interface{}, error) {
	bs := make([]Binding, len(bindings.([]interface{})))
	for i, binding := range bindings.([]interface{}) {
		bs[i] = binding.(Binding)
	}
	return NewLet(b.(Term), bs...), nil

}

func (p *parser) callonExpression324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression324(stack["bindings"], stack["b"])
}

func (c *current) onExpression348() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonExpression348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression348()
}

func (c *current) onExpression350() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonExpression350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression350()
}

func (c *current) onExpression352() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonExpression352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression352()
}

func (c *current) onExpression354() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonExpression354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression354()
}

func (c *current) onExpression356() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonExpression356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression356()
}

func (c *current) onExpression358() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonExpression358() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression358()
}

func (c *current) onExpression360() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonExpression360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression360()
}

func (c *current) onExpression362() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonExpression362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression362()
}

func (c *current) onExpression364() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonExpression364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression364()
}

func (c *current) onExpression366() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonExpression366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression366()
}

func (c *current) onExpression368() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonExpression368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression368()
}

func (c *current) onExpression370() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonExpression370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression370()
}

func (c *current) onExpression372() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonExpression372() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression372()
}

func (c *current) onExpression374() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonExpression374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression374()
}

func (c *current) onExpression376() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonExpression376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression376()
}

func (c *current) onExpression378() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonExpression378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression378()
}

func (c *current) onExpression380() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonExpression380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression380()
}

func (c *current) onExpression382() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonExpression382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression382()
}

func (c *current) onExpression384() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonExpression384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression384()
}

func (c *current) onExpression386() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonExpression386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression386()
}

func (c *current) onExpression388() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonExpression388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression388()
}

func (c *current) onExpression390() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonExpression390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression390()
}

func (c *current) onExpression392() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonExpression392() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression392()
}

func (c *current) onExpression394() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonExpression394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression394()
}

func (c *current) onExpression396() (interface{}, error) {
	return True, nil
}

func (p *parser) callonExpression396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression396()
}

func (c *current) onExpression398() (interface{}, error) {
	return False, nil
}

func (p *parser) callonExpression398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression398()
}

func (c *current) onExpression400() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonExpression400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression400()
}

func (c *current) onExpression402() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonExpression402() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression402()
}

func (c *current) onExpression404() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonExpression404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression404()
}

func (c *current) onExpression406() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonExpression406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression406()
}

func (c *current) onExpression408() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonExpression408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression408()
}

func (c *current) onExpression410() (interface{}, error) {
	return List, nil
}

func (p *parser) callonExpression410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression410()
}

func (c *current) onExpression412() (interface{}, error) {
	return None, nil
}

func (p *parser) callonExpression412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression412()
}

func (c *current) onExpression414() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonExpression414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression414()
}

func (c *current) onExpression416() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonExpression416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression416()
}

func (c *current) onExpression418() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonExpression418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression418()
}

func (c *current) onExpression427() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression427()
}

func (c *current) onExpression423(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression423(stack["label"])
}

func (c *current) onExpression443() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression443()
}

func (c *current) onExpression434() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression434()
}

func (c *current) onExpression469() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression469()
}

func (c *current) onExpression459() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExpression459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression459()
}

func (c *current) onExpression431(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression431(stack["label"])
}

func (c *current) onExpression343(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression343(stack["label"])
}

func (c *current) onExpression490() (interface{}, error) {
	return NaturalBuild, nil
}

func (p *parser) callonExpression490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression490()
}

func (c *current) onExpression492() (interface{}, error) {
	return NaturalFold, nil
}

func (p *parser) callonExpression492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression492()
}

func (c *current) onExpression494() (interface{}, error) {
	return NaturalIsZero, nil
}

func (p *parser) callonExpression494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression494()
}

func (c *current) onExpression496() (interface{}, error) {
	return NaturalEven, nil
}

func (p *parser) callonExpression496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression496()
}

func (c *current) onExpression498() (interface{}, error) {
	return NaturalOdd, nil
}

func (p *parser) callonExpression498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression498()
}

func (c *current) onExpression500() (interface{}, error) {
	return NaturalToInteger, nil
}

func (p *parser) callonExpression500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression500()
}

func (c *current) onExpression502() (interface{}, error) {
	return NaturalShow, nil
}

func (p *parser) callonExpression502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression502()
}

func (c *current) onExpression504() (interface{}, error) {
	return NaturalSubtract, nil
}

func (p *parser) callonExpression504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression504()
}

func (c *current) onExpression506() (interface{}, error) {
	return IntegerClamp, nil
}

func (p *parser) callonExpression506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression506()
}

func (c *current) onExpression508() (interface{}, error) {
	return IntegerNegate, nil
}

func (p *parser) callonExpression508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression508()
}

func (c *current) onExpression510() (interface{}, error) {
	return IntegerToDouble, nil
}

func (p *parser) callonExpression510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression510()
}

func (c *current) onExpression512() (interface{}, error) {
	return IntegerShow, nil
}

func (p *parser) callonExpression512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression512()
}

func (c *current) onExpression514() (interface{}, error) {
	return DoubleShow, nil
}

func (p *parser) callonExpression514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression514()
}

func (c *current) onExpression516() (interface{}, error) {
	return ListBuild, nil
}

func (p *parser) callonExpression516() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression516()
}

func (c *current) onExpression518() (interface{}, error) {
	return ListFold, nil
}

func (p *parser) callonExpression518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression518()
}

func (c *current) onExpression520() (interface{}, error) {
	return ListLength, nil
}

func (p *parser) callonExpression520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression520()
}

func (c *current) onExpression522() (interface{}, error) {
	return ListHead, nil
}

func (p *parser) callonExpression522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression522()
}

func (c *current) onExpression524() (interface{}, error) {
	return ListLast, nil
}

func (p *parser) callonExpression524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression524()
}

func (c *current) onExpression526() (interface{}, error) {
	return ListIndexed, nil
}

func (p *parser) callonExpression526() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression526()
}

func (c *current) onExpression528() (interface{}, error) {
	return ListReverse, nil
}

func (p *parser) callonExpression528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression528()
}

func (c *current) onExpression530() (interface{}, error) {
	return OptionalBuild, nil
}

func (p *parser) callonExpression530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression530()
}

func (c *current) onExpression532() (interface{}, error) {
	return OptionalFold, nil
}

func (p *parser) callonExpression532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression532()
}

func (c *current) onExpression534() (interface{}, error) {
	return TextShow, nil
}

func (p *parser) callonExpression534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression534()
}

func (c *current) onExpression536() (interface{}, error) {
	return Bool, nil
}

func (p *parser) callonExpression536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression536()
}

func (c *current) onExpression538() (interface{}, error) {
	return True, nil
}

func (p *parser) callonExpression538() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression538()
}

func (c *current) onExpression540() (interface{}, error) {
	return False, nil
}

func (p *parser) callonExpression540() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression540()
}

func (c *current) onExpression542() (interface{}, error) {
	return Optional, nil
}

func (p *parser) callonExpression542() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression542()
}

func (c *current) onExpression544() (interface{}, error) {
	return Natural, nil
}

func (p *parser) callonExpression544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression544()
}

func (c *current) onExpression546() (interface{}, error) {
	return Integer, nil
}

func (p *parser) callonExpression546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression546()
}

func (c *current) onExpression548() (interface{}, error) {
	return Double, nil
}

func (p *parser) callonExpression548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression548()
}

func (c *current) onExpression550() (interface{}, error) {
	return Text, nil
}

func (p *parser) callonExpression550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression550()
}

func (c *current) onExpression552() (interface{}, error) {
	return List, nil
}

func (p *parser) callonExpression552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression552()
}

func (c *current) onExpression554() (interface{}, error) {
	return None, nil
}

func (p *parser) callonExpression554() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression554()
}

func (c *current) onExpression556() (interface{}, error) {
	return Type, nil
}

func (p *parser) callonExpression556() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression556()
}

func (c *current) onExpression558() (interface{}, error) {
	return Kind, nil
}

func (p *parser) callonExpression558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression558()
}

func (c *current) onExpression560() (interface{}, error) {
	return Sort, nil
}

func (p *parser) callonExpression560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression560()
}

func (c *current) onExpression568() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression568()
}

func (c *current) onExpression564(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression564(stack["label"])
}

func (c *current) onExpression584() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression584()
}

func (c *current) onExpression575() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpression575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression575()
}

func (c *current) onExpression610() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonExpression610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression610()
}

func (c *current) onExpression600() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExpression600() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression600()
}

func (c *current) onExpression572(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression572() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression572(stack["label"])
}

func (c *current) onExpression486(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonExpression486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression486(stack["label"])
}

func (c *current) onExpression333(label, t, body interface{}) (interface{}, error) {
	return Pi{Label: label.(string), Type: t.(Term), Body: body.(Term)}, nil

}

func (p *parser) callonExpression333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression333(stack["label"], stack["t"], stack["body"])
}

func (c *current) onExpression641(o, e interface{}) (interface{}, error) {
	return NewAnonPi(o.(Term), e.(Term)), nil
}

func (p *parser) callonExpression641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression641(stack["o"], stack["e"])
}

func (c *current) onExpression652(h, u, a interface{}) (interface{}, error) {
	return Merge{Handler: h.(Term), Union: u.(Term), Annotation: a.(Term)}, nil

}

func (p *parser) callonExpression652() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression652(stack["h"], stack["u"], stack["a"])
}

func (c *current) onExpression667(e, t interface{}) (interface{}, error) {
	return ToMap{e.(Term), t.(Term)}, nil
}

func (p *parser) callonExpression667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression667(stack["e"], stack["t"])
}

func (c *current) onExpression678(a interface{}) (interface{}, error) {
	return Assert{Annotation: a.(Term)}, nil
}

func (p *parser) callonExpression678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpression678(stack["a"])
}

func (c *current) onAnnotation1(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonAnnotation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotation1(stack["a"])
}

func (c *current) onAnnotatedExpression1(e, a interface{}) (interface{}, error) {
	if a == nil {
		return e, nil
	}
	return Annot{e.(Term), a.([]interface{})[1].(Term)}, nil

}

func (p *parser) callonAnnotatedExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotatedExpression1(stack["e"], stack["a"])
}

func (c *current) onEmptyList1(a interface{}) (interface{}, error) {
	return EmptyList{a.(Term)}, nil
}

func (p *parser) callonEmptyList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEmptyList1(stack["a"])
}

func (c *current) onImportAltExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(ImportAltOp, first, rest), nil
}

func (p *parser) callonImportAltExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImportAltExpression1(stack["first"], stack["rest"])
}

func (c *current) onOrExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(OrOp, first, rest), nil
}

func (p *parser) callonOrExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrExpression1(stack["first"], stack["rest"])
}

func (c *current) onPlusExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(PlusOp, first, rest), nil
}

func (p *parser) callonPlusExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPlusExpression1(stack["first"], stack["rest"])
}

func (c *current) onTextAppendExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(TextAppendOp, first, rest), nil
}

func (p *parser) callonTextAppendExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAppendExpression1(stack["first"], stack["rest"])
}

func (c *current) onListAppendExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(ListAppendOp, first, rest), nil
}

func (p *parser) callonListAppendExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListAppendExpression1(stack["first"], stack["rest"])
}

func (c *current) onAndExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(AndOp, first, rest), nil
}

func (p *parser) callonAndExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndExpression1(stack["first"], stack["rest"])
}

func (c *current) onCombineExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(RecordMergeOp, first, rest), nil
}

func (p *parser) callonCombineExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCombineExpression1(stack["first"], stack["rest"])
}

func (c *current) onPreferExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(RightBiasedRecordMergeOp, first, rest), nil
}

func (p *parser) callonPreferExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreferExpression1(stack["first"], stack["rest"])
}

func (c *current) onCombineTypesExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(RecordTypeMergeOp, first, rest), nil
}

func (p *parser) callonCombineTypesExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCombineTypesExpression1(stack["first"], stack["rest"])
}

func (c *current) onTimesExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(TimesOp, first, rest), nil
}

func (p *parser) callonTimesExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTimesExpression1(stack["first"], stack["rest"])
}

func (c *current) onEqualExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(EqOp, first, rest), nil
}

func (p *parser) callonEqualExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualExpression1(stack["first"], stack["rest"])
}

func (c *current) onNotEqualExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(NeOp, first, rest), nil
}

func (p *parser) callonNotEqualExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotEqualExpression1(stack["first"], stack["rest"])
}

func (c *current) onEquivalentExpression1(first, rest interface{}) (interface{}, error) {
	return parseOperator(EquivOp, first, rest), nil
}

func (p *parser) callonEquivalentExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquivalentExpression1(stack["first"], stack["rest"])
}

func (c *current) onApplicationExpression1(f, rest interface{}) (interface{}, error) {
	e := f.(Term)
	if rest == nil {
		return e, nil
	}
	for _, arg := range rest.([]interface{}) {
		e = Apply(e, arg.([]interface{})[1].(Term))
	}
	return e, nil

}

func (p *parser) callonApplicationExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApplicationExpression1(stack["f"], stack["rest"])
}

func (c *current) onFirstApplicationExpression2(h, u interface{}) (interface{}, error) {
	return Merge{Handler: h.(Term), Union: u.(Term)}, nil

}

func (p *parser) callonFirstApplicationExpression2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstApplicationExpression2(stack["h"], stack["u"])
}

func (c *current) onFirstApplicationExpression11(e interface{}) (interface{}, error) {
	return Some{e.(Term)}, nil
}

func (p *parser) callonFirstApplicationExpression11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstApplicationExpression11(stack["e"])
}

func (c *current) onFirstApplicationExpression17(e interface{}) (interface{}, error) {
	return ToMap{Record: e.(Term)}, nil
}

func (p *parser) callonFirstApplicationExpression17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstApplicationExpression17(stack["e"])
}

func (c *current) onCompletionExpression1(a, b interface{}) (interface{}, error) {
	if b == nil {
		return a, nil
	}
	return Op{OpCode: CompleteOp, L: a.(Term), R: b.([]interface{})[3].(Term)}, nil
}

func (p *parser) callonCompletionExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCompletionExpression1(stack["a"], stack["b"])
}

func (c *current) onSelectorExpression1(e, ls interface{}) (interface{}, error) {
	expr := e.(Term)
	labels := ls.([]interface{})
	for _, labelSelector := range labels {
		selectorIface := labelSelector.([]interface{})[3]
		switch selector := selectorIface.(type) {
		case string:
			expr = Field{expr, selector}
		case []string:
			expr = Project{expr, selector}
		case Term:
			expr = ProjectType{expr, selector}
		default:
			return nil, errors.New("unimplemented")
		}
	}
	return expr, nil
}

func (p *parser) callonSelectorExpression1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectorExpression1(stack["e"], stack["ls"])
}

func (c *current) onSelector6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSelector6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector6()
}

func (c *current) onSelector2(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonSelector2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector2(stack["label"])
}

func (c *current) onSelector22() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonSelector22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector22()
}

func (c *current) onSelector13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSelector13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector13()
}

func (c *current) onSelector48() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonSelector48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector48()
}

func (c *current) onSelector38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSelector38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector38()
}

func (c *current) onSelector10(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonSelector10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelector10(stack["label"])
}

func (c *current) onLabels13() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels13()
}

func (c *current) onLabels9(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLabels9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels9(stack["label"])
}

func (c *current) onLabels29() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLabels29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels29()
}

func (c *current) onLabels20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels20()
}

func (c *current) onLabels55() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLabels55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels55()
}

func (c *current) onLabels45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLabels45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels45()
}

func (c *current) onLabels17(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLabels17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels17(stack["label"])
}

func (c *current) onLabels72() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels72()
}

func (c *current) onLabels84() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels84()
}

func (c *current) onLabels80(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLabels80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels80(stack["label"])
}

func (c *current) onLabels100() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLabels100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels100()
}

func (c *current) onLabels91() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels91()
}

func (c *current) onLabels126() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonLabels126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels126()
}

func (c *current) onLabels116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLabels116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels116()
}

func (c *current) onLabels88(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonLabels88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels88(stack["label"])
}

func (c *current) onLabels143() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabels143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels143()
}

func (c *current) onLabels1(optclauses interface{}) (interface{}, error) {
	if optclauses == nil {
		return []string{}, nil
	}
	clauses := optclauses.([]interface{})
	labels := []string{clauses[0].(string)}
	for _, next := range clauses[2].([]interface{}) {
		labels = append(labels, next.([]interface{})[2].(string))
	}
	return labels, nil
}

func (p *parser) callonLabels1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabels1(stack["optclauses"])
}

func (c *current) onTypeSelector1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonTypeSelector1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeSelector1(stack["e"])
}

func (c *current) onPrimitiveExpression3() (interface{}, error) {
	d, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return nil, err
	}
	return DoubleLit(d), nil
}

func (p *parser) callonPrimitiveExpression3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression3()
}

func (c *current) onPrimitiveExpression27() (interface{}, error) {
	return DoubleLit(math.Inf(1)), nil
}

func (p *parser) callonPrimitiveExpression27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression27()
}

func (c *current) onPrimitiveExpression29() (interface{}, error) {
	return DoubleLit(math.Inf(-1)), nil
}

func (p *parser) callonPrimitiveExpression29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression29()
}

func (c *current) onPrimitiveExpression31() (interface{}, error) {
	return DoubleLit(math.NaN()), nil
}

func (p *parser) callonPrimitiveExpression31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression31()
}

func (c *current) onPrimitiveExpression33() (interface{}, error) {
	i, err := strconv.ParseInt(string(c.text), 0, 0)
	return NaturalLit(i), err

}

func (p *parser) callonPrimitiveExpression33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression33()
}

func (c *current) onPrimitiveExpression45() (interface{}, error) {
	return nil, errors.New("Natural literals cannot have leading zeros")
}

func (p *parser) callonPrimitiveExpression45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression45()
}

func (c *current) onPrimitiveExpression50() (interface{}, error) {
	return NaturalLit(0), nil
}

func (p *parser) callonPrimitiveExpression50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression50()
}

func (c *current) onPrimitiveExpression57() (interface{}, error) {
	i, err := strconv.ParseInt(string(c.text), 0, 0)
	return NaturalLit(i), err

}

func (p *parser) callonPrimitiveExpression57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression57()
}

func (c *current) onPrimitiveExpression69() (interface{}, error) {
	return nil, errors.New("Natural literals cannot have leading zeros")
}

func (p *parser) callonPrimitiveExpression69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression69()
}

func (c *current) onPrimitiveExpression74() (interface{}, error) {
	return NaturalLit(0), nil
}

func (p *parser) callonPrimitiveExpression74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression74()
}

func (c *current) onPrimitiveExpression52(n interface{}) (interface{}, error) {
	return IntegerLit(n.(NaturalLit)), nil
}

func (p *parser) callonPrimitiveExpression52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression52(stack["n"])
}

func (c *current) onPrimitiveExpression81() (interface{}, error) {
	i, err := strconv.ParseInt(string(c.text), 0, 0)
	return NaturalLit(i), err

}

func (p *parser) callonPrimitiveExpression81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression81()
}

func (c *current) onPrimitiveExpression93() (interface{}, error) {
	return nil, errors.New("Natural literals cannot have leading zeros")
}

func (p *parser) callonPrimitiveExpression93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression93()
}

func (c *current) onPrimitiveExpression98() (interface{}, error) {
	return NaturalLit(0), nil
}

func (p *parser) callonPrimitiveExpression98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression98()
}

func (c *current) onPrimitiveExpression76(n interface{}) (interface{}, error) {
	return IntegerLit(-(n.(NaturalLit))), nil
}

func (p *parser) callonPrimitiveExpression76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression76(stack["n"])
}

func (c *current) onPrimitiveExpression101(r interface{}) (interface{}, error) {
	return r, nil
}

func (p *parser) callonPrimitiveExpression101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression101(stack["r"])
}

func (c *current) onPrimitiveExpression113(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonPrimitiveExpression113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression113(stack["u"])
}

func (c *current) onPrimitiveExpression127(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonPrimitiveExpression127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveExpression127(stack["e"])
}

func (c *current) onRecordTypeOrLiteral2() (interface{}, error) {
	return RecordLit{}, nil
}

func (p *parser) callonRecordTypeOrLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeOrLiteral2()
}

func (c *current) onRecordTypeOrLiteral6() (interface{}, error) {
	return RecordType{}, nil
}

func (p *parser) callonRecordTypeOrLiteral6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeOrLiteral6()
}

func (c *current) onMoreRecordType1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMoreRecordType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreRecordType1(stack["f"])
}

func (c *current) onNonEmptyRecordType1(first, rest interface{}) (interface{}, error) {
	fields := rest.([]interface{})
	content := first.(RecordType)
	for _, field := range fields {
		for k, v := range field.(RecordType) {
			if _, ok := content[k]; ok {
				return nil, fmt.Errorf("Duplicate field %s in record", k)
			}
			content[k] = v
		}
	}
	return content, nil

}

func (p *parser) callonNonEmptyRecordType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonEmptyRecordType1(stack["first"], stack["rest"])
}

func (c *current) onRecordTypeEntry9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordTypeEntry9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry9()
}

func (c *current) onRecordTypeEntry5(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordTypeEntry5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry5(stack["label"])
}

func (c *current) onRecordTypeEntry25() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordTypeEntry25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry25()
}

func (c *current) onRecordTypeEntry16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordTypeEntry16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry16()
}

func (c *current) onRecordTypeEntry51() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordTypeEntry51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry51()
}

func (c *current) onRecordTypeEntry41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRecordTypeEntry41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry41()
}

func (c *current) onRecordTypeEntry13(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordTypeEntry13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry13(stack["label"])
}

func (c *current) onRecordTypeEntry68() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordTypeEntry68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry68()
}

func (c *current) onRecordTypeEntry1(name, expr interface{}) (interface{}, error) {
	return RecordType{name.(string): expr.(Term)}, nil
}

func (p *parser) callonRecordTypeEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordTypeEntry1(stack["name"], stack["expr"])
}

func (c *current) onMoreRecordLiteral1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMoreRecordLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreRecordLiteral1(stack["f"])
}

func (c *current) onNonEmptyRecordLiteral1(first, rest interface{}) (interface{}, error) {
	fields := rest.([]interface{})
	content := first.(RecordLit)
	for _, field := range fields {
		for k, v := range field.(RecordLit) {
			if _, ok := content[k]; ok {
				content[k] = Op{
					OpCode: RecordMergeOp,
					L:      content[k],
					R:      v,
				}
			} else {
				content[k] = v
			}
		}
	}
	return content, nil

}

func (p *parser) callonNonEmptyRecordLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonEmptyRecordLiteral1(stack["first"], stack["rest"])
}

func (c *current) onRecordLiteralEntry9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordLiteralEntry9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry9()
}

func (c *current) onRecordLiteralEntry5(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordLiteralEntry5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry5(stack["label"])
}

func (c *current) onRecordLiteralEntry25() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordLiteralEntry25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry25()
}

func (c *current) onRecordLiteralEntry16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordLiteralEntry16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry16()
}

func (c *current) onRecordLiteralEntry51() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordLiteralEntry51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry51()
}

func (c *current) onRecordLiteralEntry41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRecordLiteralEntry41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry41()
}

func (c *current) onRecordLiteralEntry13(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordLiteralEntry13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry13(stack["label"])
}

func (c *current) onRecordLiteralEntry68() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordLiteralEntry68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry68()
}

func (c *current) onRecordLiteralEntry81() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordLiteralEntry81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry81()
}

func (c *current) onRecordLiteralEntry77(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordLiteralEntry77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry77(stack["label"])
}

func (c *current) onRecordLiteralEntry97() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordLiteralEntry97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry97()
}

func (c *current) onRecordLiteralEntry88() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordLiteralEntry88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry88()
}

func (c *current) onRecordLiteralEntry123() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonRecordLiteralEntry123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry123()
}

func (c *current) onRecordLiteralEntry113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRecordLiteralEntry113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry113()
}

func (c *current) onRecordLiteralEntry85(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonRecordLiteralEntry85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry85(stack["label"])
}

func (c *current) onRecordLiteralEntry140() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRecordLiteralEntry140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry140()
}

func (c *current) onRecordLiteralEntry1(name, children, expr interface{}) (interface{}, error) {
	rest := expr.(Term)
	for i := len(children.([]interface{})) - 1; i >= 0; i-- {
		child := children.([]interface{})[i].([]interface{})[3].(string)
		rest = RecordLit{child: rest}
	}
	return RecordLit{name.(string): rest}, nil
}

func (p *parser) callonRecordLiteralEntry1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRecordLiteralEntry1(stack["name"], stack["children"], stack["expr"])
}

func (c *current) onUnionType3() (interface{}, error) {
	return UnionType{}, nil
}

func (p *parser) callonUnionType3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionType3()
}

func (c *current) onNonEmptyUnionType1(first, rest interface{}) (interface{}, error) {
	alternatives := make(UnionType)
	first2 := first.([]interface{})
	if first2[1] == nil {
		alternatives[first2[0].(string)] = nil
	} else {
		alternatives[first2[0].(string)] = first2[1].([]interface{})[3].(Term)
	}
	if rest == nil {
		return UnionType(alternatives), nil
	}
	for _, alternativeSyntax := range rest.([]interface{}) {
		alternative := alternativeSyntax.([]interface{})[3].([]interface{})
		name := alternative[0].(string)
		if _, ok := alternatives[name]; ok {
			return nil, fmt.Errorf("Duplicate alternative %s in union", name)
		}

		if alternative[1] == nil {
			alternatives[name] = nil
		} else {
			alternatives[name] = alternative[1].([]interface{})[3].(Term)
		}
	}
	return alternatives, nil
}

func (p *parser) callonNonEmptyUnionType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonEmptyUnionType1(stack["first"], stack["rest"])
}

func (c *current) onUnionTypeEntry7() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnionTypeEntry7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionTypeEntry7()
}

func (c *current) onUnionTypeEntry3(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonUnionTypeEntry3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionTypeEntry3(stack["label"])
}

func (c *current) onUnionTypeEntry23() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonUnionTypeEntry23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionTypeEntry23()
}

func (c *current) onUnionTypeEntry14() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnionTypeEntry14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionTypeEntry14()
}

func (c *current) onUnionTypeEntry49() (interface{}, error) {
	return Missing{}, nil
}

func (p *parser) callonUnionTypeEntry49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionTypeEntry49()
}

func (c *current) onUnionTypeEntry39() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnionTypeEntry39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionTypeEntry39()
}

func (c *current) onUnionTypeEntry11(label interface{}) (interface{}, error) {
	return label, nil
}

func (p *parser) callonUnionTypeEntry11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionTypeEntry11(stack["label"])
}

func (c *current) onUnionTypeEntry66() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUnionTypeEntry66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnionTypeEntry66()
}

func (c *current) onMoreList1(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonMoreList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoreList1(stack["e"])
}

func (c *current) onNonEmptyListLiteral1(first, rest interface{}) (interface{}, error) {
	exprs := rest.([]interface{})
	content := make(NonEmptyList, len(exprs)+1)
	content[0] = first.(Term)
	for i, expr := range exprs {
		content[i+1] = expr.(Term)
	}
	return content, nil

}

func (p *parser) callonNonEmptyListLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonEmptyListLiteral1(stack["first"], stack["rest"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
